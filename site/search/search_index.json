{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MCP OAuth Sample Documentation","text":"\ud83d\udfe2 Live Demo Available <p>Welcome to the comprehensive documentation for the MCP OAuth Sample project - a production-ready OAuth 2.1 authorization server with Model Context Protocol (MCP) integration.</p> <p>What is MCP OAuth Sample?</p> <p>This project extends the run-llama/mcp-nextjs reference implementation with OAuth 2.1 compliance, refresh tokens, DIY analytics, and enhanced security monitoring.</p>"},{"location":"#quick-navigation","title":"Quick Navigation","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Setup Guide - Complete installation and configuration instructions</li> <li>Architecture Overview - System design and component relationships</li> </ul>"},{"location":"#implementation-details","title":"Implementation Details","text":"<ul> <li>Security Features - OAuth 2.1 security implementation and monitoring</li> <li>Analytics Dashboard - Real-time monitoring and metrics</li> <li>API Reference - Complete API documentation with examples</li> </ul>"},{"location":"#operations","title":"Operations","text":"<ul> <li>Deployment Guide - Production deployment strategies</li> <li>Development Guide - Local development and testing</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#about-this-project","title":"About This Project","text":"<p>This project extends the run-llama/mcp-nextjs reference implementation with:</p> <ul> <li>OAuth 2.1 with Refresh Tokens - Full authorization server with PKCE support</li> <li>DIY Analytics Dashboard - Real-time monitoring and security analytics</li> <li>Enhanced Security - Comprehensive threat detection and monitoring</li> <li>Production Ready - Complete deployment and operations documentation</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"\ud83d\udd10 OAuth 2.1 Compliance <p>Full OAuth 2.1 authorization server with PKCE support, refresh token rotation, and resource indicators.</p> \ud83d\udd0c MCP Integration <p>Authenticated Model Context Protocol server with tool execution and transport support.</p> \ud83d\udcca DIY Analytics <p>Real-time analytics dashboard with performance metrics, user tracking, and OAuth insights.</p> \ud83d\udee1\ufe0f Security Monitoring <p>Comprehensive threat detection, security event logging, and risk assessment.</p> \ud83d\ude80 Production Ready <p>Built with Next.js 15, PostgreSQL, Prisma ORM, and optimized for Vercel deployment.</p> \ud83d\udd17 Google SSO <p>Integrated Google authentication with NextAuth.js and multi-admin support.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Clone and install\ngit clone &lt;your-repo-url&gt;\ncd mcp-oauth-sample\npnpm install\n\n# Setup environment\ncp .env.example .env\n# Edit .env with your configuration\n\n# Setup database\npnpm prisma generate\npnpm prisma db push\n\n# Start development\npnpm dev\n</code></pre>"},{"location":"#support","title":"Support","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>Documentation: Complete guides in this docs directory</li> <li>Community: Join our discussions</li> </ul> <p>Built with \u2764\ufe0f using Next.js, OAuth 2.1, and MCP Protocol</p>"},{"location":"analytics/","title":"Analytics Dashboard Documentation","text":""},{"location":"analytics/#overview","title":"Overview","text":"<p>The MCP OAuth Analytics Dashboard provides comprehensive monitoring and insights for your OAuth 2.1 server and MCP (Model Context Protocol) infrastructure. This real-time analytics system tracks user activity, security events, OAuth flows, MCP tool usage, and performance metrics to help you understand and optimize your system.</p>"},{"location":"analytics/#dashboard-features-and-sections","title":"Dashboard Features and Sections","text":""},{"location":"analytics/#main-dashboard-structure","title":"Main Dashboard Structure","text":"<p>The analytics dashboard is organized into three expandable sections:</p> <ol> <li>OAuth Metrics - Authentication and client management insights</li> <li>Security Overview - Real-time threat detection and monitoring</li> <li>Performance &amp; Tools - MCP tool usage and response metrics</li> </ol>"},{"location":"analytics/#dashboard-access-control","title":"Dashboard Access Control","text":"<ul> <li>Admin Authentication Required: Only users with Gmail addresses listed in <code>ADMIN_EMAIL</code> environment variable can access the dashboard</li> <li>Session-based Security: Uses NextAuth.js for secure authentication</li> <li>Real-time Updates: Dashboard refreshes automatically and supports manual refresh</li> </ul>"},{"location":"analytics/#metrics-and-kpis","title":"Metrics and KPIs","text":""},{"location":"analytics/#oauth-metrics","title":"OAuth Metrics","text":""},{"location":"analytics/#user-metrics","title":"User Metrics","text":"<ul> <li>Total Users: Count of users who have authorized OAuth clients</li> <li>Active Users: Users with valid, non-expired access tokens</li> <li>User Activity Rate: Percentage of users currently active (active/total)</li> </ul>"},{"location":"analytics/#client-metrics","title":"Client Metrics","text":"<ul> <li>Total Clients: All registered OAuth clients</li> <li>Active Clients: Clients with active tokens</li> <li>Client Activity: Detailed per-client statistics</li> </ul>"},{"location":"analytics/#token-metrics","title":"Token Metrics","text":"<ul> <li>Active Tokens: Currently valid access tokens</li> <li>Recent Authorizations: New OAuth flows in selected time period</li> <li>Token Refresh Rate: Rate of token refresh operations per hour</li> <li>PKCE Adoption: Percentage of flows using PKCE security enhancement</li> </ul>"},{"location":"analytics/#grant-type-distribution","title":"Grant Type Distribution","text":"<ul> <li>Tracks usage patterns of different OAuth grant types</li> <li>Monitors compliance with OAuth 2.1 security requirements</li> </ul>"},{"location":"analytics/#performance-analytics","title":"Performance Analytics","text":""},{"location":"analytics/#response-time-metrics","title":"Response Time Metrics","text":"<ul> <li>Average Response Time: Mean response time across all requests</li> <li>95<sup>th</sup> Percentile (P95): Response time for 95% of requests</li> <li>Error Rate: Percentage of requests returning 4xx/5xx status codes</li> </ul>"},{"location":"analytics/#request-analytics","title":"Request Analytics","text":"<ul> <li>Total Requests: Volume of API requests</li> <li>Top Endpoints: Most frequently accessed endpoints</li> <li>Geographic Distribution: Request origins by country/city</li> </ul>"},{"location":"analytics/#security-analytics","title":"Security Analytics","text":""},{"location":"analytics/#threat-detection-system","title":"Threat Detection System","text":"<p>The security monitoring system uses the <code>SecurityMonitor</code> class to detect various threats in real-time:</p>"},{"location":"analytics/#security-event-types","title":"Security Event Types","text":"<ol> <li>AUTH_FAILURE - Authentication failures</li> <li>INVALID_TOKEN - Token validation failures</li> <li>SUSPICIOUS_ACTIVITY - Unusual behavior patterns</li> <li>RATE_LIMIT_EXCEEDED - Request rate violations</li> <li>UNAUTHORIZED_ACCESS - Access to restricted resources</li> <li>TOKEN_REUSE - Token usage from multiple IPs</li> <li>UNUSUAL_LOCATION - Access from new geographic locations</li> <li>PRIVILEGE_ESCALATION - Attempts to gain elevated permissions</li> <li>MALFORMED_REQUEST - Invalid request structures</li> <li>BRUTE_FORCE_ATTEMPT - Multiple failed authentication attempts</li> <li>OAUTH_INVALID_CLIENT - Invalid OAuth client credentials</li> <li>OAUTH_INVALID_GRANT - Invalid OAuth grant usage</li> <li>OAUTH_INVALID_SCOPE - Invalid scope requests</li> </ol>"},{"location":"analytics/#risk-scoring","title":"Risk Scoring","text":"<p>Each security event includes a risk score (0-100): - 0-30: Low risk (informational) - 31-69: Medium risk (requires monitoring) - 70-89: High risk (requires attention) - 90-100: Critical risk (immediate action required)</p>"},{"location":"analytics/#advanced-threat-detection","title":"Advanced Threat Detection","text":"<ol> <li>Rate Limiting Detection</li> <li>Monitors request frequency per IP address</li> <li>Default threshold: 30 requests per minute</li> <li> <p>Dynamic risk scoring based on excess requests</p> </li> <li> <p>Token Reuse Detection</p> </li> <li>Tracks token usage across different IP addresses</li> <li> <p>Detects potential token theft or sharing</p> </li> <li> <p>Privilege Escalation Detection</p> </li> <li>Monitors OAuth scope changes over time</li> <li>Detects attempts to access elevated permissions</li> <li> <p>Analyzes historical scope patterns</p> </li> <li> <p>OAuth-Specific Threats</p> </li> <li>Token audience validation violations</li> <li>PKCE bypass attempts</li> <li>Missing resource parameters</li> <li>Cross-service token usage</li> </ol>"},{"location":"analytics/#oauth-metrics_1","title":"OAuth Metrics","text":""},{"location":"analytics/#client-activity-monitoring","title":"Client Activity Monitoring","text":"<p>The dashboard tracks detailed client activity including:</p> <ul> <li>Unique Users: Number of distinct users per client</li> <li>Active Tokens: Current valid tokens per client</li> <li>Recent Requests: Request volume in selected time period</li> <li>Last Activity: Timestamp of most recent client usage</li> <li>User Names: List of users associated with each client</li> </ul>"},{"location":"analytics/#token-expiration-tracking","title":"Token Expiration Tracking","text":"<p>Monitors tokens approaching expiration: - Client Name: Which client owns the expiring tokens - Token Count: Number of tokens expiring - Hours Until Expiry: Time remaining before expiration</p>"},{"location":"analytics/#grant-type-analysis","title":"Grant Type Analysis","text":"<p>Tracks OAuth grant type usage patterns: - Authorization Code: Standard OAuth flow usage - Refresh Token: Token refresh operations - Client Credentials: Service-to-service authentication</p>"},{"location":"analytics/#performance-analytics_1","title":"Performance Analytics","text":""},{"location":"analytics/#mcp-tool-usage","title":"MCP Tool Usage","text":""},{"location":"analytics/#tool-metrics","title":"Tool Metrics","text":"<ul> <li>Tool Name: MCP tool identifier</li> <li>MCP Method: Specific method called (e.g., \"tools/call\", \"tools/list\")</li> <li>Usage Count: Total number of calls</li> <li>Unique Users: Distinct users accessing the tool</li> <li>Average Response Time: Mean response time in milliseconds</li> <li>Error Rate: Percentage of failed calls</li> </ul>"},{"location":"analytics/#geographic-usage","title":"Geographic Usage","text":"<ul> <li>Country/City: Geographic distribution of tool usage</li> <li>Call Count: Number of calls from each location</li> <li>Percentage: Relative usage distribution</li> </ul>"},{"location":"analytics/#time-series-analysis","title":"Time Series Analysis","text":"<ul> <li>Hourly Response Times: Response time trends over time</li> <li>Call Volume: Request patterns throughout the day</li> <li>Performance Percentiles: P50, P95 response time tracking</li> </ul>"},{"location":"analytics/#data-collection-and-storage","title":"Data Collection and Storage","text":""},{"location":"analytics/#database-schema","title":"Database Schema","text":"<p>The analytics system uses PostgreSQL with the following key tables:</p>"},{"location":"analytics/#analyticsrequest","title":"AnalyticsRequest","text":"<p>Primary table for request tracking with automatic TTL (14 days):</p> <pre><code>- id: Unique identifier\n- timestamp: Request timestamp (indexed)\n- endpoint: API endpoint accessed\n- method: HTTP method\n- statusCode: Response status\n- responseTime: Response time in ms\n- clientId/userId: Request context (indexed)\n- mcpServerId: MCP server context\n- ipAddress: Client IP (geographic enrichment)\n- userAgent: Client user agent\n- scopes: OAuth scopes (array)\n- oauthGrantType: OAuth flow type\n- usePKCE: PKCE usage flag\n- expiresAt: TTL expiration (indexed)\n</code></pre>"},{"location":"analytics/#analyticssecurity","title":"AnalyticsSecurity","text":"<p>Security events with risk scoring:</p> <pre><code>- id: Unique identifier\n- timestamp: Event timestamp (indexed)\n- eventType: Security event type (enum)\n- severity: Event severity level\n- riskScore: Risk score (0-100)\n- userId/clientId: Context (indexed)\n- ipAddress: Source IP\n- details: JSON event details\n- resolved: Resolution status\n- expiresAt: TTL expiration\n</code></pre>"},{"location":"analytics/#mcpserver","title":"MCPServer","text":"<p>MCP server registry:</p> <pre><code>- id: Unique identifier\n- name: Human-readable name\n- identifier: MCP protocol identifier\n- description: Optional description\n- version: Server version\n</code></pre>"},{"location":"analytics/#data-retention-policy","title":"Data Retention Policy","text":"<ul> <li>Request Data: 14-day TTL via database triggers</li> <li>Security Events: 14-day TTL for non-critical events</li> <li>Critical Events: Extended retention for compliance</li> <li>Automatic Cleanup: Database handles expiration via TTL fields</li> </ul>"},{"location":"analytics/#real-time-processing","title":"Real-time Processing","text":""},{"location":"analytics/#batched-collection-system","title":"Batched Collection System","text":"<p>The <code>OptimizedAnalyticsCollector</code> provides high-performance data collection:</p>"},{"location":"analytics/#batching-strategy","title":"Batching Strategy","text":"<ul> <li>Batch Size: 100 records per database write</li> <li>Flush Interval: 15 seconds for regular batches</li> <li>Immediate Flush: For MCP tool calls (debugging)</li> <li>Connection Pooling: Efficient database connection management</li> </ul>"},{"location":"analytics/#performance-optimizations","title":"Performance Optimizations","text":"<ul> <li>Non-blocking Writes: Analytics collection doesn't slow down requests</li> <li>Asynchronous Processing: Geographic enrichment happens in background</li> <li>Connection Management: Database transactions for batch operations</li> <li>Error Resilience: Failed batches are retried with limits</li> </ul>"},{"location":"analytics/#geographic-enrichment","title":"Geographic Enrichment","text":"<p>IP addresses are enriched with geographic data: - External API: Uses ip-api.com for geolocation - Caching: Results cached to reduce API calls - Fallback: Mock data for localhost development - Timeout Handling: Quick timeouts prevent request delays</p>"},{"location":"analytics/#customization-and-configuration","title":"Customization and Configuration","text":""},{"location":"analytics/#environment-variables","title":"Environment Variables","text":"<p>Required configuration: <pre><code>DATABASE_URL=postgresql://...     # PostgreSQL connection\nADMIN_EMAIL=admin@example.com    # Dashboard access control\nAUTH_SECRET=your-secret-key      # NextAuth secret\nGOOGLE_CLIENT_ID=...             # OAuth provider\nGOOGLE_CLIENT_SECRET=...         # OAuth provider\n</code></pre></p>"},{"location":"analytics/#time-range-selection","title":"Time Range Selection","text":"<p>Dashboard supports multiple time ranges: - Last 1 hour - Last 6 hours - Last 24 hours (default) - Last 3 days - Last 7 days</p>"},{"location":"analytics/#metric-thresholds","title":"Metric Thresholds","text":"<p>Configurable alerting thresholds: - Error Rate: &gt;5% critical, &gt;1% warning - Response Time: &gt;1000ms critical, &gt;500ms warning - PKCE Adoption: &lt;50% generates warning - Rate Limiting: 30 requests/minute threshold</p>"},{"location":"analytics/#api-endpoints-for-analytics","title":"API Endpoints for Analytics","text":""},{"location":"analytics/#primary-analytics-endpoint","title":"Primary Analytics Endpoint","text":"<pre><code>GET /api/analytics?hours=24\n</code></pre> <p>Parameters: - <code>hours</code>: Time range (1-168 hours)</p> <p>Response: <pre><code>{\n  \"performance\": {\n    \"totalRequests\": 1234,\n    \"avgResponseTime\": 245,\n    \"p95ResponseTime\": 890,\n    \"errorRate\": 1.2\n  },\n  \"oauth\": {\n    \"totalUsers\": 45,\n    \"activeUsers\": 32,\n    \"totalClients\": 8,\n    \"activeTokens\": 67,\n    \"pkceAdoption\": 89.5,\n    \"clients\": [...],\n    \"expiringTokens\": [...]\n  },\n  \"security\": {\n    \"totalEvents\": 3,\n    \"criticalEvents\": 0,\n    \"highRiskEvents\": 1,\n    \"eventsByOrganization\": [...],\n    \"privilegeEscalations\": [...]\n  },\n  \"toolUsage\": {\n    \"tools\": [...],\n    \"geographic\": [...],\n    \"timeSeries\": [...],\n    \"totalCalls\": 456,\n    \"activeUsers\": 23\n  }\n}\n</code></pre></p>"},{"location":"analytics/#security-analytics-endpoint","title":"Security Analytics Endpoint","text":"<pre><code>GET /api/analytics/security?days=30\n</code></pre> <p>Parameters: - <code>days</code>: Number of days for security analysis</p>"},{"location":"analytics/#data-collection-endpoints","title":"Data Collection Endpoints","text":"<pre><code>POST /api/analytics/collect\nContent-Type: application/json\n\n{\n  \"timestamp\": \"2024-01-01T10:00:00Z\",\n  \"endpoint\": \"/mcp/sse\",\n  \"method\": \"GET\",\n  \"statusCode\": 200,\n  \"responseTime\": 234,\n  \"clientId\": \"client-123\",\n  \"userId\": \"user-456\",\n  \"ipAddress\": \"192.168.1.1\",\n  \"userAgent\": \"MCP-Client/1.0\",\n  \"mcpMethod\": \"tools/call\",\n  \"toolName\": \"add_numbers\"\n}\n</code></pre> <pre><code>POST /api/analytics/security\nContent-Type: application/json\n\n{\n  \"timestamp\": \"2024-01-01T10:00:00Z\",\n  \"eventType\": \"RATE_LIMIT_EXCEEDED\",\n  \"severity\": \"medium\",\n  \"ipAddress\": \"192.168.1.100\",\n  \"userAgent\": \"suspicious-client\",\n  \"details\": {\n    \"requestCount\": 45,\n    \"timeWindow\": 60000\n  },\n  \"riskScore\": 75\n}\n</code></pre>"},{"location":"analytics/#threat-generation-endpoint-development","title":"Threat Generation Endpoint (Development)","text":"<pre><code>POST /api/analytics/generate-threats\nContent-Type: application/json\n\n{\n  \"runDetection\": true,\n  \"mockScenarios\": [\n    \"privilege_escalation\",\n    \"token_reuse\",\n    \"rate_limit_exceeded\",\n    \"oauth_pkce_bypass\"\n  ]\n}\n</code></pre>"},{"location":"analytics/#exporting-data","title":"Exporting Data","text":""},{"location":"analytics/#data-export-options","title":"Data Export Options","text":"<ol> <li>CSV Export: Dashboard tables can be exported via browser</li> <li>API Access: All data accessible via REST endpoints</li> <li>Database Direct: PostgreSQL direct access for reporting tools</li> <li>Time Series: Granular data for external monitoring systems</li> </ol>"},{"location":"analytics/#integration-capabilities","title":"Integration Capabilities","text":"<ul> <li>SIEM Integration: Security events can be forwarded to SIEM systems</li> <li>Monitoring Tools: Metrics compatible with Prometheus/Grafana</li> <li>Alerting Systems: Webhook support for critical events</li> <li>Business Intelligence: SQL-accessible data for BI tools</li> </ul>"},{"location":"analytics/#troubleshooting-analytics","title":"Troubleshooting Analytics","text":""},{"location":"analytics/#common-issues","title":"Common Issues","text":""},{"location":"analytics/#dashboard-not-loading","title":"Dashboard Not Loading","text":"<pre><code># Check admin email configuration\necho $ADMIN_EMAIL\n\n# Verify database connection\nnpm run prisma:studio\n\n# Check authentication\n# Visit /api/auth/signin\n</code></pre>"},{"location":"analytics/#missing-data","title":"Missing Data","text":"<pre><code># Verify data collection\ncurl -X POST http://localhost:3000/api/analytics/collect \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"timestamp\":\"2024-01-01T10:00:00Z\",\"endpoint\":\"/test\",\"method\":\"GET\",\"statusCode\":200,\"responseTime\":100,\"ipAddress\":\"127.0.0.1\",\"userAgent\":\"test\"}'\n\n# Check database\nnpm run prisma:studio\n# Look for AnalyticsRequest records\n</code></pre>"},{"location":"analytics/#performance-issues","title":"Performance Issues","text":"<pre><code># Check database indexes\npsql $DATABASE_URL -c \"\\d+ AnalyticsRequest\"\n\n# Monitor batch processing\n# Look for analytics logs in application output\n\n# Check TTL cleanup\npsql $DATABASE_URL -c \"SELECT COUNT(*) FROM \\\"AnalyticsRequest\\\" WHERE \\\"expiresAt\\\" &lt; NOW();\"\n</code></pre>"},{"location":"analytics/#database-maintenance","title":"Database Maintenance","text":""},{"location":"analytics/#manual-cleanup","title":"Manual Cleanup","text":"<pre><code>-- Remove expired records\nDELETE FROM \"AnalyticsRequest\" WHERE \"expiresAt\" &lt; NOW();\nDELETE FROM \"AnalyticsSecurity\" WHERE \"expiresAt\" &lt; NOW();\n\n-- Check table sizes\nSELECT \n  schemaname,\n  tablename,\n  pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size\nFROM pg_tables \nWHERE schemaname = 'public'\nORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;\n</code></pre>"},{"location":"analytics/#performance-tuning","title":"Performance Tuning","text":"<pre><code>-- Analyze query performance\nEXPLAIN ANALYZE SELECT * FROM \"AnalyticsRequest\" \nWHERE timestamp &gt;= NOW() - INTERVAL '24 hours';\n\n-- Rebuild indexes if needed\nREINDEX TABLE \"AnalyticsRequest\";\n</code></pre>"},{"location":"analytics/#security-monitoring-issues","title":"Security Monitoring Issues","text":""},{"location":"analytics/#false-positives","title":"False Positives","text":"<ul> <li>Adjust risk scoring thresholds in <code>SecurityMonitor</code> class</li> <li>Update suspicious user agent patterns</li> <li>Configure location whitelist for known VPN usage</li> </ul>"},{"location":"analytics/#missing-events","title":"Missing Events","text":"<ul> <li>Verify SecurityMonitor integration in MCP endpoints</li> <li>Check event type mappings in security collection</li> <li>Ensure proper context passing to detection system</li> </ul>"},{"location":"analytics/#best-practices","title":"Best Practices","text":""},{"location":"analytics/#performance","title":"Performance","text":"<ul> <li>Monitor database size and implement additional cleanup if needed</li> <li>Use connection pooling for high-traffic deployments</li> <li>Consider read replicas for analytics queries in production</li> </ul>"},{"location":"analytics/#security","title":"Security","text":"<ul> <li>Regularly review security event patterns</li> <li>Set up alerting for critical events</li> <li>Monitor privilege escalation attempts closely</li> <li>Keep PKCE adoption rates high (&gt;90%)</li> </ul>"},{"location":"analytics/#monitoring","title":"Monitoring","text":"<ul> <li>Set up external monitoring for the analytics system itself</li> <li>Monitor dashboard performance and availability</li> <li>Track data collection success rates</li> <li>Alert on analytics system failures</li> </ul> <p>This analytics system provides comprehensive visibility into your MCP OAuth infrastructure, enabling proactive monitoring, security threat detection, and performance optimization.</p>"},{"location":"api/","title":"MCP OAuth Server API Reference","text":"<p>This document provides comprehensive documentation for the MCP OAuth 2.1 server API, including authentication, OAuth endpoints, MCP integration, analytics, and administrative functions.</p>"},{"location":"api/#table-of-contents","title":"Table of Contents","text":"<ol> <li>API Overview</li> <li>Authentication Requirements</li> <li>OAuth 2.1 Endpoints</li> <li>MCP Endpoints</li> <li>Analytics Endpoints</li> <li>Discovery Endpoints</li> <li>Admin Endpoints</li> <li>Error Handling</li> <li>Rate Limiting</li> <li>Response Formats</li> <li>Security Considerations</li> <li>Examples and Testing</li> </ol>"},{"location":"api/#api-overview","title":"API Overview","text":"<p>The MCP OAuth server provides a comprehensive OAuth 2.1 authorization server with Model Context Protocol (MCP) integration. The server supports:</p> <ul> <li>OAuth 2.1 Authorization Server: Full OAuth 2.1 implementation with PKCE support</li> <li>MCP Protocol Integration: Authenticated MCP tool execution over SSE and HTTP</li> <li>Analytics &amp; Monitoring: Comprehensive request tracking and security monitoring</li> <li>Enterprise Features: SSO integration, multi-tenant support, and admin controls</li> </ul>"},{"location":"api/#base-url","title":"Base URL","text":"<pre><code>https://your-domain.com\n</code></pre>"},{"location":"api/#api-versioning","title":"API Versioning","text":"<p>All endpoints use implicit versioning. The current API version is <code>v1</code>.</p>"},{"location":"api/#content-types","title":"Content Types","text":"<ul> <li>Request: <code>application/json</code>, <code>application/x-www-form-urlencoded</code></li> <li>Response: <code>application/json</code></li> </ul>"},{"location":"api/#authentication-requirements","title":"Authentication Requirements","text":""},{"location":"api/#public-endpoints-no-authentication","title":"Public Endpoints (No Authentication)","text":"<ul> <li>Discovery endpoints (<code>.well-known/*</code>)</li> <li>OAuth client registration</li> <li>OAuth authorization and token endpoints</li> <li>Health check endpoints</li> </ul>"},{"location":"api/#authenticated-endpoints-bearer-token-required","title":"Authenticated Endpoints (Bearer Token Required)","text":"<ul> <li>MCP endpoints (<code>/mcp/*</code>)</li> <li>Analytics endpoints (<code>/api/analytics/*</code>)</li> <li>Admin endpoints (<code>/api/cleanup</code>, <code>/api/test/*</code>)</li> </ul>"},{"location":"api/#authentication-methods","title":"Authentication Methods","text":""},{"location":"api/#bearer-token-authentication","title":"Bearer Token Authentication","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api/#nextauth-session-authentication","title":"NextAuth Session Authentication","text":"<p>Used for web UI and analytics dashboard access.</p>"},{"location":"api/#oauth-21-endpoints","title":"OAuth 2.1 Endpoints","text":""},{"location":"api/#client-registration","title":"Client Registration","text":"<p>Dynamic client registration following RFC 7591.</p>"},{"location":"api/#register-oauth-client","title":"Register OAuth Client","text":"<pre><code>POST /api/oauth/register\nContent-Type: application/json\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"client_name\": \"My MCP Client\",\n  \"redirect_uris\": [\n    \"http://localhost:3000/callback\",\n    \"https://myapp.com/oauth/callback\"\n  ]\n}\n</code></pre> <p>Response (201 Created):</p> <pre><code>{\n  \"client_id\": \"cluid123456789\",\n  \"client_secret\": \"secret_abc123...\",\n  \"redirect_uris\": [\n    \"http://localhost:3000/callback\",\n    \"https://myapp.com/oauth/callback\"\n  ]\n}\n</code></pre> <p>Error Responses:</p> <pre><code>{\n  \"error\": \"Missing required fields\"\n}\n</code></pre> <p>cURL Example:</p> <pre><code>curl -X POST https://your-domain.com/api/oauth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"client_name\": \"Test Client\",\n    \"redirect_uris\": [\"http://localhost:3000/callback\"]\n  }'\n</code></pre>"},{"location":"api/#authorization-endpoint","title":"Authorization Endpoint","text":"<p>OAuth 2.1 authorization endpoint with PKCE support.</p>"},{"location":"api/#authorize-request","title":"Authorize Request","text":"<pre><code>GET /oauth/authorize\n</code></pre> <p>Query Parameters:</p> Parameter Required Description <code>client_id</code> Yes Client identifier <code>redirect_uri</code> Yes Redirect URI (must match registered) <code>response_type</code> Yes Must be <code>code</code> <code>state</code> Recommended CSRF protection token <code>code_challenge</code> Optional PKCE code challenge <code>code_challenge_method</code> Optional <code>S256</code> or <code>plain</code> <code>resource</code> Optional Target resource identifier <p>Example Request:</p> <pre><code>GET /oauth/authorize?client_id=cluid123&amp;redirect_uri=http://localhost:3000/callback&amp;response_type=code&amp;state=xyz&amp;code_challenge=abc123&amp;code_challenge_method=S256\n</code></pre> <p>Success Response:</p> <p>Redirect to <code>redirect_uri</code> with authorization code:</p> <pre><code>HTTP/1.1 302 Found\nLocation: http://localhost:3000/callback?code=auth_code_123&amp;state=xyz\n</code></pre> <p>Error Response:</p> <p>Redirect to <code>redirect_uri</code> with error:</p> <pre><code>HTTP/1.1 302 Found\nLocation: http://localhost:3000/callback?error=access_denied&amp;state=xyz\n</code></pre>"},{"location":"api/#token-endpoint","title":"Token Endpoint","text":"<p>Exchange authorization code or refresh token for access tokens.</p>"},{"location":"api/#token-exchange","title":"Token Exchange","text":"<pre><code>POST /api/oauth/token\nContent-Type: application/x-www-form-urlencoded\n</code></pre> <p>Authorization Code Grant:</p> <pre><code>grant_type=authorization_code\n&amp;code=auth_code_123\n&amp;redirect_uri=http://localhost:3000/callback\n&amp;client_id=cluid123\n&amp;client_secret=secret_abc123\n&amp;code_verifier=verifier_xyz\n&amp;resource=https://your-domain.com\n</code></pre> <p>Refresh Token Grant:</p> <pre><code>grant_type=refresh_token\n&amp;refresh_token=refresh_abc123\n&amp;client_id=cluid123\n&amp;client_secret=secret_abc123\n&amp;resource=https://your-domain.com\n</code></pre> <p>Success Response (200 OK):</p> <pre><code>{\n  \"access_token\": \"token_abc123...\",\n  \"refresh_token\": \"refresh_xyz789...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 300\n}\n</code></pre> <p>Error Responses:</p> <pre><code>{\n  \"error\": \"invalid_grant\"\n}\n</code></pre> <pre><code>{\n  \"error\": \"invalid_client\"\n}\n</code></pre> <p>cURL Examples:</p> <pre><code># Authorization Code Grant\ncurl -X POST https://your-domain.com/api/oauth/token \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -d \"grant_type=authorization_code&amp;code=auth_code_123&amp;redirect_uri=http://localhost:3000/callback&amp;client_id=cluid123&amp;client_secret=secret_abc123&amp;code_verifier=verifier_xyz\"\n\n# Refresh Token Grant\ncurl -X POST https://your-domain.com/api/oauth/token \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -d \"grant_type=refresh_token&amp;refresh_token=refresh_abc123&amp;client_id=cluid123&amp;client_secret=secret_abc123\"\n</code></pre>"},{"location":"api/#mcp-endpoints","title":"MCP Endpoints","text":"<p>Model Context Protocol endpoints for authenticated tool execution.</p>"},{"location":"api/#mcp-server-endpoints","title":"MCP Server Endpoints","text":""},{"location":"api/#sse-transport","title":"SSE Transport","text":"<pre><code>POST /mcp/sse\nAuthorization: Bearer &lt;access_token&gt;\nContent-Type: application/json\n</code></pre>"},{"location":"api/#http-transport","title":"HTTP Transport","text":"<pre><code>POST /mcp/mcp\nAuthorization: Bearer &lt;access_token&gt;\nContent-Type: application/json\n</code></pre> <p>Authentication:</p> <ul> <li>Requires valid Bearer token in Authorization header</li> <li>Token audience validation enforced</li> <li>Token expiration checked</li> </ul> <p>Available Tools:</p> <ol> <li>add_numbers - Add two numbers</li> <li>calculate_circle_area - Calculate circle area</li> <li>generate_random_number - Generate random number in range</li> <li>format_text - Format text (uppercase, lowercase, titlecase, reverse)</li> <li>check_prime_number - Check if number is prime</li> <li>trigger_security_events - Generate security events for testing</li> </ol> <p>Example Tool Call:</p> <pre><code>{\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"add_numbers\",\n    \"arguments\": {\n      \"a\": 5,\n      \"b\": 3\n    }\n  }\n}\n</code></pre> <p>Success Response:</p> <pre><code>{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"The sum of 5 and 3 is 8\"\n    }\n  ]\n}\n</code></pre> <p>Error Response (401 Unauthorized):</p> <pre><code>{\n  \"error\": \"Unauthorized\"\n}\n</code></pre> <p>cURL Example:</p> <pre><code>curl -X POST https://your-domain.com/mcp/sse \\\n  -H \"Authorization: Bearer token_abc123...\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"method\": \"tools/call\",\n    \"params\": {\n      \"name\": \"add_numbers\",\n      \"arguments\": {\"a\": 5, \"b\": 3}\n    }\n  }'\n</code></pre>"},{"location":"api/#authentication-middleware","title":"Authentication Middleware","text":"<p>All MCP endpoints include:</p> <ul> <li>Token Validation: Database lookup and expiration check</li> <li>Audience Validation: Ensures token is valid for current server</li> <li>Security Logging: Failed attempts logged for monitoring</li> <li>Analytics: Request metrics and tool usage tracking</li> </ul>"},{"location":"api/#analytics-endpoints","title":"Analytics Endpoints","text":"<p>Comprehensive analytics and monitoring system.</p>"},{"location":"api/#analytics-data","title":"Analytics Data","text":""},{"location":"api/#get-analytics-dashboard-data","title":"Get Analytics Dashboard Data","text":"<pre><code>GET /api/analytics\nAuthorization: NextAuth Session Required\n</code></pre> <p>Query Parameters:</p> Parameter Type Default Description <code>hours</code> integer 24 Time range in hours (1-168) <p>Example Request:</p> <pre><code>GET /api/analytics?hours=72\n</code></pre> <p>Success Response (200 OK):</p> <pre><code>{\n  \"performance\": {\n    \"totalRequests\": 1250,\n    \"averageResponseTime\": 145.2,\n    \"successRate\": 98.4,\n    \"activeUsers\": 45\n  },\n  \"topEndpoints\": [\n    {\n      \"endpoint\": \"/mcp/sse\",\n      \"count\": 856,\n      \"averageResponseTime\": 120.5\n    }\n  ],\n  \"geography\": {\n    \"byCountry\": [\n      {\"country\": \"United States\", \"requestCount\": 750},\n      {\"country\": \"Canada\", \"requestCount\": 200}\n    ]\n  },\n  \"oauth\": {\n    \"totalTokens\": 123,\n    \"activeTokens\": 89,\n    \"clients\": [\n      {\n        \"clientName\": \"Test Client\",\n        \"requestCount\": 456,\n        \"lastActivity\": \"2024-01-15T10:30:00Z\"\n      }\n    ],\n    \"expiringTokens\": 5,\n    \"grantTypes\": [\n      {\"grantType\": \"authorization_code\", \"count\": 100},\n      {\"grantType\": \"refresh_token\", \"count\": 23}\n    ]\n  },\n  \"toolUsage\": {\n    \"tools\": [\n      {\n        \"toolName\": \"add_numbers\",\n        \"usageCount\": 234,\n        \"uniqueUsers\": 12,\n        \"averageResponseTime\": 95.2\n      }\n    ],\n    \"totalCalls\": 567,\n    \"activeUsers\": 23\n  },\n  \"security\": {\n    \"totalEvents\": 12,\n    \"criticalEvents\": 2,\n    \"events\": [\n      {\n        \"eventType\": \"INVALID_TOKEN\",\n        \"severity\": \"high\",\n        \"timestamp\": \"2024-01-15T10:30:00Z\",\n        \"details\": \"Token audience mismatch\"\n      }\n    ]\n  },\n  \"timeRange\": \"72 hours\",\n  \"lastUpdated\": \"2024-01-15T12:00:00Z\"\n}\n</code></pre>"},{"location":"api/#analytics-collection","title":"Analytics Collection","text":""},{"location":"api/#collect-analytics-data","title":"Collect Analytics Data","text":"<pre><code>POST /api/analytics/collect\nContent-Type: application/json\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"timestamp\": \"2024-01-15T12:00:00Z\",\n  \"endpoint\": \"/mcp/sse\",\n  \"method\": \"POST\",\n  \"statusCode\": 200,\n  \"responseTime\": 125,\n  \"clientId\": \"client_123\",\n  \"userId\": \"user_456\",\n  \"ipAddress\": \"192.168.1.100\",\n  \"userAgent\": \"Mozilla/5.0...\",\n  \"mcpMethod\": \"tools/call\",\n  \"toolName\": \"add_numbers\"\n}\n</code></pre> <p>Response (200 OK):</p> <pre><code>{\n  \"success\": true\n}\n</code></pre>"},{"location":"api/#security-analytics","title":"Security Analytics","text":""},{"location":"api/#get-security-analytics","title":"Get Security Analytics","text":"<pre><code>GET /api/analytics/security\n</code></pre> <p>Query Parameters:</p> Parameter Type Default Description <code>days</code> integer 30 Time range in days <p>Success Response:</p> <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"totalEvents\": 45,\n    \"criticalEvents\": 5,\n    \"eventsByType\": [\n      {\"eventType\": \"INVALID_TOKEN\", \"count\": 12},\n      {\"eventType\": \"RATE_LIMIT_EXCEEDED\", \"count\": 8}\n    ],\n    \"eventsBySeverity\": [\n      {\"severity\": \"critical\", \"count\": 5},\n      {\"severity\": \"high\", \"count\": 15}\n    ]\n  },\n  \"timeRange\": {\n    \"startDate\": \"2024-01-01T00:00:00Z\",\n    \"endDate\": \"2024-01-15T12:00:00Z\",\n    \"days\": 30\n  }\n}\n</code></pre>"},{"location":"api/#log-security-event","title":"Log Security Event","text":"<pre><code>POST /api/analytics/security\nContent-Type: application/json\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"timestamp\": \"2024-01-15T12:00:00Z\",\n  \"eventType\": \"INVALID_TOKEN\",\n  \"ipAddress\": \"192.168.1.100\",\n  \"userAgent\": \"curl/7.68.0\",\n  \"clientId\": \"client_123\",\n  \"details\": \"Token audience mismatch detected\"\n}\n</code></pre>"},{"location":"api/#discovery-endpoints","title":"Discovery Endpoints","text":"<p>OAuth 2.1 and MCP discovery metadata endpoints.</p>"},{"location":"api/#oauth-authorization-server-metadata","title":"OAuth Authorization Server Metadata","text":"<pre><code>GET /.well-known/oauth-authorization-server\n</code></pre> <p>Response (200 OK):</p> <pre><code>{\n  \"issuer\": \"https://your-domain.com\",\n  \"authorization_endpoint\": \"https://your-domain.com/oauth/authorize\",\n  \"token_endpoint\": \"https://your-domain.com/api/oauth/token\",\n  \"registration_endpoint\": \"https://your-domain.com/api/oauth/register\",\n  \"scopes_supported\": [\"read\", \"write\"],\n  \"response_types_supported\": [\"code\"],\n  \"grant_types_supported\": [\"authorization_code\", \"refresh_token\"],\n  \"code_challenge_methods_supported\": [\"S256\", \"plain\"],\n  \"token_endpoint_auth_methods_supported\": [\"client_secret_post\", \"none\"],\n  \"resource_parameter_supported\": true\n}\n</code></pre>"},{"location":"api/#oauth-protected-resource-metadata","title":"OAuth Protected Resource Metadata","text":"<pre><code>GET /.well-known/oauth-protected-resource\n</code></pre> <p>Response (200 OK):</p> <pre><code>{\n  \"resource\": \"https://your-domain.com\",\n  \"authorization_servers\": [\"https://your-domain.com\"],\n  \"scopes_supported\": [\"read\", \"write\"],\n  \"bearer_methods_supported\": [\"header\"],\n  \"mcp_endpoints\": [\n    \"https://your-domain.com/mcp/mcp\",\n    \"https://your-domain.com/mcp/sse\"\n  ]\n}\n</code></pre>"},{"location":"api/#admin-endpoints","title":"Admin Endpoints","text":"<p>Administrative endpoints for system maintenance and testing.</p>"},{"location":"api/#database-cleanup","title":"Database Cleanup","text":""},{"location":"api/#clean-expired-data","title":"Clean Expired Data","text":"<pre><code>POST /api/cleanup\n</code></pre> <p>Success Response:</p> <pre><code>{\n  \"message\": \"Cleanup completed successfully\",\n  \"deletedCount\": 125\n}\n</code></pre>"},{"location":"api/#get-ttl-status","title":"Get TTL Status","text":"<pre><code>GET /api/cleanup\n</code></pre> <p>Success Response:</p> <pre><code>{\n  \"message\": \"TTL status retrieved successfully\",\n  \"data\": {\n    \"expiredTokens\": 15,\n    \"expiredAnalytics\": 250,\n    \"nextCleanup\": \"2024-01-16T00:00:00Z\"\n  }\n}\n</code></pre>"},{"location":"api/#security-event-testing","title":"Security Event Testing","text":""},{"location":"api/#generate-test-security-events","title":"Generate Test Security Events","text":"<pre><code>POST /api/test/security-events\nContent-Type: application/json\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"eventType\": \"AUTH_FAILURE\",\n  \"count\": 5,\n  \"severity\": \"high\"\n}\n</code></pre> <p>Available Event Types:</p> <ul> <li><code>AUTH_FAILURE</code> - Authentication failures</li> <li><code>INVALID_TOKEN</code> - Token validation failures</li> <li><code>SUSPICIOUS_ACTIVITY</code> - Suspicious user agents/behavior</li> <li><code>RATE_LIMIT_EXCEEDED</code> - API rate limit violations</li> <li><code>TOKEN_REUSE</code> - Cross-IP token usage</li> <li><code>UNUSUAL_LOCATION</code> - Geographic anomalies</li> <li><code>PRIVILEGE_ESCALATION</code> - OAuth scope escalation</li> <li><code>BRUTE_FORCE_ATTEMPT</code> - Credential attacks</li> <li><code>OAUTH_INVALID_CLIENT</code> - PKCE bypass attempts</li> <li><code>OAUTH_INVALID_GRANT</code> - Missing resource parameters</li> </ul> <p>Success Response:</p> <pre><code>{\n  \"success\": true,\n  \"message\": \"Generated 5 AUTH_FAILURE event(s)\",\n  \"events\": 5\n}\n</code></pre>"},{"location":"api/#generate-advanced-threat-scenarios","title":"Generate Advanced Threat Scenarios","text":"<pre><code>POST /api/analytics/generate-threats\nContent-Type: application/json\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"runDetection\": true,\n  \"mockScenarios\": [\n    \"privilege_escalation\",\n    \"token_reuse\",\n    \"rate_limit_exceeded\",\n    \"oauth_pkce_bypass\"\n  ]\n}\n</code></pre> <p>Success Response:</p> <pre><code>{\n  \"success\": true,\n  \"message\": \"SecurityMonitor detected and logged 8 realistic threats\",\n  \"threatsDetected\": 8,\n  \"scenarios\": [\"privilege_escalation\", \"token_reuse\"]\n}\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":""},{"location":"api/#standard-error-response-format","title":"Standard Error Response Format","text":"<p>All endpoints return errors in a consistent format:</p> <pre><code>{\n  \"error\": \"error_code\",\n  \"error_description\": \"Human readable error description\",\n  \"details\": \"Additional error details (optional)\"\n}\n</code></pre>"},{"location":"api/#http-status-codes","title":"HTTP Status Codes","text":"Code Meaning Description 200 OK Successful request 201 Created Resource created successfully 400 Bad Request Invalid request parameters 401 Unauthorized Authentication required 403 Forbidden Insufficient permissions 404 Not Found Resource not found 429 Too Many Requests Rate limit exceeded 500 Internal Server Error Server error"},{"location":"api/#oauth-error-codes","title":"OAuth Error Codes","text":"Error Code Description <code>invalid_request</code> Missing or invalid request parameters <code>invalid_client</code> Client authentication failed <code>invalid_grant</code> Authorization code/refresh token invalid <code>unsupported_grant_type</code> Grant type not supported <code>invalid_scope</code> Requested scope invalid <code>server_error</code> Internal server error"},{"location":"api/#mcp-error-responses","title":"MCP Error Responses","text":"<pre><code>{\n  \"error\": \"Unauthorized\",\n  \"message\": \"Invalid or expired access token\"\n}\n</code></pre>"},{"location":"api/#rate-limiting","title":"Rate Limiting","text":""},{"location":"api/#rate-limiting-policy","title":"Rate Limiting Policy","text":"<p>The server implements rate limiting on sensitive endpoints:</p> <ul> <li>OAuth Endpoints: 30 requests per minute per IP</li> <li>MCP Endpoints: 100 requests per minute per token</li> <li>Analytics Endpoints: 10 requests per minute per session</li> </ul>"},{"location":"api/#rate-limit-headers","title":"Rate Limit Headers","text":"<pre><code>X-RateLimit-Limit: 30\nX-RateLimit-Remaining: 25\nX-RateLimit-Reset: 1642176000\n</code></pre>"},{"location":"api/#rate-limit-exceeded-response","title":"Rate Limit Exceeded Response","text":"<pre><code>HTTP/1.1 429 Too Many Requests\nContent-Type: application/json\n\n{\n  \"error\": \"rate_limit_exceeded\",\n  \"error_description\": \"Rate limit exceeded. Try again later.\",\n  \"retry_after\": 60\n}\n</code></pre>"},{"location":"api/#response-formats","title":"Response Formats","text":""},{"location":"api/#successful-responses","title":"Successful Responses","text":"<p>All successful responses include appropriate HTTP status codes and JSON payloads.</p>"},{"location":"api/#pagination","title":"Pagination","text":"<p>Large result sets use cursor-based pagination:</p> <pre><code>{\n  \"data\": [...],\n  \"pagination\": {\n    \"next_cursor\": \"cursor_abc123\",\n    \"has_more\": true,\n    \"total_count\": 1250\n  }\n}\n</code></pre>"},{"location":"api/#timestamps","title":"Timestamps","text":"<p>All timestamps use ISO 8601 format in UTC:</p> <pre><code>{\n  \"created_at\": \"2024-01-15T12:00:00.000Z\",\n  \"expires_at\": \"2024-01-15T13:00:00.000Z\"\n}\n</code></pre>"},{"location":"api/#security-considerations","title":"Security Considerations","text":""},{"location":"api/#token-security","title":"Token Security","text":"<ul> <li>Access tokens expire in 5 minutes (configurable)</li> <li>Refresh tokens expire in 7 days</li> <li>Audience validation prevents token misuse across servers</li> <li>Token rotation for public clients per OAuth 2.1</li> </ul>"},{"location":"api/#pkce-requirements","title":"PKCE Requirements","text":"<ul> <li>Public clients MUST use PKCE</li> <li>Confidential clients SHOULD use PKCE</li> <li>Code challenge methods: S256 (recommended), plain (legacy)</li> </ul>"},{"location":"api/#security-monitoring","title":"Security Monitoring","text":"<p>The server includes comprehensive security monitoring:</p> <ul> <li>Authentication failures - Failed login attempts</li> <li>Token violations - Invalid/expired token usage</li> <li>Audience violations - Cross-server token usage</li> <li>Rate limit violations - API abuse detection</li> <li>Privilege escalation - Unusual scope requests</li> <li>Geographic anomalies - Unusual location access</li> <li>User agent detection - Bot/automation detection</li> </ul>"},{"location":"api/#cors-configuration","title":"CORS Configuration","text":"<pre><code>{\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n  \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n}\n</code></pre>"},{"location":"api/#data-protection","title":"Data Protection","text":"<ul> <li>Analytics data TTL: 14 days</li> <li>Security events TTL: 14 days</li> <li>Access tokens stored hashed</li> <li>Client secrets should be hashed (demo stores plaintext)</li> </ul>"},{"location":"api/#examples-and-testing","title":"Examples and Testing","text":""},{"location":"api/#complete-oauth-flow-example","title":"Complete OAuth Flow Example","text":"<ol> <li>Register Client:</li> </ol> <pre><code>curl -X POST https://your-domain.com/api/oauth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"client_name\": \"Test App\", \"redirect_uris\": [\"http://localhost:3000/callback\"]}'\n</code></pre> <ol> <li>Generate PKCE Values:</li> </ol> <pre><code>// Generate code verifier and challenge\nconst codeVerifier = base64URLEncode(crypto.randomBytes(32));\nconst codeChallenge = base64URLEncode(crypto.createHash('sha256').update(codeVerifier).digest());\n</code></pre> <ol> <li>Authorization Request:</li> </ol> <pre><code>https://your-domain.com/oauth/authorize?client_id=CLIENT_ID&amp;redirect_uri=http://localhost:3000/callback&amp;response_type=code&amp;state=STATE&amp;code_challenge=CODE_CHALLENGE&amp;code_challenge_method=S256\n</code></pre> <ol> <li>Token Exchange:</li> </ol> <pre><code>curl -X POST https://your-domain.com/api/oauth/token \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -d \"grant_type=authorization_code&amp;code=AUTH_CODE&amp;redirect_uri=http://localhost:3000/callback&amp;client_id=CLIENT_ID&amp;client_secret=CLIENT_SECRET&amp;code_verifier=CODE_VERIFIER\"\n</code></pre> <ol> <li>Use MCP Endpoint:</li> </ol> <pre><code>curl -X POST https://your-domain.com/mcp/sse \\\n  -H \"Authorization: Bearer ACCESS_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"method\": \"tools/call\", \"params\": {\"name\": \"add_numbers\", \"arguments\": {\"a\": 5, \"b\": 3}}}'\n</code></pre>"},{"location":"api/#testing-security-features","title":"Testing Security Features","text":"<p>Generate test security events:</p> <pre><code>curl -X POST https://your-domain.com/api/test/security-events \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"eventType\": \"INVALID_TOKEN\", \"count\": 3}'\n</code></pre> <p>Run advanced threat detection:</p> <pre><code>curl -X POST https://your-domain.com/api/analytics/generate-threats \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"runDetection\": true, \"mockScenarios\": [\"privilege_escalation\", \"token_reuse\"]}'\n</code></pre>"},{"location":"api/#postman-collection","title":"Postman Collection","text":"<p>A Postman collection is available with pre-configured requests for all endpoints:</p> <ul> <li>OAuth client registration and token flows</li> <li>MCP tool execution examples</li> <li>Analytics and security testing</li> <li>Admin operations</li> </ul> <p>Import the collection URL: <pre><code>https://your-domain.com/postman/mcp-oauth-collection.json\n</code></pre></p>"},{"location":"api/#development-tools","title":"Development Tools","text":"<ul> <li>Prisma Studio: Database management UI</li> <li>Analytics Dashboard: Real-time monitoring at <code>/analytics</code></li> <li>Security Dashboard: Security events and threat detection</li> <li>Health Checks: Server status and database connectivity</li> </ul>"},{"location":"api/#api-reference-summary","title":"API Reference Summary","text":"<p>This MCP OAuth server provides a production-ready OAuth 2.1 authorization server with comprehensive MCP integration, enterprise-grade analytics, and advanced security monitoring. The API supports both public and confidential clients, implements PKCE for enhanced security, and provides detailed observability for production deployments.</p> <p>For additional support and advanced configuration options, refer to the other documentation files in the <code>/docs</code> directory.</p>"},{"location":"architecture/","title":"MCP OAuth 2.1 Server Architecture Documentation","text":""},{"location":"architecture/#table-of-contents","title":"Table of Contents","text":"<ol> <li>System Architecture Overview</li> <li>OAuth 2.1 Implementation Details</li> <li>MCP Protocol Integration</li> <li>Database Schema and Models</li> <li>API Endpoints Architecture</li> <li>Authentication &amp; Authorization Flow</li> <li>Security Architecture</li> <li>Analytics System Design</li> <li>Technology Stack</li> <li>File Structure and Organization</li> </ol>"},{"location":"architecture/#system-architecture-overview","title":"System Architecture Overview","text":"<p>The MCP OAuth 2.1 Server is a comprehensive authentication and authorization system designed to secure Model Context Protocol (MCP) interactions. The system implements OAuth 2.1 with PKCE (Proof Key for Code Exchange) to provide secure authentication for MCP clients while maintaining compatibility with modern security standards.</p>"},{"location":"architecture/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    subgraph \"Client Layer\"\n        MC[MCP Client]\n        WC[Web Client]\n        API[API Client]\n    end\n\n    subgraph \"Next.js Application\"\n        subgraph \"Authentication Layer\"\n            NA[NextAuth.js]\n            GA[Google OAuth]\n        end\n\n        subgraph \"OAuth 2.1 Server\"\n            AR[\"Client Registration&lt;br/&gt;/api/oauth/register\"]\n            AT[\"Token Endpoint&lt;br/&gt;/api/oauth/token\"]\n            AZ[\"Authorization&lt;br/&gt;/oauth/authorize\"]\n        end\n\n        subgraph \"MCP Server\"\n            MH[MCP Handler]\n            TL[Tool Library]\n            AU[Auth Middleware]\n        end\n\n        subgraph \"Analytics Engine\"\n            AC[Analytics Collector]\n            SM[Security Monitor]\n            RL[Request Logger]\n        end\n    end\n\n    subgraph \"Data Layer\"\n        PG[(PostgreSQL)]\n        RD[(Redis)]\n    end\n\n    subgraph \"External Services\"\n        GO[Google OAuth]\n        GEO[IP Geolocation]\n    end\n\n    MC --&gt; MH\n    WC --&gt; NA\n    API --&gt; AR\n\n    AR --&gt; PG\n    AT --&gt; PG\n    AZ --&gt; PG\n\n    MH --&gt; AU\n    AU --&gt; PG\n    MH --&gt; TL\n\n    NA --&gt; GA\n    GA --&gt; GO\n\n    AC --&gt; PG\n    SM --&gt; PG\n    RL --&gt; PG\n\n    MH --&gt; RD\n    AC --&gt; GEO</code></pre>"},{"location":"architecture/#core-design-principles","title":"Core Design Principles","text":"<ol> <li>Security-First Design: All components implement security by default with OAuth 2.1 and PKCE</li> <li>Scalable Architecture: Built on Next.js with edge-ready components and efficient database queries</li> <li>Comprehensive Monitoring: Full request lifecycle tracking with security event monitoring</li> <li>Standards Compliance: Adheres to OAuth 2.1 RFC and MCP protocol specifications</li> <li>Performance Optimization: Batched analytics, connection pooling, and efficient caching</li> </ol>"},{"location":"architecture/#oauth-21-implementation-details","title":"OAuth 2.1 Implementation Details","text":""},{"location":"architecture/#oauth-21-features-implemented","title":"OAuth 2.1 Features Implemented","text":"<p>The system implements OAuth 2.1 as defined in RFC 6749 with OAuth 2.1 Security Best Practices:</p>"},{"location":"architecture/#core-grant-types","title":"Core Grant Types","text":"<ul> <li>Authorization Code Grant with PKCE: Primary flow for MCP clients</li> <li>Refresh Token Grant: Token rotation for long-lived sessions</li> <li>Dynamic Client Registration: RFC 7591 compliant client registration</li> </ul>"},{"location":"architecture/#security-enhancements-oauth-21","title":"Security Enhancements (OAuth 2.1)","text":"<ul> <li>Mandatory PKCE: S256 code challenge method for public clients</li> <li>Refresh Token Rotation: Automatic rotation for public clients</li> <li>Token Audience Validation: Prevents cross-resource token misuse</li> <li>Short-lived Access Tokens: 5-minute expiry for enhanced security</li> </ul>"},{"location":"architecture/#oauth-flow-diagram","title":"OAuth Flow Diagram","text":"<pre><code>sequenceDiagram\n    participant C as MCP Client\n    participant AS as OAuth Server\n    participant RS as MCP Resource Server\n    participant U as User\n\n    Note over C,U: 1. Client Registration\n    C-&gt;&gt;AS: POST /api/oauth/register\n    AS-&gt;&gt;AS: Generate client_id &amp; client_secret\n    AS-&gt;&gt;C: Return credentials\n\n    Note over C,U: 2. Authorization Code Flow with PKCE\n    C-&gt;&gt;C: Generate code_verifier &amp; code_challenge\n    C-&gt;&gt;AS: GET /oauth/authorize?client_id=...&amp;code_challenge=...\n    AS-&gt;&gt;U: Redirect to login (NextAuth)\n    U-&gt;&gt;AS: Authenticate via Google OAuth\n    AS-&gt;&gt;U: Show consent screen\n    U-&gt;&gt;AS: Grant consent\n    AS-&gt;&gt;C: Redirect with authorization code\n\n    Note over C,U: 3. Token Exchange\n    C-&gt;&gt;AS: POST /api/oauth/token with code &amp; code_verifier\n    AS-&gt;&gt;AS: Verify PKCE challenge\n    AS-&gt;&gt;AS: Generate access &amp; refresh tokens\n    AS-&gt;&gt;C: Return tokens\n\n    Note over C,U: 4. Resource Access\n    C-&gt;&gt;RS: MCP request with Bearer token\n    RS-&gt;&gt;AS: Validate token (internal)\n    AS-&gt;&gt;RS: Token validation response\n    RS-&gt;&gt;C: MCP response\n\n    Note over C,U: 5. Token Refresh\n    C-&gt;&gt;AS: POST /api/oauth/token with refresh_token\n    AS-&gt;&gt;AS: Rotate refresh token (public clients)\n    AS-&gt;&gt;C: Return new tokens</code></pre>"},{"location":"architecture/#pkce-implementation","title":"PKCE Implementation","text":"<p>The system implements PKCE (Proof Key for Code Exchange) as specified in RFC 7636:</p> <pre><code>// PKCE validation in token endpoint\nif (authCode.codeChallenge) {\n  if (authCode.codeChallengeMethod === 'S256') {\n    const hash = createHash('sha256').update(code_verifier).digest();\n    const base64url = hash.toString('base64')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=+$/, '');\n    pkceValid = base64url === authCode.codeChallenge;\n  }\n}\n</code></pre>"},{"location":"architecture/#mcp-protocol-integration","title":"MCP Protocol Integration","text":""},{"location":"architecture/#mcp-server-architecture","title":"MCP Server Architecture","text":"<p>The MCP server is implemented using the <code>@vercel/mcp-adapter</code> and provides secure access to tools and resources through OAuth 2.1 authentication.</p>"},{"location":"architecture/#mcp-handler-components","title":"MCP Handler Components","text":"<pre><code>graph LR\n    subgraph \"MCP Handler\"\n        REQ[Request]\n        AUTH[Auth Middleware]\n        TOOLS[Tool Registry]\n        RESP[Response]\n    end\n\n    subgraph \"Tool Library\"\n        T1[add_numbers]\n        T2[calculate_circle_area]\n        T3[generate_random_number]\n        T4[format_text]\n        T5[check_prime_number]\n        T6[trigger_security_events]\n    end\n\n    REQ --&gt; AUTH\n    AUTH --&gt; TOOLS\n    TOOLS --&gt; T1\n    TOOLS --&gt; T2\n    TOOLS --&gt; T3\n    TOOLS --&gt; T4\n    TOOLS --&gt; T5\n    TOOLS --&gt; T6\n    TOOLS --&gt; RESP</code></pre>"},{"location":"architecture/#authentication-middleware","title":"Authentication Middleware","text":"<p>The MCP server implements comprehensive authentication middleware:</p> <pre><code>async function authenticateRequest(request: NextRequest) {\n  const authHeader = request.headers.get('authorization');\n  const token = authHeader?.split(' ')[1];\n\n  // Validate token against database\n  const accessToken = await prisma.accessToken.findUnique({\n    where: { token },\n    include: { client: true, user: true }\n  });\n\n  // Check expiration\n  if (accessToken.expiresAt &lt; new Date()) {\n    return null;\n  }\n\n  // Validate token audience (critical security requirement)\n  const currentResource = `${protocol}://${host}`;\n  if (accessToken.resource &amp;&amp; accessToken.resource !== currentResource) {\n    return null;\n  }\n\n  return accessToken;\n}\n</code></pre>"},{"location":"architecture/#tool-implementation","title":"Tool Implementation","text":"<p>Tools are implemented using Zod schema validation and provide structured responses:</p> <pre><code>server.tool(\n  \"add_numbers\",\n  \"Adds two numbers together and returns the sum\",\n  {\n    a: z.number().describe(\"First number to add\"),\n    b: z.number().describe(\"Second number to add\"),\n  },\n  async ({ a, b }) =&gt; {\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: `The sum of ${a} and ${b} is ${a + b}`,\n        },\n      ],\n    };\n  }\n);\n</code></pre>"},{"location":"architecture/#mcp-transport-support","title":"MCP Transport Support","text":"<p>The system supports multiple MCP transport mechanisms:</p> <ul> <li>SSE Transport: <code>/mcp/sse</code> - Server-Sent Events for real-time communication</li> <li>HTTP Transport: <code>/mcp/mcp</code> - Standard HTTP request/response</li> <li>WebSocket Transport: Future implementation planned</li> </ul>"},{"location":"architecture/#database-schema-and-models","title":"Database Schema and Models","text":""},{"location":"architecture/#schema-overview","title":"Schema Overview","text":"<p>The database schema is designed to support both OAuth 2.1 requirements and comprehensive analytics collection:</p> <pre><code>erDiagram\n    User {\n        string id PK\n        string name\n        string email UK\n        datetime emailVerified\n        string image\n    }\n\n    Account {\n        string id PK\n        string userId FK\n        string provider\n        string providerAccountId\n        string refresh_token\n        string access_token\n    }\n\n    Client {\n        string id PK\n        string clientId UK\n        string clientSecret\n        string name\n        string[] redirectUris\n        string userId FK\n        datetime createdAt\n        datetime updatedAt\n    }\n\n    AccessToken {\n        string id PK\n        string token UK\n        datetime expiresAt\n        string clientId FK\n        string userId FK\n        string resource\n        datetime createdAt\n    }\n\n    AuthCode {\n        string id PK\n        string code UK\n        datetime expiresAt\n        string clientId FK\n        string userId FK\n        string redirectUri\n        string codeChallenge\n        string codeChallengeMethod\n        string resource\n        datetime createdAt\n    }\n\n    RefreshToken {\n        string id PK\n        string token UK\n        datetime expiresAt\n        string clientId FK\n        string userId FK\n        string resource\n        datetime createdAt\n    }\n\n    AnalyticsRequest {\n        string id PK\n        datetime timestamp\n        string endpoint\n        string method\n        int statusCode\n        int responseTime\n        string clientId FK\n        string userId FK\n        string mcpServerId FK\n        string ipAddress\n        string userAgent\n        string mcpMethod\n        string toolName\n        string oauthGrantType\n        boolean usePKCE\n        datetime expiresAt\n    }\n\n    AnalyticsSecurity {\n        string id PK\n        datetime timestamp\n        SecurityEventType eventType\n        string severity\n        string userId FK\n        string clientId FK\n        string ipAddress\n        string userAgent\n        json details\n        int riskScore\n        boolean resolved\n        datetime expiresAt\n    }\n\n    MCPServer {\n        string id PK\n        string name\n        string identifier UK\n        string description\n        string version\n        datetime createdAt\n        datetime updatedAt\n    }\n\n    User ||--o{ Account : \"has\"\n    User ||--o{ Client : \"owns\"\n    User ||--o{ AccessToken : \"has\"\n    User ||--o{ AuthCode : \"has\"\n    User ||--o{ RefreshToken : \"has\"\n    User ||--o{ AnalyticsRequest : \"generates\"\n    User ||--o{ AnalyticsSecurity : \"triggers\"\n\n    Client ||--o{ AccessToken : \"issues\"\n    Client ||--o{ AuthCode : \"issues\"\n    Client ||--o{ RefreshToken : \"issues\"\n    Client ||--o{ AnalyticsRequest : \"generates\"\n    Client ||--o{ AnalyticsSecurity : \"triggers\"\n\n    MCPServer ||--o{ AnalyticsRequest : \"serves\"\n    MCPServer ||--o{ AnalyticsSecurity : \"monitors\"</code></pre>"},{"location":"architecture/#key-design-decisions","title":"Key Design Decisions","text":"<ol> <li>Separate Token Models: Distinct models for access tokens, refresh tokens, and auth codes for better security and performance</li> <li>PKCE Support: Built-in code challenge and method fields in AuthCode model</li> <li>Resource Audience: Token audience validation to prevent cross-resource attacks</li> <li>Analytics Integration: Comprehensive request and security event tracking</li> <li>TTL Management: Automatic expiration using PostgreSQL intervals</li> </ol>"},{"location":"architecture/#indexes-and-performance","title":"Indexes and Performance","text":"<p>Critical indexes for optimal performance:</p> <pre><code>-- Request analytics indexes\nCREATE INDEX idx_analytics_timestamp ON \"AnalyticsRequest\"(timestamp);\nCREATE INDEX idx_analytics_endpoint ON \"AnalyticsRequest\"(endpoint);\nCREATE INDEX idx_analytics_client_time ON \"AnalyticsRequest\"(timestamp, \"clientId\");\nCREATE INDEX idx_analytics_user_time ON \"AnalyticsRequest\"(timestamp, \"userId\");\n\n-- Security event indexes\nCREATE INDEX idx_security_timestamp ON \"AnalyticsSecurity\"(timestamp);\nCREATE INDEX idx_security_event_type ON \"AnalyticsSecurity\"(\"eventType\");\nCREATE INDEX idx_security_risk_score ON \"AnalyticsSecurity\"(\"riskScore\");\n\n-- OAuth token indexes\nCREATE UNIQUE INDEX idx_access_token ON \"AccessToken\"(token);\nCREATE INDEX idx_access_token_expiry ON \"AccessToken\"(\"expiresAt\");\nCREATE UNIQUE INDEX idx_refresh_token ON \"RefreshToken\"(token);\n</code></pre>"},{"location":"architecture/#api-endpoints-architecture","title":"API Endpoints Architecture","text":""},{"location":"architecture/#endpoint-categories","title":"Endpoint Categories","text":"<p>The API is organized into several logical categories:</p>"},{"location":"architecture/#oauth-21-endpoints","title":"OAuth 2.1 Endpoints","text":"Endpoint Method Purpose OAuth 2.1 Spec <code>/api/oauth/register</code> POST Dynamic client registration RFC 7591 <code>/api/oauth/token</code> POST Token exchange and refresh RFC 6749 <code>/oauth/authorize</code> GET Authorization endpoint RFC 6749"},{"location":"architecture/#mcp-server-endpoints","title":"MCP Server Endpoints","text":"Endpoint Method Purpose Transport <code>/mcp/sse</code> GET/POST MCP over Server-Sent Events SSE <code>/mcp/mcp</code> GET/POST MCP over HTTP HTTP"},{"location":"architecture/#analytics-endpoints","title":"Analytics Endpoints","text":"Endpoint Method Purpose Access <code>/api/analytics/collect</code> POST Request analytics collection Internal <code>/api/analytics/security</code> POST Security event logging Internal <code>/api/analytics</code> GET Analytics dashboard data Authenticated"},{"location":"architecture/#authentication-endpoints-nextauth","title":"Authentication Endpoints (NextAuth)","text":"Endpoint Method Purpose Provider <code>/api/auth/signin</code> GET/POST User authentication Google OAuth <code>/api/auth/callback</code> GET/POST OAuth callback Google OAuth <code>/api/auth/signout</code> POST User sign out NextAuth"},{"location":"architecture/#requestresponse-flow","title":"Request/Response Flow","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant MW as Middleware\n    participant EP as Endpoint\n    participant DB as Database\n    participant AN as Analytics\n\n    C-&gt;&gt;MW: HTTP Request\n    MW-&gt;&gt;MW: CORS handling\n    MW-&gt;&gt;MW: Rate limiting\n    MW-&gt;&gt;EP: Forward request\n    EP-&gt;&gt;DB: Database operations\n    DB-&gt;&gt;EP: Response data\n    EP-&gt;&gt;AN: Log request (async)\n    AN-&gt;&gt;DB: Store analytics\n    EP-&gt;&gt;MW: Response\n    MW-&gt;&gt;C: HTTP Response</code></pre>"},{"location":"architecture/#error-handling-strategy","title":"Error Handling Strategy","text":"<p>The system implements comprehensive error handling following OAuth 2.1 specifications:</p>"},{"location":"architecture/#oauth-error-responses","title":"OAuth Error Responses","text":"<pre><code>{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"Client authentication failed\",\n  \"error_uri\": \"https://example.com/errors#invalid_client\"\n}\n</code></pre>"},{"location":"architecture/#mcp-error-responses","title":"MCP Error Responses","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"request_id\",\n  \"error\": {\n    \"code\": -32600,\n    \"message\": \"Invalid Request\",\n    \"data\": { \"details\": \"Authentication required\" }\n  }\n}\n</code></pre>"},{"location":"architecture/#authentication-authorization-flow","title":"Authentication &amp; Authorization Flow","text":""},{"location":"architecture/#multi-layer-security-model","title":"Multi-Layer Security Model","text":"<p>The system implements a multi-layer security model combining user authentication, client authentication, and resource authorization:</p> <pre><code>graph TD\n    subgraph \"User Authentication Layer\"\n        UA[User Login]\n        GO[Google OAuth]\n        SE[Session Management]\n    end\n\n    subgraph \"Client Authentication Layer\"\n        CR[Client Registration]\n        CC[Client Credentials]\n        PKCE[PKCE Verification]\n    end\n\n    subgraph \"Resource Authorization Layer\"\n        TA[Token Validation]\n        AU[Audience Validation]\n        SC[Scope Checking]\n    end\n\n    subgraph \"Security Monitoring Layer\"\n        SM[Security Monitor]\n        AL[Audit Logging]\n        TH[Threat Detection]\n    end\n\n    UA --&gt; GO\n    GO --&gt; SE\n    SE --&gt; CR\n    CR --&gt; CC\n    CC --&gt; PKCE\n    PKCE --&gt; TA\n    TA --&gt; AU\n    AU --&gt; SC\n    SC --&gt; SM\n    SM --&gt; AL\n    AL --&gt; TH</code></pre>"},{"location":"architecture/#detailed-authorization-flow","title":"Detailed Authorization Flow","text":""},{"location":"architecture/#1-user-authentication-nextauthjs","title":"1. User Authentication (NextAuth.js)","text":"<pre><code>// NextAuth configuration\nexport const authConfig = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    Google({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n  ],\n  callbacks: {\n    // Session and JWT callbacks for enhanced security\n  },\n  trustHost: true,\n};\n</code></pre>"},{"location":"architecture/#2-client-authentication-oauth-21","title":"2. Client Authentication (OAuth 2.1)","text":"<pre><code>// Dynamic client registration\nconst newClient = await prisma.client.create({\n  data: {\n    name: client_name,\n    redirectUris: redirect_uris,\n    clientSecret: clientSecret, // Hashed in production\n    userId: null, // Allow unauthenticated clients\n  },\n});\n</code></pre>"},{"location":"architecture/#3-authorization-code-flow","title":"3. Authorization Code Flow","text":"<pre><code>// Authorization endpoint with PKCE\nconst authorizationCode = randomBytes(16).toString('hex');\nawait prisma.authCode.create({\n  data: {\n    code: authorizationCode,\n    expiresAt: new Date(Date.now() + 10 * 60 * 1000), // 10 minutes\n    clientId: client.id,\n    userId: session.user.id,\n    redirectUri: redirectUri,\n    codeChallenge: code_challenge,\n    codeChallengeMethod: code_challenge_method,\n    resource: resource,\n  },\n});\n</code></pre>"},{"location":"architecture/#4-token-exchange-and-validation","title":"4. Token Exchange and Validation","text":"<pre><code>// Token exchange with PKCE verification\nif (authCode.codeChallenge) {\n  if (authCode.codeChallengeMethod === 'S256') {\n    const hash = createHash('sha256').update(code_verifier).digest();\n    const base64url = hash.toString('base64')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=+$/, '');\n    pkceValid = base64url === authCode.codeChallenge;\n  }\n}\n</code></pre>"},{"location":"architecture/#security-context-propagation","title":"Security Context Propagation","text":"<p>The system maintains security context across all layers:</p> <ol> <li>User Context: User identity, roles, and permissions</li> <li>Client Context: Client identity, type (public/confidential), and allowed resources</li> <li>Request Context: IP address, user agent, geographic location</li> <li>Resource Context: Target resource, required scopes, and access policies</li> </ol>"},{"location":"architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/#defense-in-depth-strategy","title":"Defense in Depth Strategy","text":"<p>The system implements multiple layers of security controls:</p>"},{"location":"architecture/#1-transport-security","title":"1. Transport Security","text":"<ul> <li>HTTPS Everywhere: All communication encrypted in transit</li> <li>HSTS Headers: HTTP Strict Transport Security</li> <li>Certificate Pinning: For high-security deployments</li> </ul>"},{"location":"architecture/#2-authentication-security","title":"2. Authentication Security","text":"<ul> <li>Multi-Factor Authentication: Google OAuth with optional 2FA</li> <li>Session Management: Secure session handling with NextAuth.js</li> <li>Token Security: Short-lived access tokens with refresh rotation</li> </ul>"},{"location":"architecture/#3-authorization-security","title":"3. Authorization Security","text":"<ul> <li>PKCE Mandatory: Proof Key for Code Exchange for all flows</li> <li>Audience Validation: Prevents token misuse across resources</li> <li>Scope Enforcement: Granular permission control</li> </ul>"},{"location":"architecture/#4-application-security","title":"4. Application Security","text":"<ul> <li>Input Validation: Zod schema validation for all inputs</li> <li>SQL Injection Prevention: Parameterized queries with Prisma</li> <li>XSS Protection: Content Security Policy and input sanitization</li> </ul>"},{"location":"architecture/#5-infrastructure-security","title":"5. Infrastructure Security","text":"<ul> <li>Rate Limiting: Request throttling and abuse prevention</li> <li>CORS Configuration: Secure cross-origin resource sharing</li> <li>Security Headers: Comprehensive security header implementation</li> </ul>"},{"location":"architecture/#security-monitoring","title":"Security Monitoring","text":"<pre><code>graph LR\n    subgraph \"Security Events\"\n        AF[Auth Failures]\n        IT[Invalid Tokens]\n        SA[Suspicious Activity]\n        RL[Rate Limit Exceeded]\n        UA[Unauthorized Access]\n    end\n\n    subgraph \"Detection Engine\"\n        ER[Event Rules]\n        RS[Risk Scoring]\n        TH[Threat Hunting]\n    end\n\n    subgraph \"Response Actions\"\n        AL[Alert Generation]\n        BL[Blacklisting]\n        TR[Token Revocation]\n        IN[Incident Response]\n    end\n\n    AF --&gt; ER\n    IT --&gt; ER\n    SA --&gt; ER\n    RL --&gt; ER\n    UA --&gt; ER\n\n    ER --&gt; RS\n    RS --&gt; TH\n    TH --&gt; AL\n    TH --&gt; BL\n    TH --&gt; TR\n    TH --&gt; IN</code></pre>"},{"location":"architecture/#security-event-types","title":"Security Event Types","text":"<p>The system monitors and responds to various security events:</p> <pre><code>enum SecurityEventType {\n  AUTH_FAILURE = \"AUTH_FAILURE\",\n  INVALID_TOKEN = \"INVALID_TOKEN\", \n  SUSPICIOUS_ACTIVITY = \"SUSPICIOUS_ACTIVITY\",\n  RATE_LIMIT_EXCEEDED = \"RATE_LIMIT_EXCEEDED\",\n  UNAUTHORIZED_ACCESS = \"UNAUTHORIZED_ACCESS\",\n  TOKEN_REUSE = \"TOKEN_REUSE\",\n  UNUSUAL_LOCATION = \"UNUSUAL_LOCATION\",\n  PRIVILEGE_ESCALATION = \"PRIVILEGE_ESCALATION\",\n  MALFORMED_REQUEST = \"MALFORMED_REQUEST\",\n  BRUTE_FORCE_ATTEMPT = \"BRUTE_FORCE_ATTEMPT\"\n}\n</code></pre>"},{"location":"architecture/#risk-scoring-algorithm","title":"Risk Scoring Algorithm","text":"<p>Security events are scored based on multiple factors:</p> <ol> <li>Event Severity: Critical, High, Medium, Low</li> <li>User Risk Profile: Historical behavior, privilege level</li> <li>Client Risk Profile: Client type, registration age, usage patterns</li> <li>Context Risk: Geographic location, time of day, device fingerprint</li> <li>Behavioral Analysis: Deviation from normal patterns</li> </ol>"},{"location":"architecture/#analytics-system-design","title":"Analytics System Design","text":""},{"location":"architecture/#analytics-architecture","title":"Analytics Architecture","text":"<p>The analytics system is designed for high-performance data collection and real-time analysis:</p> <pre><code>graph TB\n    subgraph \"Data Collection Layer\"\n        RC[Request Collector]\n        SC[Security Collector]\n        BC[Batch Processor]\n    end\n\n    subgraph \"Data Processing Layer\"\n        AE[Analytics Engine]\n        GE[Geography Enricher]\n        RS[Risk Scorer]\n    end\n\n    subgraph \"Data Storage Layer\"\n        PG[(PostgreSQL)]\n        TS[(Time Series)]\n        CH[(ClickHouse)]\n    end\n\n    subgraph \"Analysis Layer\"\n        RT[Real-time Analytics]\n        BA[Batch Analytics]\n        ML[Machine Learning]\n    end\n\n    subgraph \"Presentation Layer\"\n        DB[Dashboard]\n        AL[Alerts]\n        RP[Reports]\n    end\n\n    RC --&gt; BC\n    SC --&gt; BC\n    BC --&gt; AE\n    AE --&gt; GE\n    AE --&gt; RS\n    GE --&gt; PG\n    RS --&gt; PG\n\n    PG --&gt; RT\n    PG --&gt; BA\n    BA --&gt; ML\n\n    RT --&gt; DB\n    RT --&gt; AL\n    BA --&gt; RP\n    ML --&gt; AL</code></pre>"},{"location":"architecture/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"architecture/#batched-data-collection","title":"Batched Data Collection","text":"<pre><code>class OptimizedAnalyticsCollector {\n  private requestBatch: RequestAnalytics[] = [];\n  private readonly BATCH_SIZE = 100;\n  private readonly FLUSH_INTERVAL = 15000; // 15 seconds\n\n  async logRequest(data: RequestAnalytics) {\n    this.requestBatch.push(data);\n\n    if (this.requestBatch.length &gt;= this.BATCH_SIZE) {\n      await this.flushRequests();\n    }\n  }\n\n  private async flushRequests() {\n    await prisma.$transaction(async (tx) =&gt; {\n      await tx.analyticsRequest.createMany({\n        data: this.requestBatch.map(req =&gt; ({...req})),\n        skipDuplicates: true\n      });\n    });\n  }\n}\n</code></pre>"},{"location":"architecture/#efficient-database-queries","title":"Efficient Database Queries","text":"<pre><code>-- Optimized performance metrics query\nSELECT \n  COUNT(*) as total_requests,\n  AVG(\"responseTime\") as avg_response_time,\n  PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY \"responseTime\") as p95_response_time,\n  CASE \n    WHEN COUNT(*) = 0 THEN 0\n    ELSE COUNT(CASE WHEN \"statusCode\" &gt;= 400 THEN 1 END) * 100.0 / COUNT(*)\n  END as error_rate\nFROM \"AnalyticsRequest\"\nWHERE timestamp &gt;= $1;\n</code></pre>"},{"location":"architecture/#key-metrics-tracked","title":"Key Metrics Tracked","text":""},{"location":"architecture/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Request Volume: Requests per second, hourly, daily</li> <li>Response Times: Average, P95, P99 response times</li> <li>Error Rates: 4xx and 5xx error percentages</li> <li>Throughput: Data transfer rates</li> </ul>"},{"location":"architecture/#security-metrics","title":"Security Metrics","text":"<ul> <li>Authentication Failures: Failed login attempts</li> <li>Token Abuse: Invalid or expired token usage</li> <li>Geographic Anomalies: Unusual access patterns</li> <li>Risk Scores: Calculated security risk levels</li> </ul>"},{"location":"architecture/#business-metrics","title":"Business Metrics","text":"<ul> <li>User Engagement: Active users, session duration</li> <li>API Usage: Tool usage patterns, popular endpoints</li> <li>Client Activity: OAuth client usage statistics</li> <li>Growth Metrics: User acquisition, retention rates</li> </ul>"},{"location":"architecture/#data-retention-and-cleanup","title":"Data Retention and Cleanup","text":"<pre><code>// Automatic data cleanup with TTL\nmodel AnalyticsRequest {\n  // TTL field - automatically set to 14 days from creation\n  expiresAt DateTime @default(dbgenerated(\"NOW() + INTERVAL '14 days'\"))\n\n  @@index([expiresAt])\n}\n\n// Cleanup job\nasync cleanupOldData(daysOld = 30) {\n  const cutoff = new Date(Date.now() - daysOld * 24 * 60 * 60 * 1000);\n\n  await prisma.analyticsRequest.deleteMany({\n    where: { timestamp: { lt: cutoff } }\n  });\n}\n</code></pre>"},{"location":"architecture/#technology-stack","title":"Technology Stack","text":""},{"location":"architecture/#core-technologies","title":"Core Technologies","text":""},{"location":"architecture/#frontend-technologies","title":"Frontend Technologies","text":"<ul> <li>Next.js 15: React framework with App Router</li> <li>TypeScript: Type-safe JavaScript development</li> <li>Tailwind CSS: Utility-first CSS framework</li> <li>Radix UI: Accessible component library</li> <li>Framer Motion: Animation library</li> </ul>"},{"location":"architecture/#backend-technologies","title":"Backend Technologies","text":"<ul> <li>Node.js: JavaScript runtime environment</li> <li>Next.js API Routes: Serverless API endpoints</li> <li>Prisma ORM: Type-safe database toolkit</li> <li>NextAuth.js: Authentication library</li> <li>Zod: Runtime type validation</li> </ul>"},{"location":"architecture/#database-technologies","title":"Database Technologies","text":"<ul> <li>PostgreSQL: Primary relational database</li> <li>Redis: Caching and session storage (optional)</li> <li>Prisma Client: Generated database client</li> </ul>"},{"location":"architecture/#security-technologies","title":"Security Technologies","text":"<ul> <li>OAuth 2.1: Authorization framework</li> <li>PKCE: Proof Key for Code Exchange</li> <li>Google OAuth: Identity provider</li> <li>JWT: JSON Web Tokens for sessions</li> </ul>"},{"location":"architecture/#mcp-technologies","title":"MCP Technologies","text":"<ul> <li>modelcontextprotocol/sdk: MCP protocol implementation</li> <li>vercel/mcp-adapter: MCP server adapter</li> <li>Server-Sent Events: Real-time communication</li> <li>WebSocket: Bidirectional communication (future)</li> </ul>"},{"location":"architecture/#architectural-patterns","title":"Architectural Patterns","text":""},{"location":"architecture/#design-patterns-used","title":"Design Patterns Used","text":"<ol> <li>Repository Pattern: Data access abstraction</li> <li>Factory Pattern: Client and token creation</li> <li>Observer Pattern: Analytics event handling</li> <li>Adapter Pattern: MCP protocol adaptation</li> <li>Middleware Pattern: Request/response processing</li> </ol>"},{"location":"architecture/#architectural-patterns_1","title":"Architectural Patterns","text":"<ol> <li>Layered Architecture: Clear separation of concerns</li> <li>Microservices: Modular service decomposition</li> <li>Event-Driven Architecture: Asynchronous event processing</li> <li>CQRS: Command Query Responsibility Segregation for analytics</li> <li>Saga Pattern: Distributed transaction management</li> </ol>"},{"location":"architecture/#development-tools","title":"Development Tools","text":""},{"location":"architecture/#code-quality","title":"Code Quality","text":"<ul> <li>ESLint: JavaScript/TypeScript linting</li> <li>Prettier: Code formatting</li> <li>TypeScript: Static type checking</li> <li>Husky: Git hooks for quality gates</li> </ul>"},{"location":"architecture/#testing-framework","title":"Testing Framework","text":"<ul> <li>Jest: Unit testing framework</li> <li>React Testing Library: Component testing</li> <li>Cypress: End-to-end testing</li> <li>Playwright: Cross-browser testing</li> </ul>"},{"location":"architecture/#devops-tools","title":"DevOps Tools","text":"<ul> <li>Docker: Containerization</li> <li>Vercel: Deployment platform</li> <li>GitHub Actions: CI/CD pipeline</li> <li>Prisma Migrate: Database migrations</li> </ul>"},{"location":"architecture/#file-structure-and-organization","title":"File Structure and Organization","text":""},{"location":"architecture/#project-structure","title":"Project Structure","text":"<pre><code>mcp-oauth-sample/\n\u251c\u2500\u2500 app/                          # Next.js App Router\n\u2502   \u251c\u2500\u2500 api/                      # API routes\n\u2502   \u2502   \u251c\u2500\u2500 auth/                 # NextAuth.js endpoints\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 [...nextauth]/    # Dynamic auth routes\n\u2502   \u2502   \u251c\u2500\u2500 oauth/                # OAuth 2.1 endpoints\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 register/         # Client registration\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 token/            # Token endpoint\n\u2502   \u2502   \u251c\u2500\u2500 analytics/            # Analytics endpoints\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 collect/          # Data collection\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 security/         # Security events\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 generate-threats/ # Test data generation\n\u2502   \u2502   \u2514\u2500\u2500 cleanup/              # Data cleanup jobs\n\u2502   \u251c\u2500\u2500 mcp/                      # MCP server implementation\n\u2502   \u2502   \u2514\u2500\u2500 [transport]/          # Dynamic transport routes\n\u2502   \u251c\u2500\u2500 oauth/                    # OAuth UI pages\n\u2502   \u2502   \u2514\u2500\u2500 authorize/            # Authorization consent\n\u2502   \u251c\u2500\u2500 analytics/                # Analytics dashboard\n\u2502   \u251c\u2500\u2500 auth.ts                   # NextAuth configuration\n\u2502   \u251c\u2500\u2500 prisma.ts                 # Prisma client setup\n\u2502   \u251c\u2500\u2500 layout.tsx                # Root layout component\n\u2502   \u2514\u2500\u2500 page.tsx                  # Home page\n\u251c\u2500\u2500 components/                   # Reusable React components\n\u2502   \u251c\u2500\u2500 analytics/                # Analytics components\n\u2502   \u2502   \u251c\u2500\u2500 dashboard-header.tsx  # Dashboard header\n\u2502   \u2502   \u251c\u2500\u2500 metric-card.tsx       # Metric display cards\n\u2502   \u2502   \u251c\u2500\u2500 oauth-overview.tsx    # OAuth metrics\n\u2502   \u2502   \u251c\u2500\u2500 security-panel.tsx    # Security dashboard\n\u2502   \u2502   \u2514\u2500\u2500 tool-usage-panel.tsx  # MCP tool usage\n\u2502   \u251c\u2500\u2500 ui/                       # Base UI components\n\u2502   \u2502   \u251c\u2500\u2500 button.tsx            # Button component\n\u2502   \u2502   \u251c\u2500\u2500 card.tsx              # Card component\n\u2502   \u2502   \u251c\u2500\u2500 chart.tsx             # Chart components\n\u2502   \u2502   \u2514\u2500\u2500 ...                   # Other UI components\n\u2502   \u251c\u2500\u2500 theme-provider.tsx        # Theme context\n\u2502   \u2514\u2500\u2500 theme-toggle.tsx          # Dark/light mode toggle\n\u251c\u2500\u2500 lib/                          # Utility libraries\n\u2502   \u251c\u2500\u2500 analytics-db.ts           # Analytics database layer\n\u2502   \u251c\u2500\u2500 security-monitor.ts       # Security monitoring\n\u2502   \u2514\u2500\u2500 utils.ts                  # General utilities\n\u251c\u2500\u2500 prisma/                       # Database schema and migrations\n\u2502   \u2514\u2500\u2500 schema.prisma             # Prisma schema definition\n\u251c\u2500\u2500 docs/                         # Documentation\n\u2502   \u251c\u2500\u2500 architecture.md           # This file\n\u2502   \u2514\u2500\u2500 setup.md                  # Setup instructions\n\u251c\u2500\u2500 middleware.ts                 # Next.js middleware\n\u251c\u2500\u2500 next.config.ts                # Next.js configuration\n\u251c\u2500\u2500 package.json                  # Dependencies and scripts\n\u251c\u2500\u2500 tailwind.config.js            # Tailwind CSS configuration\n\u251c\u2500\u2500 tsconfig.json                 # TypeScript configuration\n\u2514\u2500\u2500 README.md                     # Project overview\n</code></pre>"},{"location":"architecture/#code-organization-principles","title":"Code Organization Principles","text":""},{"location":"architecture/#separation-of-concerns","title":"Separation of Concerns","text":"<ul> <li>API Layer: Handle HTTP requests and responses</li> <li>Business Logic: Implement core authentication and authorization</li> <li>Data Layer: Manage database operations and caching</li> <li>Presentation Layer: Render UI components and manage state</li> </ul>"},{"location":"architecture/#module-boundaries","title":"Module Boundaries","text":"<ul> <li>Authentication Module: NextAuth.js integration and session management</li> <li>OAuth Module: OAuth 2.1 server implementation</li> <li>MCP Module: Model Context Protocol server and tools</li> <li>Analytics Module: Data collection and analysis</li> <li>Security Module: Threat detection and monitoring</li> </ul>"},{"location":"architecture/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Files: kebab-case for component files, camelCase for utilities</li> <li>Components: PascalCase for React components</li> <li>Functions: camelCase for function names</li> <li>Constants: UPPER_SNAKE_CASE for constants</li> <li>Types: PascalCase for TypeScript types and interfaces</li> </ul>"},{"location":"architecture/#key-files-explained","title":"Key Files Explained","text":""},{"location":"architecture/#core-configuration-files","title":"Core Configuration Files","text":"<p><code>app/auth.ts</code> - NextAuth.js configuration with Google OAuth provider and Prisma adapter</p> <p><code>app/prisma.ts</code> - Prisma client singleton with optimized connection handling</p> <p><code>prisma/schema.prisma</code> - Complete database schema with OAuth 2.1 and analytics models</p>"},{"location":"architecture/#api-implementation-files","title":"API Implementation Files","text":"<p><code>app/api/oauth/token/route.ts</code> - OAuth 2.1 token endpoint with PKCE support and refresh token rotation</p> <p><code>app/api/oauth/register/route.ts</code> - Dynamic client registration per RFC 7591</p> <p><code>app/mcp/[transport]/route.ts</code> - MCP server with authentication middleware and tool implementations</p>"},{"location":"architecture/#analytics-and-security-files","title":"Analytics and Security Files","text":"<p><code>lib/analytics-db.ts</code> - High-performance analytics collection with batching and optimized queries</p> <p><code>lib/security-monitor.ts</code> - Security event detection and threat analysis</p> <p><code>app/api/analytics/collect/route.ts</code> - Analytics data collection endpoint</p>"},{"location":"architecture/#ui-and-dashboard-files","title":"UI and Dashboard Files","text":"<p><code>app/analytics/page.tsx</code> - Main analytics dashboard with real-time metrics</p> <p><code>components/analytics/</code> - Specialized analytics components for different metric types</p> <p><code>app/oauth/authorize/page.tsx</code> - OAuth authorization consent screen</p>"},{"location":"architecture/#development-workflow","title":"Development Workflow","text":""},{"location":"architecture/#local-development-setup","title":"Local Development Setup","text":"<ol> <li>Environment Setup: Configure PostgreSQL, Redis, and environment variables</li> <li>Database Migration: Run Prisma migrations and generate client</li> <li>Development Server: Start Next.js development server</li> <li>Testing: Run unit tests and end-to-end tests</li> </ol>"},{"location":"architecture/#production-deployment","title":"Production Deployment","text":"<ol> <li>Build Process: Generate optimized production build</li> <li>Database Deployment: Apply migrations to production database</li> <li>Security Configuration: Configure security headers and SSL</li> <li>Monitoring Setup: Deploy analytics and monitoring infrastructure</li> </ol>"},{"location":"architecture/#conclusion","title":"Conclusion","text":"<p>This MCP OAuth 2.1 Server represents a comprehensive implementation of modern authentication and authorization patterns specifically designed for Model Context Protocol interactions. The architecture emphasizes security, performance, and observability while maintaining compliance with relevant standards and specifications.</p> <p>The system's modular design allows for easy extension and customization, while the comprehensive analytics and security monitoring provide the visibility needed for production deployment. The technology choices reflect current best practices in web development, security, and database design.</p> <p>For questions or contributions, please refer to the project documentation and follow the established development workflows.</p>"},{"location":"deployment/","title":"Deployment Guide","text":"<p>This comprehensive guide covers deploying the MCP OAuth Server to production environments with proper security, performance, and monitoring configurations.</p>"},{"location":"deployment/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Deployment Overview</li> <li>Vercel Deployment (Recommended)</li> <li>Docker Deployment</li> <li>Alternative Cloud Platforms</li> <li>Production Environment Variables</li> <li>Database Setup for Production</li> <li>Security Configuration</li> <li>Performance Optimization</li> <li>Monitoring and Logging</li> <li>CI/CD Pipeline Setup</li> <li>Scaling Considerations</li> <li>Post-Deployment Verification</li> <li>Production Troubleshooting</li> </ol>"},{"location":"deployment/#deployment-overview","title":"Deployment Overview","text":"<p>The MCP OAuth Server is a Next.js 15 application designed for high-performance OAuth 2.1 authentication with MCP protocol support. The recommended deployment architecture includes:</p> <ul> <li>Application: Next.js 15 with SSR/SSG capabilities</li> <li>Database: PostgreSQL 14+ with connection pooling</li> <li>Authentication: NextAuth.js with Google OAuth provider</li> <li>Analytics: Built-in dashboard with security monitoring</li> <li>MCP Protocol: Server-sent events (SSE) and HTTP transport support</li> </ul>"},{"location":"deployment/#architecture-components","title":"Architecture Components","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Load Balancer \u2502    \u2502   Next.js App   \u2502    \u2502   PostgreSQL    \u2502\n\u2502   (Cloudflare)  \u2502\u2500\u2500\u2500\u2500\u2502   (Vercel)      \u2502\u2500\u2500\u2500\u2500\u2502   (Supabase)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                       \u2502   Redis Cache   \u2502\n                       \u2502   (Optional)    \u2502\n                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"deployment/#vercel-deployment-recommended","title":"Vercel Deployment (Recommended)","text":"<p>Vercel provides the optimal hosting environment for Next.js applications with automatic scaling, edge functions, and global CDN.</p>"},{"location":"deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>Vercel account (vercel.com)</li> <li>GitHub/GitLab/Bitbucket repository</li> <li>Production PostgreSQL database</li> <li>Google OAuth credentials for production domain</li> </ul>"},{"location":"deployment/#step-by-step-vercel-deployment","title":"Step-by-Step Vercel Deployment","text":""},{"location":"deployment/#1-prepare-your-repository","title":"1. Prepare Your Repository","text":"<pre><code># Ensure your code is committed and pushed\ngit add .\ngit commit -m \"Prepare for production deployment\"\ngit push origin main\n</code></pre>"},{"location":"deployment/#2-connect-to-vercel","title":"2. Connect to Vercel","text":"<ol> <li>Visit vercel.com and sign in</li> <li>Click \"New Project\"</li> <li>Import your Git repository</li> <li>Select the correct branch (usually <code>main</code>)</li> </ol>"},{"location":"deployment/#3-configure-build-settings","title":"3. Configure Build Settings","text":"<p>Vercel auto-detects Next.js projects, but verify these settings:</p> <pre><code>{\n  \"buildCommand\": \"prisma generate --no-engine &amp;&amp; next build\",\n  \"outputDirectory\": \".next\",\n  \"installCommand\": \"pnpm install\",\n  \"devCommand\": \"pnpm dev\"\n}\n</code></pre>"},{"location":"deployment/#4-environment-variables-setup","title":"4. Environment Variables Setup","text":"<p>In your Vercel project dashboard, navigate to Settings &gt; Environment Variables and add:</p> <pre><code># Database\nDATABASE_URL=postgresql://user:password@host:port/database?sslmode=require\n\n# NextAuth\nAUTH_SECRET=your-production-auth-secret-32-chars\nNEXTAUTH_URL=https://your-domain.vercel.app\n\n# Google OAuth\nGOOGLE_CLIENT_ID=your-production-google-client-id\nGOOGLE_CLIENT_SECRET=your-production-google-client-secret\n\n# Optional: Redis\nREDIS_URL=redis://user:password@host:port\n\n# Environment\nNODE_ENV=production\n</code></pre>"},{"location":"deployment/#5-domain-configuration","title":"5. Domain Configuration","text":"<ol> <li>In Vercel dashboard, go to Settings &gt; Domains</li> <li>Add your custom domain (e.g., <code>auth.yourdomain.com</code>)</li> <li>Configure DNS records as instructed by Vercel</li> <li>SSL certificates are automatically provisioned</li> </ol>"},{"location":"deployment/#6-deploy","title":"6. Deploy","text":"<p>Click Deploy or push to your connected branch. Vercel will: - Install dependencies - Generate Prisma client - Build Next.js application - Deploy to global edge network</p>"},{"location":"deployment/#vercel-specific-optimizations","title":"Vercel-Specific Optimizations","text":""},{"location":"deployment/#edge-runtime-configuration","title":"Edge Runtime Configuration","text":"<p>For MCP endpoints, configure edge runtime in <code>app/mcp/[transport]/route.ts</code>:</p> <pre><code>export const runtime = 'edge';\nexport const preferredRegion = ['iad1', 'sfo1']; // Choose regions close to your users\n</code></pre>"},{"location":"deployment/#function-timeout-configuration","title":"Function Timeout Configuration","text":"<p>Create <code>vercel.json</code> in your project root:</p> <pre><code>{\n  \"functions\": {\n    \"app/api/**/*.js\": {\n      \"maxDuration\": 30\n    },\n    \"app/mcp/**/*.js\": {\n      \"maxDuration\": 60\n    }\n  },\n  \"regions\": [\"iad1\", \"sfo1\"],\n  \"crons\": [\n    {\n      \"path\": \"/api/cleanup\",\n      \"schedule\": \"0 0 * * *\"\n    }\n  ]\n}\n</code></pre>"},{"location":"deployment/#docker-deployment","title":"Docker Deployment","text":"<p>For self-hosted environments or when you need more control over the deployment.</p>"},{"location":"deployment/#dockerfile","title":"Dockerfile","text":"<p>Create <code>Dockerfile</code> in your project root:</p> <pre><code># Use official Node.js runtime\nFROM node:18-alpine AS base\n\n# Install dependencies only when needed\nFROM base AS deps\n# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.\nRUN apk add --no-cache libc6-compat\nWORKDIR /app\n\n# Install dependencies based on the preferred package manager\nCOPY package.json pnpm-lock.yaml* ./\nRUN corepack enable pnpm &amp;&amp; pnpm i --frozen-lockfile\n\n# Rebuild the source code only when needed\nFROM base AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\n\n# Generate Prisma client\nRUN npx prisma generate --no-engine\n\n# Build Next.js application\nENV NEXT_TELEMETRY_DISABLED 1\nRUN corepack enable pnpm &amp;&amp; pnpm build\n\n# Production image, copy all the files and run next\nFROM base AS runner\nWORKDIR /app\n\nENV NODE_ENV production\nENV NEXT_TELEMETRY_DISABLED 1\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nextjs\n\nCOPY --from=builder /app/public ./public\n\n# Set the correct permission for prerender cache\nRUN mkdir .next\nRUN chown nextjs:nodejs .next\n\n# Automatically leverage output traces to reduce image size\n# https://nextjs.org/docs/advanced-features/output-file-tracing\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static\nCOPY --from=builder --chown=nextjs:nodejs /app/generated ./generated\n\nUSER nextjs\n\nEXPOSE 3000\n\nENV PORT 3000\nENV HOSTNAME \"0.0.0.0\"\n\nCMD [\"node\", \"server.js\"]\n</code></pre>"},{"location":"deployment/#docker-compose","title":"Docker Compose","text":"<p>Create <code>docker-compose.yml</code> for local testing:</p> <pre><code>version: '3.8'\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - DATABASE_URL=postgresql://postgres:password@db:5432/mcp_oauth\n      - AUTH_SECRET=your-auth-secret-32-characters-long\n      - NEXTAUTH_URL=http://localhost:3000\n      - GOOGLE_CLIENT_ID=your-google-client-id\n      - GOOGLE_CLIENT_SECRET=your-google-client-secret\n      - NODE_ENV=production\n    depends_on:\n      - db\n    restart: unless-stopped\n\n  db:\n    image: postgres:14-alpine\n    environment:\n      - POSTGRES_DB=mcp_oauth\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql\n    ports:\n      - \"5432:5432\"\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"deployment/#production-docker-deployment","title":"Production Docker Deployment","text":""},{"location":"deployment/#build-and-push-to-registry","title":"Build and Push to Registry","text":"<pre><code># Build for production\ndocker build -t mcp-oauth-server:latest .\n\n# Tag for registry\ndocker tag mcp-oauth-server:latest your-registry/mcp-oauth-server:v1.0.0\n\n# Push to registry\ndocker push your-registry/mcp-oauth-server:v1.0.0\n</code></pre>"},{"location":"deployment/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<p>Create <code>k8s/deployment.yaml</code>:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mcp-oauth-server\n  labels:\n    app: mcp-oauth-server\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mcp-oauth-server\n  template:\n    metadata:\n      labels:\n        app: mcp-oauth-server\n    spec:\n      containers:\n      - name: mcp-oauth-server\n        image: your-registry/mcp-oauth-server:v1.0.0\n        ports:\n        - containerPort: 3000\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: app-secrets\n              key: database-url\n        - name: AUTH_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: app-secrets\n              key: auth-secret\n        - name: NEXTAUTH_URL\n          value: \"https://your-domain.com\"\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /api/ready\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mcp-oauth-service\nspec:\n  selector:\n    app: mcp-oauth-server\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 3000\n  type: LoadBalancer\n</code></pre>"},{"location":"deployment/#alternative-cloud-platforms","title":"Alternative Cloud Platforms","text":""},{"location":"deployment/#aws-deployment","title":"AWS Deployment","text":""},{"location":"deployment/#aws-app-runner-easiest","title":"AWS App Runner (Easiest)","text":"<ol> <li> <p>Prepare source code:    <pre><code># Create apprunner.yaml\nversion: 1.0\nruntime: nodejs16\nbuild:\n  commands:\n    build:\n      - npm install\n      - npx prisma generate --no-engine\n      - npm run build\nrun:\n  runtime-version: 16\n  command: npm start\n  network:\n    port: 3000\n    env: PORT\n</code></pre></p> </li> <li> <p>Deploy via AWS Console:</p> </li> <li>Go to AWS App Runner</li> <li>Create service from source code</li> <li>Connect GitHub repository</li> <li>Configure environment variables</li> </ol>"},{"location":"deployment/#aws-ecs-with-fargate","title":"AWS ECS with Fargate","text":"<pre><code># Build and push to ECR\naws ecr create-repository --repository-name mcp-oauth-server\naws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin &lt;account-id&gt;.dkr.ecr.us-east-1.amazonaws.com\ndocker build -t mcp-oauth-server .\ndocker tag mcp-oauth-server:latest &lt;account-id&gt;.dkr.ecr.us-east-1.amazonaws.com/mcp-oauth-server:latest\ndocker push &lt;account-id&gt;.dkr.ecr.us-east-1.amazonaws.com/mcp-oauth-server:latest\n</code></pre>"},{"location":"deployment/#railway-deployment","title":"Railway Deployment","text":"<ol> <li>Connect repository: Link your GitHub repository to Railway</li> <li>Environment variables: Set in Railway dashboard</li> <li>Database: Use Railway PostgreSQL addon</li> <li>Deploy: Automatic on git push</li> </ol> <p>Railway configuration (railway.json): <pre><code>{\n  \"$schema\": \"https://railway.app/railway.schema.json\",\n  \"build\": {\n    \"builder\": \"NIXPACKS\"\n  },\n  \"deploy\": {\n    \"startCommand\": \"npm start\",\n    \"healthcheckPath\": \"/api/health\"\n  }\n}\n</code></pre></p>"},{"location":"deployment/#digitalocean-app-platform","title":"DigitalOcean App Platform","text":"<ol> <li>Create app: Connect GitHub repository</li> <li>Configure build:     <pre><code>name: mcp-oauth-server\nservices:\n- name: web\n  source_dir: /\n  github:\n    repo: your-username/mcp-oauth-sample\n    branch: main\n  run_command: npm start\n  build_command: npm run build\n  environment_slug: node-js\n  instance_count: 1\n  instance_size_slug: basic-xxs\n  envs:\n  - key: NODE_ENV\n    value: production\n</code></pre></li> </ol>"},{"location":"deployment/#production-environment-variables","title":"Production Environment Variables","text":""},{"location":"deployment/#complete-environment-checklist","title":"Complete Environment Checklist","text":""},{"location":"deployment/#required-variables","title":"Required Variables","text":"<pre><code># Database Connection\nDATABASE_URL=\"postgresql://user:password@host:port/database?sslmode=require\"\n\n# NextAuth Configuration\nAUTH_SECRET=\"32-character-random-string\"\nNEXTAUTH_URL=\"https://your-production-domain.com\"\n\n# Google OAuth (Production)\nGOOGLE_CLIENT_ID=\"your-production-client-id\"\nGOOGLE_CLIENT_SECRET=\"your-production-client-secret\"\n\n# Environment\nNODE_ENV=\"production\"\n</code></pre>"},{"location":"deployment/#optional-variables","title":"Optional Variables","text":"<pre><code># Redis (for session store/caching)\nREDIS_URL=\"redis://user:password@host:port\"\n\n# Monitoring\nSENTRY_DSN=\"https://your-sentry-dsn\"\nLOGTAIL_TOKEN=\"your-logtail-token\"\n\n# Analytics\nGOOGLE_ANALYTICS_ID=\"GA-XXXXXXXXX\"\n\n# Rate Limiting\nUPSTASH_REDIS_REST_URL=\"https://your-upstash-url\"\nUPSTASH_REDIS_REST_TOKEN=\"your-upstash-token\"\n\n# Email (for notifications)\nSMTP_HOST=\"smtp.gmail.com\"\nSMTP_PORT=\"587\"\nSMTP_USER=\"your-email@gmail.com\"\nSMTP_PASS=\"your-app-password\"\n\n# Feature Flags\nENABLE_ANALYTICS=\"true\"\nENABLE_SECURITY_MONITORING=\"true\"\nMAX_OAUTH_CLIENTS_PER_USER=\"10\"\n</code></pre>"},{"location":"deployment/#security-environment-variables","title":"Security Environment Variables","text":"<pre><code># CORS Configuration\nALLOWED_ORIGINS=\"https://your-frontend.com,https://your-admin.com\"\n\n# Rate Limiting\nRATE_LIMIT_MAX=\"100\"\nRATE_LIMIT_WINDOW=\"900000\" # 15 minutes\n\n# Token Configuration\nACCESS_TOKEN_EXPIRY=\"3600\" # 1 hour\nREFRESH_TOKEN_EXPIRY=\"2592000\" # 30 days\n\n# Security Headers\nFORCE_HTTPS=\"true\"\nHSTS_MAX_AGE=\"31536000\"\n</code></pre>"},{"location":"deployment/#environment-variable-management","title":"Environment Variable Management","text":""},{"location":"deployment/#using-vercel-cli","title":"Using Vercel CLI","text":"<pre><code># Set environment variables\nvercel env add DATABASE_URL production\nvercel env add AUTH_SECRET production\n\n# Pull environment variables\nvercel env pull .env.production\n\n# List environment variables\nvercel env ls\n</code></pre>"},{"location":"deployment/#using-github-secrets-for-cicd","title":"Using GitHub Secrets (for CI/CD)","text":"<pre><code># Set repository secrets via GitHub CLI\ngh secret set DATABASE_URL --body \"postgresql://...\"\ngh secret set AUTH_SECRET --body \"your-secret\"\n</code></pre>"},{"location":"deployment/#database-setup-for-production","title":"Database Setup for Production","text":""},{"location":"deployment/#managed-database-providers","title":"Managed Database Providers","text":""},{"location":"deployment/#supabase-recommended-for-vercel","title":"Supabase (Recommended for Vercel)","text":"<pre><code># Connection string format\nDATABASE_URL=\"postgresql://postgres.project-ref:password@aws-0-region.pooler.supabase.com:5432/postgres?sslmode=require\"\n</code></pre> <p>Benefits: - Automatic backups - Connection pooling - Real-time subscriptions - Built-in auth (if needed) - Generous free tier</p>"},{"location":"deployment/#neon-database","title":"Neon Database","text":"<pre><code># Connection string format  \nDATABASE_URL=\"postgresql://user:password@ep-cool-darkness-123456.us-east-1.aws.neon.tech/neondb?sslmode=require\"\n</code></pre> <p>Benefits: - Serverless PostgreSQL - Automatic scaling - Branching (database branches) - Cold start optimization</p>"},{"location":"deployment/#aws-rds","title":"AWS RDS","text":"<pre><code># Connection string format\nDATABASE_URL=\"postgresql://username:password@your-instance.region.rds.amazonaws.com:5432/mcp_oauth?sslmode=require\"\n</code></pre> <p>Setup: <pre><code># Create parameter group with optimized settings\naws rds create-db-parameter-group \\\n    --db-parameter-group-name mcp-oauth-pg14 \\\n    --db-parameter-group-family postgres14 \\\n    --description \"Optimized settings for MCP OAuth\"\n\n# Create RDS instance\naws rds create-db-instance \\\n    --db-instance-identifier mcp-oauth-prod \\\n    --db-instance-class db.t3.micro \\\n    --engine postgres \\\n    --engine-version 14.9 \\\n    --master-username mcpuser \\\n    --master-user-password your-secure-password \\\n    --allocated-storage 20 \\\n    --storage-type gp2 \\\n    --vpc-security-group-ids sg-xxxxxxxx \\\n    --db-parameter-group-name mcp-oauth-pg14 \\\n    --backup-retention-period 7 \\\n    --storage-encrypted\n</code></pre></p>"},{"location":"deployment/#database-migration-strategy","title":"Database Migration Strategy","text":""},{"location":"deployment/#production-migration-process","title":"Production Migration Process","text":"<pre><code># 1. Generate migration\nnpx prisma migrate dev --name production-init --create-only\n\n# 2. Review generated SQL\ncat prisma/migrations/*/migration.sql\n\n# 3. Deploy to production\nnpx prisma migrate deploy\n\n# 4. Verify deployment\nnpx prisma migrate status\n</code></pre>"},{"location":"deployment/#zero-downtime-migration","title":"Zero-Downtime Migration","text":"<p>For critical updates:</p> <pre><code># 1. Create backward-compatible migration\nnpx prisma migrate dev --name add-new-column\n\n# 2. Deploy new code (still works with old schema)\n# 3. Run migration\nnpx prisma migrate deploy\n\n# 4. Deploy code that uses new column\n</code></pre>"},{"location":"deployment/#database-performance-optimization","title":"Database Performance Optimization","text":""},{"location":"deployment/#connection-pooling","title":"Connection Pooling","text":"<p>Add to your <code>DATABASE_URL</code>: <pre><code>DATABASE_URL=\"postgresql://user:pass@host:port/db?sslmode=require&amp;pgbouncer=true&amp;connection_limit=10\"\n</code></pre></p>"},{"location":"deployment/#prisma-configuration","title":"Prisma Configuration","text":"<p>Update <code>prisma/schema.prisma</code>: <pre><code>generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n  engineType = \"library\"\n  previewFeatures = [\"relationJoins\", \"omitApi\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\") // For migrations\n}\n</code></pre></p>"},{"location":"deployment/#database-monitoring","title":"Database Monitoring","text":"<pre><code>-- Monitor connection count\nSELECT count(*) as connections FROM pg_stat_activity;\n\n-- Check slow queries\nSELECT query, mean_exec_time, calls \nFROM pg_stat_statements \nWHERE mean_exec_time &gt; 1000 \nORDER BY mean_exec_time DESC;\n\n-- Monitor table sizes\nSELECT \n  schemaname,\n  tablename,\n  pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size\nFROM pg_tables \nORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;\n</code></pre>"},{"location":"deployment/#security-configuration","title":"Security Configuration","text":""},{"location":"deployment/#https-and-ssltls","title":"HTTPS and SSL/TLS","text":""},{"location":"deployment/#lets-encrypt-with-caddy","title":"Let's Encrypt with Caddy","text":"<p><code>Caddyfile</code>: <pre><code>your-domain.com {\n    reverse_proxy localhost:3000\n\n    # Security headers\n    header {\n        Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n        X-Content-Type-Options nosniff\n        X-Frame-Options DENY\n        X-XSS-Protection \"1; mode=block\"\n        Referrer-Policy \"strict-origin-when-cross-origin\"\n    }\n}\n</code></pre></p>"},{"location":"deployment/#nginx-configuration","title":"Nginx Configuration","text":"<pre><code>server {\n    listen 443 ssl http2;\n    server_name your-domain.com;\n\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/private.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!SHA1:!WEAK;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n</code></pre>"},{"location":"deployment/#environment-security","title":"Environment Security","text":""},{"location":"deployment/#secret-management","title":"Secret Management","text":"<p>Using AWS Secrets Manager: <pre><code>// lib/secrets.js\nimport { SecretsManagerClient, GetSecretValueCommand } from \"@aws-sdk/client-secrets-manager\";\n\nconst client = new SecretsManagerClient({ region: \"us-east-1\" });\n\nexport async function getSecret(secretName) {\n  try {\n    const response = await client.send(\n      new GetSecretValueCommand({ SecretId: secretName })\n    );\n    return JSON.parse(response.SecretString);\n  } catch (error) {\n    console.error(\"Error retrieving secret:\", error);\n    throw error;\n  }\n}\n</code></pre></p> <p>Using HashiCorp Vault: <pre><code>// lib/vault.js\nimport fetch from 'node-fetch';\n\nexport async function getVaultSecret(path) {\n  const response = await fetch(`${process.env.VAULT_ADDR}/v1/secret/data/${path}`, {\n    headers: {\n      'X-Vault-Token': process.env.VAULT_TOKEN\n    }\n  });\n\n  const data = await response.json();\n  return data.data.data;\n}\n</code></pre></p>"},{"location":"deployment/#security-headers-middleware","title":"Security Headers Middleware","text":"<p>Create <code>middleware.ts</code>: <pre><code>import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\nexport function middleware(request: NextRequest) {\n  // Create response\n  const response = NextResponse.next();\n\n  // Security headers\n  response.headers.set('X-DNS-Prefetch-Control', 'off');\n  response.headers.set('X-Frame-Options', 'DENY');\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('Referrer-Policy', 'origin-when-cross-origin');\n  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n\n  // HTTPS redirect\n  if (process.env.NODE_ENV === 'production' &amp;&amp; \n      request.headers.get('x-forwarded-proto') !== 'https') {\n    return NextResponse.redirect(`https://${request.headers.get('host')}${request.nextUrl.pathname}`);\n  }\n\n  return response;\n}\n\nexport const config = {\n  matcher: [\n    '/((?!api/health|_next/static|_next/image|favicon.ico).*)',\n  ],\n};\n</code></pre></p>"},{"location":"deployment/#rate-limiting","title":"Rate Limiting","text":""},{"location":"deployment/#redis-based-rate-limiting","title":"Redis-based Rate Limiting","text":"<pre><code>// lib/rate-limit.ts\nimport { Redis } from '@upstash/redis';\n\nconst redis = new Redis({\n  url: process.env.UPSTASH_REDIS_REST_URL!,\n  token: process.env.UPSTASH_REDIS_REST_TOKEN!,\n});\n\nexport async function rateLimit(identifier: string, limit = 100, window = 60000) {\n  const key = `rate_limit:${identifier}`;\n  const current = await redis.incr(key);\n\n  if (current === 1) {\n    await redis.expire(key, Math.ceil(window / 1000));\n  }\n\n  return {\n    success: current &lt;= limit,\n    remaining: Math.max(0, limit - current),\n    reset: Date.now() + window,\n  };\n}\n</code></pre>"},{"location":"deployment/#performance-optimization","title":"Performance Optimization","text":""},{"location":"deployment/#nextjs-optimization","title":"Next.js Optimization","text":""},{"location":"deployment/#output-configuration","title":"Output Configuration","text":"<p>Update <code>next.config.ts</code>: <pre><code>/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'standalone',\n  experimental: {\n    outputFileTracingRoot: path.join(__dirname, '../../'),\n  },\n  images: {\n    domains: ['lh3.googleusercontent.com'],\n    formats: ['image/webp', 'image/avif'],\n  },\n  compress: true,\n  poweredByHeader: false,\n  generateEtags: false,\n  httpAgentOptions: {\n    keepAlive: true,\n  },\n};\n\nexport default nextConfig;\n</code></pre></p>"},{"location":"deployment/#bundle-analysis","title":"Bundle Analysis","text":"<pre><code># Install analyzer\nnpm install --save-dev @next/bundle-analyzer\n\n# Configure in next.config.ts\nconst withBundleAnalyzer = require('@next/bundle-analyzer')({\n  enabled: process.env.ANALYZE === 'true',\n});\n\nmodule.exports = withBundleAnalyzer(nextConfig);\n\n# Run analysis\nANALYZE=true npm run build\n</code></pre>"},{"location":"deployment/#database-performance","title":"Database Performance","text":""},{"location":"deployment/#query-optimization","title":"Query Optimization","text":"<pre><code>// Optimized queries with Prisma\nexport async function getAnalytics(userId: string) {\n  return prisma.analyticsRequest.findMany({\n    where: { userId },\n    select: {\n      id: true,\n      timestamp: true,\n      endpoint: true,\n      statusCode: true,\n      responseTime: true,\n      // Only select needed fields\n    },\n    orderBy: { timestamp: 'desc' },\n    take: 100, // Limit results\n  });\n}\n</code></pre>"},{"location":"deployment/#database-indexing","title":"Database Indexing","text":"<p>Add to your Prisma schema: <pre><code>model AnalyticsRequest {\n  // ... existing fields\n\n  @@index([timestamp, userId])\n  @@index([endpoint, statusCode])\n  @@index([clientId, timestamp])\n}\n</code></pre></p>"},{"location":"deployment/#caching-strategy","title":"Caching Strategy","text":""},{"location":"deployment/#redis-caching","title":"Redis Caching","text":"<pre><code>// lib/cache.ts\nimport { Redis } from 'ioredis';\n\nconst redis = new Redis(process.env.REDIS_URL);\n\nexport async function getOrSetCache&lt;T&gt;(\n  key: string,\n  fetcher: () =&gt; Promise&lt;T&gt;,\n  ttl = 3600\n): Promise&lt;T&gt; {\n  const cached = await redis.get(key);\n\n  if (cached) {\n    return JSON.parse(cached);\n  }\n\n  const data = await fetcher();\n  await redis.setex(key, ttl, JSON.stringify(data));\n\n  return data;\n}\n</code></pre>"},{"location":"deployment/#edge-caching","title":"Edge Caching","text":"<pre><code>// For API routes\nexport async function GET(request: Request) {\n  const response = await fetch('external-api');\n  const data = await response.json();\n\n  return new Response(JSON.stringify(data), {\n    headers: {\n      'Cache-Control': 's-maxage=60, stale-while-revalidate',\n      'Content-Type': 'application/json',\n    },\n  });\n}\n</code></pre>"},{"location":"deployment/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"deployment/#application-monitoring","title":"Application Monitoring","text":""},{"location":"deployment/#sentry-integration","title":"Sentry Integration","text":"<pre><code>npm install @sentry/nextjs\n</code></pre> <p><code>sentry.client.config.ts</code>: <pre><code>import * as Sentry from \"@sentry/nextjs\";\n\nSentry.init({\n  dsn: process.env.SENTRY_DSN,\n  tracesSampleRate: 1.0,\n  environment: process.env.NODE_ENV,\n  integrations: [\n    new Sentry.BrowserTracing({\n      tracingOrigins: [process.env.NEXTAUTH_URL],\n    }),\n  ],\n});\n</code></pre></p>"},{"location":"deployment/#custom-analytics","title":"Custom Analytics","text":"<pre><code>// lib/analytics.ts\nexport async function trackEvent(event: {\n  name: string;\n  properties?: Record&lt;string, any&gt;;\n  userId?: string;\n}) {\n  if (process.env.NODE_ENV !== 'production') return;\n\n  // Custom analytics implementation\n  await fetch('/api/analytics/track', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(event),\n  });\n}\n</code></pre>"},{"location":"deployment/#health-checks","title":"Health Checks","text":"<p>Create <code>app/api/health/route.ts</code>: <pre><code>import { prisma } from '@/app/prisma';\n\nexport async function GET() {\n  try {\n    // Database health check\n    await prisma.$queryRaw`SELECT 1`;\n\n    // Additional health checks\n    const checks = {\n      database: 'healthy',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      memory: process.memoryUsage(),\n    };\n\n    return new Response(JSON.stringify(checks), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (error) {\n    return new Response(JSON.stringify({ \n      status: 'unhealthy', \n      error: error.message \n    }), {\n      status: 503,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n}\n</code></pre></p>"},{"location":"deployment/#logging-configuration","title":"Logging Configuration","text":""},{"location":"deployment/#structured-logging","title":"Structured Logging","text":"<pre><code>// lib/logger.ts\nimport winston from 'winston';\n\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'mcp-oauth-server' },\n  transports: [\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' }),\n  ],\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n\nexport default logger;\n</code></pre>"},{"location":"deployment/#cicd-pipeline-setup","title":"CI/CD Pipeline Setup","text":""},{"location":"deployment/#github-actions","title":"GitHub Actions","text":"<p>Create <code>.github/workflows/deploy.yml</code>:</p> <pre><code>name: Deploy to Production\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: postgres:14\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: test_db\n        options: &gt;-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '18'\n        cache: 'npm'\n\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Generate Prisma client\n      run: npx prisma generate\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n\n    - name: Run database migrations\n      run: npx prisma migrate deploy\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n\n    - name: Run tests\n      run: npm test\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n\n    - name: Run linting\n      run: npm run lint\n\n    - name: Build application\n      run: npm run build\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Deploy to Vercel\n      uses: amondnet/vercel-action@v25\n      with:\n        vercel-token: ${{ secrets.VERCEL_TOKEN }}\n        vercel-org-id: ${{ secrets.ORG_ID }}\n        vercel-project-id: ${{ secrets.PROJECT_ID }}\n        vercel-args: '--prod'\n</code></pre>"},{"location":"deployment/#environment-specific-deployments","title":"Environment-Specific Deployments","text":""},{"location":"deployment/#staging-environment","title":"Staging Environment","text":"<p>Create <code>.github/workflows/staging.yml</code>:</p> <pre><code>name: Deploy to Staging\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  deploy-staging:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Deploy to Vercel Staging\n      uses: amondnet/vercel-action@v25\n      with:\n        vercel-token: ${{ secrets.VERCEL_TOKEN }}\n        vercel-org-id: ${{ secrets.ORG_ID }}\n        vercel-project-id: ${{ secrets.PROJECT_ID }}\n        scope: ${{ secrets.TEAM_ID }}\n        alias-domains: |\n          staging-mcp-oauth.vercel.app\n</code></pre>"},{"location":"deployment/#database-migrations-in-cicd","title":"Database Migrations in CI/CD","text":"<pre><code>- name: Run migrations\n  run: |\n    npx prisma migrate deploy\n    npx prisma generate\n  env:\n    DATABASE_URL: ${{ secrets.DATABASE_URL }}\n</code></pre>"},{"location":"deployment/#scaling-considerations","title":"Scaling Considerations","text":""},{"location":"deployment/#horizontal-scaling","title":"Horizontal Scaling","text":""},{"location":"deployment/#load-balancing-configuration","title":"Load Balancing Configuration","text":"<pre><code># Nginx load balancer\nupstream mcp_oauth_backend {\n    least_conn;\n    server app1.example.com:3000 weight=3;\n    server app2.example.com:3000 weight=3;\n    server app3.example.com:3000 weight=2;\n}\n\nserver {\n    listen 80;\n    server_name your-domain.com;\n\n    location / {\n        proxy_pass http://mcp_oauth_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        # Session affinity for OAuth flows\n        ip_hash;\n    }\n}\n</code></pre>"},{"location":"deployment/#session-storage","title":"Session Storage","text":"<p>For multi-instance deployments, use Redis for session storage:</p> <pre><code>// lib/session-store.ts\nimport { Redis } from 'ioredis';\n\nconst redis = new Redis(process.env.REDIS_URL);\n\nexport class RedisSessionStore {\n  async get(sessionId: string) {\n    const session = await redis.get(`session:${sessionId}`);\n    return session ? JSON.parse(session) : null;\n  }\n\n  async set(sessionId: string, session: any, ttl = 3600) {\n    await redis.setex(`session:${sessionId}`, ttl, JSON.stringify(session));\n  }\n\n  async destroy(sessionId: string) {\n    await redis.del(`session:${sessionId}`);\n  }\n}\n</code></pre>"},{"location":"deployment/#database-scaling","title":"Database Scaling","text":""},{"location":"deployment/#read-replicas","title":"Read Replicas","text":"<pre><code>// lib/db.ts\nimport { PrismaClient } from '../generated/prisma';\n\nconst primaryDb = new PrismaClient({\n  datasources: {\n    db: {\n      url: process.env.DATABASE_URL,\n    },\n  },\n});\n\nconst readDb = new PrismaClient({\n  datasources: {\n    db: {\n      url: process.env.READ_REPLICA_URL || process.env.DATABASE_URL,\n    },\n  },\n});\n\nexport { primaryDb as writeDb, readDb };\n</code></pre>"},{"location":"deployment/#connection-pooling_1","title":"Connection Pooling","text":"<pre><code># Database URL with pooling\nDATABASE_URL=\"postgresql://user:pass@host:port/db?sslmode=require&amp;pgbouncer=true&amp;connection_limit=10&amp;pool_timeout=30\"\n</code></pre>"},{"location":"deployment/#cdn-configuration","title":"CDN Configuration","text":""},{"location":"deployment/#cloudflare-setup","title":"Cloudflare Setup","text":"<pre><code>// cloudflare-workers/edge-auth.js\nexport default {\n    async fetch(request, env) {\n        const url = new URL(request.url);\n\n        // Cache static assets\n        if (url.pathname.startsWith('/_next/static/')) {\n            return fetch(request, {\n                cf: {\n                    cacheTtl: 31536000, // 1 year\n                    cacheEverything: true,\n                }\n            });\n        }\n\n        // Cache API responses\n        if (url.pathname.startsWith('/api/') &amp;&amp; request.method === 'GET') {\n            return fetch(request, {\n                cf: {\n                    cacheTtl: 300, // 5 minutes\n                }\n            });\n        }\n\n        return fetch(request);\n    }\n};\n</code></pre>"},{"location":"deployment/#post-deployment-verification","title":"Post-Deployment Verification","text":""},{"location":"deployment/#automated-testing","title":"Automated Testing","text":"<p>Create <code>tests/production.test.js</code>: <pre><code>const { test, expect } = require('@playwright/test');\n\ntest.describe('Production Deployment', () =&gt; {\n  test('health check endpoint responds', async ({ request }) =&gt; {\n    const response = await request.get('/api/health');\n    expect(response.status()).toBe(200);\n\n    const data = await response.json();\n    expect(data.database).toBe('healthy');\n  });\n\n  test('OAuth flow works', async ({ page }) =&gt; {\n    await page.goto('/');\n    await page.click('text=Sign In');\n\n    // Should redirect to Google OAuth\n    await expect(page).toHaveURL(/accounts\\.google\\.com/);\n  });\n\n  test('MCP endpoints are accessible', async ({ request }) =&gt; {\n    const sseResponse = await request.get('/mcp/sse');\n    expect([200, 401]).toContain(sseResponse.status());\n\n    const httpResponse = await request.get('/mcp/mcp');\n    expect([200, 401]).toContain(httpResponse.status());\n  });\n});\n</code></pre></p>"},{"location":"deployment/#manual-verification-checklist","title":"Manual Verification Checklist","text":""},{"location":"deployment/#security-verification","title":"Security Verification","text":"<ul> <li> HTTPS certificate is valid and properly configured</li> <li> Security headers are present (check with securityheaders.com)</li> <li> Google OAuth redirect URIs match production domain</li> <li> Database connections use SSL/TLS</li> <li> Environment variables are properly secured</li> <li> Rate limiting is functional</li> <li> CORS policies are correctly configured</li> </ul>"},{"location":"deployment/#functionality-verification","title":"Functionality Verification","text":"<ul> <li> User registration and login flow works</li> <li> OAuth client creation and management works</li> <li> MCP endpoints respond correctly</li> <li> Analytics dashboard loads and shows data</li> <li> Database migrations completed successfully</li> <li> Prisma client generated correctly</li> <li> All API endpoints return expected responses</li> </ul>"},{"location":"deployment/#performance-verification","title":"Performance Verification","text":"<ul> <li> Page load times are acceptable (&lt; 3 seconds)</li> <li> Database queries are optimized</li> <li> Static assets are cached properly</li> <li> CDN is serving content correctly</li> <li> Memory usage is within acceptable limits</li> <li> CPU usage is optimized</li> </ul>"},{"location":"deployment/#monitoring-verification","title":"Monitoring Verification","text":"<ul> <li> Health check endpoint responds</li> <li> Error tracking is working (Sentry)</li> <li> Logs are being collected</li> <li> Metrics are being recorded</li> <li> Alerts are configured and working</li> <li> Backup processes are functioning</li> </ul>"},{"location":"deployment/#post-deployment-scripts","title":"Post-Deployment Scripts","text":"<p>Create <code>scripts/verify-deployment.sh</code>: <pre><code>#!/bin/bash\n\nDOMAIN=${1:-\"https://your-domain.com\"}\n\necho \"\ud83d\udd0d Verifying deployment at $DOMAIN\"\n\n# Health check\necho \"\ud83d\udcca Checking health endpoint...\"\ncurl -f \"$DOMAIN/api/health\" || exit 1\n\n# SSL check\necho \"\ud83d\udd12 Checking SSL certificate...\"\ncurl -I \"$DOMAIN\" | grep -i \"strict-transport-security\" || echo \"\u26a0\ufe0f  HSTS header missing\"\n\n# Performance check\necho \"\u26a1 Checking page load time...\"\ncurl -o /dev/null -s -w \"Time: %{time_total}s\\n\" \"$DOMAIN\"\n\n# OAuth endpoints\necho \"\ud83d\udd10 Checking OAuth endpoints...\"\ncurl -I \"$DOMAIN/.well-known/oauth-authorization-server\"\n\n# MCP endpoints\necho \"\ud83e\udd16 Checking MCP endpoints...\"\ncurl -I \"$DOMAIN/mcp/sse\"\ncurl -I \"$DOMAIN/mcp/mcp\"\n\necho \"\u2705 Deployment verification complete\"\n</code></pre></p>"},{"location":"deployment/#production-troubleshooting","title":"Production Troubleshooting","text":""},{"location":"deployment/#common-production-issues","title":"Common Production Issues","text":""},{"location":"deployment/#database-connection-issues","title":"Database Connection Issues","text":"<p>Symptoms:  - \"Connection refused\" errors - \"Too many connections\" errors - Slow query performance</p> <p>Solutions: <pre><code># Check connection pooling\npsql $DATABASE_URL -c \"SELECT count(*) FROM pg_stat_activity;\"\n\n# Verify SSL connection\npsql \"$DATABASE_URL?sslmode=require\" -c \"SELECT version();\"\n\n# Monitor connection usage\npsql $DATABASE_URL -c \"\nSELECT state, count(*) \nFROM pg_stat_activity \nGROUP BY state;\n\"\n</code></pre></p>"},{"location":"deployment/#memory-issues","title":"Memory Issues","text":"<p>Symptoms: - Out of memory errors - Process killed by OOM killer - Slow performance</p> <p>Solutions: <pre><code># Monitor memory usage\ndocker stats --no-stream\n\n# Check Node.js heap usage\nnode --inspect app.js\n# Then use Chrome DevTools\n\n# Optimize Prisma client\nDATABASE_URL=\"$DATABASE_URL?connection_limit=10&amp;pool_timeout=30\"\n</code></pre></p>"},{"location":"deployment/#performance-issues","title":"Performance Issues","text":"<p>Symptoms: - Slow API responses - High CPU usage - Database timeout errors</p> <p>Solutions: <pre><code>// Add query timeouts\nconst prisma = new PrismaClient({\n  datasources: {\n    db: {\n      url: process.env.DATABASE_URL,\n    },\n  },\n  queryTimeout: 30000, // 30 seconds\n});\n\n// Optimize queries\nconst users = await prisma.user.findMany({\n  select: { id: true, email: true }, // Only select needed fields\n  take: 100, // Limit results\n});\n</code></pre></p>"},{"location":"deployment/#error-monitoring-and-debugging","title":"Error Monitoring and Debugging","text":""},{"location":"deployment/#log-analysis","title":"Log Analysis","text":"<pre><code># Tail application logs\ntail -f /var/log/app/application.log\n\n# Search for errors\ngrep -i error /var/log/app/application.log | tail -n 50\n\n# Monitor response times\ngrep \"responseTime\" /var/log/app/application.log | awk '{print $NF}' | sort -n\n</code></pre>"},{"location":"deployment/#database-query-analysis","title":"Database Query Analysis","text":"<pre><code>-- Find slow queries\nSELECT query, mean_exec_time, calls, total_exec_time\nFROM pg_stat_statements \nWHERE mean_exec_time &gt; 1000 \nORDER BY mean_exec_time DESC \nLIMIT 10;\n\n-- Check table bloat\nSELECT \n  schemaname, tablename,\n  pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size,\n  pg_size_pretty(pg_relation_size(schemaname||'.'||tablename)) as table_size,\n  pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename) - pg_relation_size(schemaname||'.'||tablename)) as index_size\nFROM pg_tables \nORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC \nLIMIT 20;\n</code></pre>"},{"location":"deployment/#emergency-procedures","title":"Emergency Procedures","text":""},{"location":"deployment/#rollback-process","title":"Rollback Process","text":"<pre><code># Quick rollback with Vercel\nvercel --prod --rollback\n\n# Rollback database migration\nnpx prisma migrate resolve --rolled-back 20231201000000_migration_name\n</code></pre>"},{"location":"deployment/#scaling-under-load","title":"Scaling Under Load","text":"<pre><code># Increase container resources (Docker)\ndocker update --memory 1g --cpus 2 container_name\n\n# Scale horizontally (Kubernetes)\nkubectl scale deployment mcp-oauth-server --replicas=5\n\n# Enable read replicas\nexport READ_REPLICA_URL=\"postgresql://readonly-user:pass@replica-host:5432/db\"\n</code></pre>"},{"location":"deployment/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"deployment/#uptime-monitoring","title":"Uptime Monitoring","text":"<p>Set up external monitoring with services like: - Pingdom - UptimeRobot - StatusCake - DataDog Synthetics</p>"},{"location":"deployment/#custom-alerts","title":"Custom Alerts","text":"<pre><code>// lib/alerts.js\nexport async function sendAlert(alert) {\n  if (alert.severity === 'critical') {\n    // Send to PagerDuty, Slack, etc.\n    await fetch(process.env.WEBHOOK_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        text: `\ud83d\udea8 CRITICAL: ${alert.message}`,\n        channel: '#alerts'\n      })\n    });\n  }\n}\n</code></pre>"},{"location":"deployment/#summary","title":"Summary","text":"<p>This deployment guide provides comprehensive coverage of deploying the MCP OAuth Server to production environments. Key takeaways:</p> <ol> <li>Vercel is recommended for most deployments due to its Next.js optimization and automatic scaling</li> <li>Security is paramount - ensure HTTPS, proper environment variable management, and security headers</li> <li>Monitor everything - implement health checks, error tracking, and performance monitoring</li> <li>Plan for scale - use connection pooling, caching, and horizontal scaling strategies</li> <li>Test thoroughly - verify all functionality post-deployment with automated and manual tests</li> </ol> <p>For specific deployment questions or issues not covered in this guide, refer to the platform-specific documentation or open an issue in the project repository.</p>"},{"location":"development/","title":"Development Guide","text":"<p>This comprehensive guide covers development practices, workflows, and standards for the MCP OAuth Sample project. Follow these guidelines to maintain code quality, consistency, and efficient development processes.</p>"},{"location":"development/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Development Setup</li> <li>Project Structure</li> <li>Development Workflow</li> <li>Code Standards and Guidelines</li> <li>Database Development</li> <li>Testing Strategies</li> <li>Contributing Guidelines</li> <li>Git Workflow</li> <li>Code Review Process</li> <li>Development Tools</li> <li>Debugging and Profiling</li> <li>Building and Deployment Pipeline</li> </ol>"},{"location":"development/#development-setup","title":"Development Setup","text":""},{"location":"development/#quick-start","title":"Quick Start","text":"<pre><code># Clone the repository\ngit clone &lt;repository-url&gt;\ncd mcp-oauth-sample\n\n# Install dependencies\npnpm install\n\n# Set up environment variables\ncp .env.example .env.local\n# Edit .env.local with your configuration\n\n# Generate Prisma client\npnpm prisma generate\n\n# Set up database\npnpm prisma db push\n\n# Start development server\npnpm dev\n</code></pre>"},{"location":"development/#environment-configuration","title":"Environment Configuration","text":"<p>Create a comprehensive <code>.env.local</code> file with the following variables:</p> <pre><code># Database\nDATABASE_URL=\"postgresql://user:password@localhost:5432/mcp_oauth_dev\"\n\n# NextAuth Configuration\nAUTH_SECRET=\"your-secret-key-here\"\nNEXTAUTH_URL=\"http://localhost:3000\"\n\n# Google OAuth Provider\nGOOGLE_CLIENT_ID=\"your-google-client-id\"\nGOOGLE_CLIENT_SECRET=\"your-google-client-secret\"\n\n# Optional: Redis for SSE transport\nREDIS_URL=\"redis://localhost:6379\"\n\n# Development flags\nNODE_ENV=\"development\"\nNEXT_TELEMETRY_DISABLED=1\n</code></pre>"},{"location":"development/#development-dependencies","title":"Development Dependencies","text":"<p>The project uses the following key development dependencies:</p> <ul> <li>Next.js 15 - React framework with App Router</li> <li>TypeScript 5 - Type safety and enhanced developer experience</li> <li>Tailwind CSS 4 - Utility-first CSS framework</li> <li>Prisma 6 - Database ORM and migration tool</li> <li>ESLint 9 - Code linting and quality checks</li> <li>Radix UI - Headless component library</li> </ul>"},{"location":"development/#project-structure","title":"Project Structure","text":"<pre><code>mcp-oauth-sample/\n\u251c\u2500\u2500 app/                          # Next.js App Router directory\n\u2502   \u251c\u2500\u2500 api/                      # API route handlers\n\u2502   \u2502   \u251c\u2500\u2500 analytics/            # Analytics and monitoring endpoints\n\u2502   \u2502   \u251c\u2500\u2500 auth/                 # NextAuth.js authentication\n\u2502   \u2502   \u251c\u2500\u2500 oauth/                # OAuth 2.1 server endpoints\n\u2502   \u2502   \u2514\u2500\u2500 mcp/                  # MCP protocol handlers\n\u2502   \u251c\u2500\u2500 analytics/                # Analytics dashboard pages\n\u2502   \u251c\u2500\u2500 oauth/                    # OAuth authorization pages\n\u2502   \u251c\u2500\u2500 auth.ts                   # NextAuth configuration\n\u2502   \u251c\u2500\u2500 layout.tsx                # Root layout component\n\u2502   \u251c\u2500\u2500 page.tsx                  # Home page\n\u2502   \u2514\u2500\u2500 globals.css               # Global styles\n\u251c\u2500\u2500 components/                   # Reusable UI components\n\u2502   \u251c\u2500\u2500 analytics/                # Analytics-specific components\n\u2502   \u251c\u2500\u2500 ui/                       # Base UI components (shadcn/ui)\n\u2502   \u2514\u2500\u2500 theme-provider.tsx        # Theme management\n\u251c\u2500\u2500 lib/                          # Utility libraries\n\u2502   \u251c\u2500\u2500 analytics-db.ts           # Analytics database operations\n\u2502   \u251c\u2500\u2500 security-monitor.ts       # Security monitoring utilities\n\u2502   \u2514\u2500\u2500 utils.ts                  # General utilities\n\u251c\u2500\u2500 prisma/                       # Database schema and migrations\n\u2502   \u2514\u2500\u2500 schema.prisma             # Prisma schema definition\n\u251c\u2500\u2500 generated/                    # Generated Prisma client\n\u251c\u2500\u2500 docs/                         # Documentation\n\u251c\u2500\u2500 public/                       # Static assets\n\u251c\u2500\u2500 middleware.ts                 # Next.js middleware\n\u2514\u2500\u2500 configuration files           # Various config files\n</code></pre>"},{"location":"development/#key-architectural-patterns","title":"Key Architectural Patterns","text":""},{"location":"development/#1-app-router-structure","title":"1. App Router Structure","text":"<ul> <li>Pages are defined using <code>page.tsx</code> files</li> <li>Layouts use <code>layout.tsx</code> for nested routing</li> <li>API routes in <code>app/api/</code> directory</li> <li>Server and client components clearly separated</li> </ul>"},{"location":"development/#2-component-architecture","title":"2. Component Architecture","text":"<pre><code>// Server Component (default)\nexport default function ServerComponent() {\n  // Server-side rendering, database access\n}\n\n// Client Component\n\"use client\"\nexport default function ClientComponent() {\n  // Client-side interactivity, hooks\n}\n</code></pre>"},{"location":"development/#3-database-pattern","title":"3. Database Pattern","text":"<ul> <li>Custom Prisma client location: <code>generated/prisma/</code></li> <li>Centralized database utilities in <code>lib/</code></li> <li>Proper foreign key relationships and cascading deletes</li> </ul>"},{"location":"development/#development-workflow","title":"Development Workflow","text":""},{"location":"development/#1-feature-development-process","title":"1. Feature Development Process","text":"<pre><code># 1. Start from main branch\ngit checkout main\ngit pull origin main\n\n# 2. Create feature branch\ngit checkout -b feature/description-of-feature\n\n# 3. Develop with frequent commits\ngit add .\ngit commit -m \"feat: implement specific functionality\"\n\n# 4. Test thoroughly\npnpm lint\npnpm build\npnpm test  # when tests are available\n\n# 5. Push and create PR\ngit push origin feature/description-of-feature\n</code></pre>"},{"location":"development/#2-hot-reload-development","title":"2. Hot Reload Development","text":"<p>The development server supports hot reload for: - React components - Instant updates - API routes - Automatic restart - Tailwind CSS - Live style updates - TypeScript - Real-time type checking</p>"},{"location":"development/#3-database-development-workflow","title":"3. Database Development Workflow","text":"<pre><code># Modify schema.prisma\n# Then generate and apply changes\npnpm prisma generate\npnpm prisma db push        # For development\npnpm prisma migrate dev    # For production migrations\n</code></pre>"},{"location":"development/#code-standards-and-guidelines","title":"Code Standards and Guidelines","text":""},{"location":"development/#typescript-standards","title":"TypeScript Standards","text":""},{"location":"development/#1-strict-configuration","title":"1. Strict Configuration","text":"<pre><code>// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noEmit\": true,\n    \"skipLibCheck\": true\n  }\n}\n</code></pre>"},{"location":"development/#2-type-definitions","title":"2. Type Definitions","text":"<pre><code>// Define interfaces for all data structures\ninterface User {\n  id: string\n  name: string | null\n  email: string | null\n}\n\n// Use proper return types\nasync function fetchUser(id: string): Promise&lt;User | null&gt; {\n  // Implementation\n}\n\n// Use const assertions for literal types\nconst OAUTH_GRANT_TYPES = [\"authorization_code\", \"refresh_token\"] as const\ntype GrantType = typeof OAUTH_GRANT_TYPES[number]\n</code></pre>"},{"location":"development/#3-component-props","title":"3. Component Props","text":"<pre><code>interface ComponentProps {\n  title: string\n  optional?: boolean\n  children: React.ReactNode\n}\n\nexport default function Component({ title, optional = false, children }: ComponentProps) {\n  return &lt;div&gt;{children}&lt;/div&gt;\n}\n</code></pre>"},{"location":"development/#reactnextjs-standards","title":"React/Next.js Standards","text":""},{"location":"development/#1-server-vs-client-components","title":"1. Server vs Client Components","text":"<pre><code>// Server Component - Default, no \"use client\"\nexport default function ServerPage() {\n  // Can access database, environment variables\n  return &lt;div&gt;Server rendered content&lt;/div&gt;\n}\n\n// Client Component - Interactive\n\"use client\"\nexport default function ClientComponent() {\n  const [state, setState] = useState()\n  // Can use hooks, event handlers\n  return &lt;div&gt;Interactive content&lt;/div&gt;\n}\n</code></pre>"},{"location":"development/#2-api-route-patterns","title":"2. API Route Patterns","text":"<pre><code>// app/api/example/route.ts\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Implementation\n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('API Error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n</code></pre>"},{"location":"development/#3-component-organization","title":"3. Component Organization","text":"<pre><code>// Component file structure\nimport React from 'react'\n// External dependencies first\nimport { Button } from '@/components/ui/button'\n// Internal imports\nimport { cn } from '@/lib/utils'\n\n// Types/interfaces\ninterface Props {\n  // ...\n}\n\n// Main component\nexport default function Component({ prop }: Props) {\n  // Hooks at the top\n  const [state, setState] = useState()\n\n  // Event handlers\n  const handleClick = () =&gt; {\n    // Implementation\n  }\n\n  // Render\n  return (\n    &lt;div className={cn(\"base-classes\")}&gt;\n      {/* Content */}\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"development/#cssstyling-standards","title":"CSS/Styling Standards","text":""},{"location":"development/#1-tailwind-css-best-practices","title":"1. Tailwind CSS Best Practices","text":"<pre><code>// Use cn() utility for conditional classes\nconst buttonClasses = cn(\n  \"base-button-classes\",\n  variant === \"primary\" &amp;&amp; \"primary-variant-classes\",\n  disabled &amp;&amp; \"disabled-classes\"\n)\n\n// Group related classes\n&lt;div className={cn(\n  // Layout\n  \"flex items-center justify-between\",\n  // Spacing\n  \"p-4 m-2\",\n  // Styling\n  \"bg-background border rounded-lg\",\n  // State\n  \"hover:bg-muted transition-colors\"\n)}&gt;\n</code></pre>"},{"location":"development/#2-component-styling-patterns","title":"2. Component Styling Patterns","text":"<pre><code>// Create reusable style objects for complex components\nconst styles = {\n  container: \"flex-1 space-y-4 p-6\",\n  header: \"text-xl font-semibold text-foreground\",\n  content: \"text-muted-foreground leading-relaxed\"\n}\n</code></pre>"},{"location":"development/#database-standards","title":"Database Standards","text":""},{"location":"development/#1-prisma-schema-conventions","title":"1. Prisma Schema Conventions","text":"<pre><code>model User {\n  id            String    @id @default(cuid())\n  createdAt     DateTime  @default(now())\n  updatedAt     DateTime  @updatedAt\n\n  // Relations\n  accounts      Account[]\n  sessions      Session[]\n\n  @@index([email])\n}\n</code></pre>"},{"location":"development/#2-database-operations","title":"2. Database Operations","text":"<pre><code>// Use proper error handling\nasync function createUser(data: CreateUserData) {\n  try {\n    const user = await prisma.user.create({\n      data,\n      include: {\n        accounts: true\n      }\n    })\n    return { success: true, user }\n  } catch (error) {\n    console.error('Database error:', error)\n    return { success: false, error: 'Failed to create user' }\n  }\n}\n</code></pre>"},{"location":"development/#database-development","title":"Database Development","text":""},{"location":"development/#1-schema-management","title":"1. Schema Management","text":""},{"location":"development/#migration-strategy","title":"Migration Strategy","text":"<pre><code># Development: Use db push for rapid iteration\npnpm prisma db push\n\n# Production: Always use migrations\npnpm prisma migrate dev --name descriptive-name\npnpm prisma migrate deploy  # In production\n</code></pre>"},{"location":"development/#schema-best-practices","title":"Schema Best Practices","text":"<pre><code>generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n  engineType = \"library\"\n}\n\nmodel ExampleModel {\n  // Always include these standard fields\n  id        String   @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Business fields\n  name      String\n  email     String   @unique\n\n  // Relations with proper cascading\n  posts     Post[]   @relation(\"UserPosts\")\n\n  // Indexes for performance\n  @@index([email])\n  @@index([createdAt])\n}\n</code></pre>"},{"location":"development/#2-analytics-schema-patterns","title":"2. Analytics Schema Patterns","text":"<p>The project uses advanced analytics patterns:</p> <pre><code>model AnalyticsRequest {\n  // TTL pattern for automatic cleanup\n  expiresAt DateTime @default(dbgenerated(\"NOW() + INTERVAL '14 days'\"))\n\n  // Performance indexes\n  @@index([timestamp])\n  @@index([endpoint])\n  @@index([expiresAt])\n}\n</code></pre>"},{"location":"development/#3-database-utilities","title":"3. Database Utilities","text":"<pre><code>// lib/db.ts - Database connection utilities\nimport { PrismaClient } from '@/generated/prisma'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n</code></pre>"},{"location":"development/#testing-strategies","title":"Testing Strategies","text":""},{"location":"development/#1-testing-stack-planned","title":"1. Testing Stack (Planned)","text":"<pre><code># Install testing dependencies\npnpm add -D @testing-library/react @testing-library/jest-dom jest-environment-jsdom jest\n</code></pre>"},{"location":"development/#2-test-structure","title":"2. Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 __mocks__/           # Mock implementations\n\u251c\u2500\u2500 components/          # Component tests\n\u251c\u2500\u2500 api/                # API route tests\n\u251c\u2500\u2500 lib/                # Utility function tests\n\u2514\u2500\u2500 e2e/                # End-to-end tests\n</code></pre>"},{"location":"development/#3-testing-patterns","title":"3. Testing Patterns","text":""},{"location":"development/#component-testing","title":"Component Testing","text":"<pre><code>// components/__tests__/Button.test.tsx\nimport { render, screen } from '@testing-library/react'\nimport { Button } from '../Button'\n\ndescribe('Button', () =&gt; {\n  it('renders with correct text', () =&gt; {\n    render(&lt;Button&gt;Click me&lt;/Button&gt;)\n    expect(screen.getByText('Click me')).toBeInTheDocument()\n  })\n})\n</code></pre>"},{"location":"development/#api-testing","title":"API Testing","text":"<pre><code>// api/__tests__/oauth.test.ts\nimport { createMocks } from 'node-mocks-http'\nimport handler from '../oauth/token/route'\n\ndescribe('/api/oauth/token', () =&gt; {\n  it('returns access token for valid request', async () =&gt; {\n    // Test implementation\n  })\n})\n</code></pre>"},{"location":"development/#4-testing-commands","title":"4. Testing Commands","text":"<pre><code># Run all tests\npnpm test\n\n# Run tests in watch mode\npnpm test:watch\n\n# Run tests with coverage\npnpm test:coverage\n\n# Run E2E tests\npnpm test:e2e\n</code></pre>"},{"location":"development/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"development/#1-code-contribution-process","title":"1. Code Contribution Process","text":"<ol> <li> <p>Fork and Clone <pre><code>git clone &lt;your-fork-url&gt;\ncd mcp-oauth-sample\n</code></pre></p> </li> <li> <p>Setup Development Environment <pre><code>pnpm install\ncp .env.example .env.local\n# Configure environment variables\n</code></pre></p> </li> <li> <p>Create Feature Branch <pre><code>git checkout -b feat/your-feature-name\n</code></pre></p> </li> <li> <p>Follow Development Standards</p> </li> <li>Write TypeScript with proper types</li> <li>Follow component architecture patterns</li> <li>Add proper error handling</li> <li> <p>Update documentation if needed</p> </li> <li> <p>Test Your Changes <pre><code>pnpm lint\npnpm build\n# Run tests when available\n</code></pre></p> </li> </ol>"},{"location":"development/#2-pull-request-guidelines","title":"2. Pull Request Guidelines","text":""},{"location":"development/#pr-title-format","title":"PR Title Format","text":"<pre><code>type(scope): description\n\nExamples:\nfeat(oauth): add PKCE support for public clients\nfix(analytics): resolve memory leak in data collection\ndocs(api): update OAuth endpoint documentation\n</code></pre>"},{"location":"development/#pr-description-template","title":"PR Description Template","text":"<pre><code>## Summary\nBrief description of changes\n\n## Changes Made\n- List of specific changes\n- Include breaking changes if any\n\n## Testing\n- How was this tested?\n- What scenarios were covered?\n\n## Documentation\n- Were docs updated?\n- Are there new environment variables?\n\n## Screenshots (if applicable)\n</code></pre>"},{"location":"development/#3-commit-guidelines","title":"3. Commit Guidelines","text":"<pre><code># Use conventional commits\ngit commit -m \"feat(component): add new analytics dashboard\"\ngit commit -m \"fix(auth): resolve token expiration issue\"\ngit commit -m \"docs: update development setup guide\"\n</code></pre>"},{"location":"development/#git-workflow","title":"Git Workflow","text":""},{"location":"development/#1-branch-strategy","title":"1. Branch Strategy","text":"<pre><code>main                 # Production-ready code\n\u251c\u2500\u2500 feature/         # New features\n\u251c\u2500\u2500 fix/            # Bug fixes\n\u251c\u2500\u2500 docs/           # Documentation updates\n\u2514\u2500\u2500 chore/          # Maintenance tasks\n</code></pre>"},{"location":"development/#2-branch-naming-conventions","title":"2. Branch Naming Conventions","text":"<pre><code># Features\nfeature/oauth-pkce-support\nfeature/analytics-dashboard\nfeature/mcp-tool-integration\n\n# Bug fixes\nfix/token-refresh-error\nfix/middleware-memory-leak\n\n# Documentation\ndocs/api-reference\ndocs/deployment-guide\n\n# Chores\nchore/dependency-updates\nchore/code-cleanup\n</code></pre>"},{"location":"development/#3-git-hooks-recommended","title":"3. Git Hooks (Recommended)","text":"<pre><code># Install husky for git hooks\npnpm add -D husky lint-staged\n\n# Pre-commit hook\n#!/bin/sh\npnpm lint-staged\n\n# Pre-push hook\n#!/bin/sh\npnpm build\n</code></pre>"},{"location":"development/#code-review-process","title":"Code Review Process","text":""},{"location":"development/#1-review-checklist","title":"1. Review Checklist","text":""},{"location":"development/#code-quality","title":"Code Quality","text":"<ul> <li> TypeScript types are properly defined</li> <li> No console.log statements in production code</li> <li> Error handling is comprehensive</li> <li> Performance implications considered</li> </ul>"},{"location":"development/#architecture","title":"Architecture","text":"<ul> <li> Components follow established patterns</li> <li> Database queries are optimized</li> <li> API responses are consistent</li> <li> Security best practices followed</li> </ul>"},{"location":"development/#testing","title":"Testing","text":"<ul> <li> New features have tests</li> <li> Edge cases are covered</li> <li> Error scenarios are tested</li> <li> Performance impact assessed</li> </ul>"},{"location":"development/#documentation","title":"Documentation","text":"<ul> <li> Code is self-documenting</li> <li> Complex logic has comments</li> <li> API changes are documented</li> <li> README updated if needed</li> </ul>"},{"location":"development/#2-review-process","title":"2. Review Process","text":"<ol> <li>Automated Checks</li> <li>Linting passes</li> <li>Build succeeds</li> <li> <p>Tests pass (when available)</p> </li> <li> <p>Manual Review</p> </li> <li>Code logic review</li> <li>Architecture assessment</li> <li>Security consideration</li> <li> <p>User experience impact</p> </li> <li> <p>Approval Process</p> </li> <li>At least one approving review</li> <li>All conversations resolved</li> <li>CI/CD checks pass</li> </ol>"},{"location":"development/#development-tools","title":"Development Tools","text":""},{"location":"development/#1-required-tools","title":"1. Required Tools","text":"<pre><code># Core development environment\nnode --version    # v18+\npnpm --version    # Latest\npsql --version    # v12+\n</code></pre>"},{"location":"development/#2-recommended-vs-code-extensions","title":"2. Recommended VS Code Extensions","text":"<pre><code>{\n  \"recommendations\": [\n    \"bradlc.vscode-tailwindcss\",\n    \"ms-vscode.vscode-typescript-next\",\n    \"esbenp.prettier-vscode\",\n    \"ms-vscode.vscode-eslint\",\n    \"prisma.prisma\",\n    \"ms-vscode.vscode-json\"\n  ]\n}\n</code></pre>"},{"location":"development/#3-development-scripts","title":"3. Development Scripts","text":"<pre><code>{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"prisma generate --no-engine &amp;&amp; next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"lint:fix\": \"next lint --fix\",\n    \"type-check\": \"tsc --noEmit\",\n    \"prisma:generate\": \"prisma generate\",\n    \"prisma:push\": \"prisma db push\",\n    \"prisma:migrate\": \"prisma migrate dev\",\n    \"prisma:studio\": \"prisma studio\"\n  }\n}\n</code></pre>"},{"location":"development/#4-useful-development-commands","title":"4. Useful Development Commands","text":"<pre><code># Database management\npnpm prisma studio              # Database GUI\npnpm prisma migrate reset       # Reset database\npnpm prisma db seed            # Seed database (if configured)\n\n# Code quality\npnpm lint                      # Check for linting errors\npnpm lint:fix                  # Fix auto-fixable linting errors\npnpm type-check               # TypeScript type checking\n\n# Build and deployment\npnpm build                     # Production build\npnpm start                     # Start production server\n</code></pre>"},{"location":"development/#debugging-and-profiling","title":"Debugging and Profiling","text":""},{"location":"development/#1-nextjs-debugging","title":"1. Next.js Debugging","text":""},{"location":"development/#development-debugging","title":"Development Debugging","text":"<pre><code>// Enable debug mode\nexport default function Component() {\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Debug info:', data)\n  }\n}\n</code></pre>"},{"location":"development/#api-route-debugging","title":"API Route Debugging","text":"<pre><code>export async function GET(request: NextRequest) {\n  console.log('Request URL:', request.url)\n  console.log('Headers:', Object.fromEntries(request.headers))\n\n  try {\n    // API logic\n  } catch (error) {\n    console.error('API Error:', error)\n    // Proper error response\n  }\n}\n</code></pre>"},{"location":"development/#2-database-query-debugging","title":"2. Database Query Debugging","text":"<pre><code>// Enable Prisma query logging\nconst prisma = new PrismaClient({\n  log: ['query', 'info', 'warn', 'error'],\n})\n\n// Query debugging\nconst result = await prisma.user.findMany({\n  where: { active: true },\n  include: { posts: true }\n})\nconsole.log('Query result:', result)\n</code></pre>"},{"location":"development/#3-performance-profiling","title":"3. Performance Profiling","text":""},{"location":"development/#react-developer-tools","title":"React Developer Tools","text":"<ul> <li>Install React Developer Tools browser extension</li> <li>Use Profiler tab to identify performance bottlenecks</li> <li>Analyze component render times</li> </ul>"},{"location":"development/#nextjs-built-in-analytics","title":"Next.js Built-in Analytics","text":"<pre><code>// Enable experimental features\n// next.config.ts\nconst nextConfig = {\n  experimental: {\n    instrumentationHook: true,\n  }\n}\n</code></pre>"},{"location":"development/#custom-performance-monitoring","title":"Custom Performance Monitoring","text":"<pre><code>// Performance monitoring middleware\nexport async function middleware(request: NextRequest) {\n  const start = Date.now()\n  const response = NextResponse.next()\n  const duration = Date.now() - start\n\n  console.log(`${request.method} ${request.url}: ${duration}ms`)\n  return response\n}\n</code></pre>"},{"location":"development/#4-common-debugging-scenarios","title":"4. Common Debugging Scenarios","text":""},{"location":"development/#authentication-issues","title":"Authentication Issues","text":"<pre><code>// Debug NextAuth sessions\nimport { getServerSession } from \"next-auth/next\"\nimport { authOptions } from \"@/app/auth\"\n\nexport default async function handler() {\n  const session = await getServerSession(authOptions)\n  console.log('Current session:', session)\n}\n</code></pre>"},{"location":"development/#database-connection-issues","title":"Database Connection Issues","text":"<pre><code># Check database connection\npnpm prisma db push --preview-feature\npnpm prisma studio\n\n# View connection details\necho $DATABASE_URL\n</code></pre>"},{"location":"development/#build-issues","title":"Build Issues","text":"<pre><code># Clear Next.js cache\nrm -rf .next\n\n# Clear node_modules\nrm -rf node_modules pnpm-lock.yaml\npnpm install\n\n# Check TypeScript errors\npnpm type-check\n</code></pre>"},{"location":"development/#building-and-deployment-pipeline","title":"Building and Deployment Pipeline","text":""},{"location":"development/#1-build-process","title":"1. Build Process","text":"<pre><code># Production build steps\n1. pnpm install --frozen-lockfile\n2. pnpm prisma generate --no-engine\n3. pnpm build\n4. pnpm start\n</code></pre>"},{"location":"development/#2-build-optimization","title":"2. Build Optimization","text":""},{"location":"development/#nextjs-configuration","title":"Next.js Configuration","text":"<pre><code>// next.config.ts\nconst nextConfig = {\n  // Enable compression\n  compress: true,\n\n  // Optimize images\n  images: {\n    domains: ['example.com'],\n    formats: ['image/webp', 'image/avif'],\n  },\n\n  // Bundle analysis\n  experimental: {\n    bundlePagesExternals: true,\n  }\n}\n</code></pre>"},{"location":"development/#prisma-optimization","title":"Prisma Optimization","text":"<pre><code>generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n  engineType = \"library\"  // Smaller bundle size\n}\n</code></pre>"},{"location":"development/#3-environment-specific-builds","title":"3. Environment-Specific Builds","text":""},{"location":"development/#development","title":"Development","text":"<pre><code>NODE_ENV=development pnpm dev\n</code></pre>"},{"location":"development/#staging","title":"Staging","text":"<pre><code>NODE_ENV=production\nDATABASE_URL=$STAGING_DATABASE_URL\npnpm build &amp;&amp; pnpm start\n</code></pre>"},{"location":"development/#production","title":"Production","text":"<pre><code>NODE_ENV=production\nDATABASE_URL=$PRODUCTION_DATABASE_URL\npnpm build &amp;&amp; pnpm start\n</code></pre>"},{"location":"development/#4-cicd-pipeline","title":"4. CI/CD Pipeline","text":""},{"location":"development/#github-actions-example","title":"GitHub Actions Example","text":"<pre><code>name: CI/CD Pipeline\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  lint-and-type-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: pnpm/action-setup@v2\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n          cache: 'pnpm'\n\n      - run: pnpm install --frozen-lockfile\n      - run: pnpm lint\n      - run: pnpm type-check\n\n  build:\n    runs-on: ubuntu-latest\n    needs: lint-and-type-check\n    steps:\n      - uses: actions/checkout@v3\n      - uses: pnpm/action-setup@v2\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n          cache: 'pnpm'\n\n      - run: pnpm install --frozen-lockfile\n      - run: pnpm build\n</code></pre>"},{"location":"development/#5-deployment-checklist","title":"5. Deployment Checklist","text":""},{"location":"development/#pre-deployment","title":"Pre-deployment","text":"<ul> <li> All tests pass</li> <li> Build succeeds without warnings</li> <li> Environment variables configured</li> <li> Database migrations ready</li> <li> Performance benchmarks met</li> </ul>"},{"location":"development/#deployment-steps","title":"Deployment Steps","text":"<ol> <li> <p>Database Migration <pre><code>pnpm prisma migrate deploy\n</code></pre></p> </li> <li> <p>Build Application <pre><code>pnpm build\n</code></pre></p> </li> <li> <p>Health Check <pre><code>curl https://your-domain.com/api/health\n</code></pre></p> </li> <li> <p>Monitor Deployment</p> </li> <li>Check application logs</li> <li>Verify database connections</li> <li>Test critical user flows</li> </ol>"},{"location":"development/#post-deployment","title":"Post-deployment","text":"<ul> <li> Application accessible</li> <li> Authentication working</li> <li> Database operations functional</li> <li> Analytics collecting data</li> <li> Error monitoring active</li> </ul>"},{"location":"development/#6-monitoring-and-observability","title":"6. Monitoring and Observability","text":""},{"location":"development/#application-monitoring","title":"Application Monitoring","text":"<pre><code>// Add performance monitoring\nexport async function GET() {\n  const start = performance.now()\n\n  try {\n    // API logic\n    const result = await someOperation()\n    return NextResponse.json(result)\n  } finally {\n    const duration = performance.now() - start\n    console.log(`Operation took ${duration}ms`)\n  }\n}\n</code></pre>"},{"location":"development/#error-tracking","title":"Error Tracking","text":"<pre><code>// Global error handling\nexport async function GET() {\n  try {\n    // API logic\n  } catch (error) {\n    console.error('Unhandled error:', error)\n    // Send to error tracking service\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n</code></pre>"},{"location":"development/#development-best-practices-summary","title":"Development Best Practices Summary","text":""},{"location":"development/#1-code-quality","title":"1. Code Quality","text":"<ul> <li>Use TypeScript strictly</li> <li>Follow established patterns</li> <li>Write self-documenting code</li> <li>Handle errors gracefully</li> </ul>"},{"location":"development/#2-performance","title":"2. Performance","text":"<ul> <li>Optimize database queries</li> <li>Use proper caching strategies</li> <li>Monitor bundle sizes</li> <li>Profile critical paths</li> </ul>"},{"location":"development/#3-security","title":"3. Security","text":"<ul> <li>Validate all inputs</li> <li>Use proper authentication</li> <li>Follow OWASP guidelines</li> <li>Monitor for vulnerabilities</li> </ul>"},{"location":"development/#4-maintainability","title":"4. Maintainability","text":"<ul> <li>Keep components focused</li> <li>Extract reusable utilities</li> <li>Document complex logic</li> <li>Maintain test coverage</li> </ul>"},{"location":"development/#5-collaboration","title":"5. Collaboration","text":"<ul> <li>Use consistent naming</li> <li>Follow git conventions</li> <li>Review code thoroughly</li> <li>Communicate changes clearly</li> </ul> <p>This development guide is a living document that should be updated as the project evolves. For questions or suggestions, please open an issue or submit a pull request.</p>"},{"location":"security/","title":"MCP OAuth 2.1 Security Documentation","text":""},{"location":"security/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Security Overview and Philosophy</li> <li>OAuth 2.1 Security Implementation</li> <li>MCP-Specific Security Measures</li> <li>Threat Detection System</li> <li>Security Monitoring &amp; Analytics</li> <li>Token Security and Management</li> <li>Database Security</li> <li>API Security</li> <li>Security Configuration Guide</li> <li>Incident Response</li> <li>Compliance and Standards</li> </ol>"},{"location":"security/#security-overview-and-philosophy","title":"Security Overview and Philosophy","text":""},{"location":"security/#core-security-principles","title":"Core Security Principles","text":"<p>This MCP OAuth 2.1 server implementation follows a defense-in-depth security model with the following core principles:</p> <ul> <li>Zero Trust Architecture: All requests are authenticated and authorized regardless of source</li> <li>OAuth 2.1 Compliance: Full implementation of OAuth 2.1 security features including mandatory PKCE</li> <li>Real-time Threat Detection: Advanced security monitoring with behavioral analytics</li> <li>Token Audience Validation: Strict enforcement of token scope and audience restrictions</li> <li>Comprehensive Audit Logging: Full traceability of all security events and user actions</li> </ul>"},{"location":"security/#security-architecture","title":"Security Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Security Layers                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1. Transport Security (HTTPS/TLS)                          \u2502\n\u2502 2. Authentication Layer (NextAuth + OAuth 2.1)             \u2502\n\u2502 3. Authorization Layer (Token Validation + Audience)       \u2502\n\u2502 4. MCP Protocol Security (Bearer Token + Resource)         \u2502\n\u2502 5. Database Security (Encrypted Storage + Access Control)  \u2502\n\u2502 6. Monitoring Layer (Real-time Threat Detection)           \u2502\n\u2502 7. Analytics Layer (Security Event Logging + SIEM)        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"security/#oauth-21-security-implementation","title":"OAuth 2.1 Security Implementation","text":""},{"location":"security/#core-oauth-21-features","title":"Core OAuth 2.1 Features","text":""},{"location":"security/#1-mandatory-pkce-proof-key-for-code-exchange","title":"1. Mandatory PKCE (Proof Key for Code Exchange)","text":"<p>Implementation: All authorization code flows require PKCE, eliminating code interception attacks.</p> <p>Detection: The system monitors for PKCE bypass attempts:</p> <pre><code>// From lib/security-monitor.ts\nprivate async checkPKCEBypass(context: SecurityContext): Promise&lt;SecurityEvent | null&gt; {\n  const nonPKCERequests = recentOAuthRequests.filter(r =&gt; r.usePKCE === false);\n\n  if (nonPKCERequests.length &gt; 0) {\n    return {\n      eventType: SecurityEventType.OAUTH_INVALID_CLIENT,\n      severity: 'critical',\n      riskScore: 90,\n      details: {\n        reason: 'Authorization code flow without PKCE protection (OAuth 2.1 violation)'\n      }\n    };\n  }\n}\n</code></pre>"},{"location":"security/#2-refresh-token-rotation","title":"2. Refresh Token Rotation","text":"<p>Public Clients: Refresh tokens are automatically rotated on each use to prevent replay attacks.</p> <p>Confidential Clients: Refresh tokens remain valid but are monitored for suspicious usage patterns.</p> <pre><code>// From app/api/oauth/token/route.ts\nif (!client.clientSecret) {\n  console.log('[RefreshToken] Rotating refresh token for public client');\n  await prisma.refreshToken.delete({ where: { id: refreshTokenRecord.id } });\n}\n</code></pre>"},{"location":"security/#3-resource-parameter-support","title":"3. Resource Parameter Support","text":"<p>Token Audience Validation: Access tokens include resource parameter for strict audience validation.</p> <pre><code>// From app/mcp/[transport]/route.ts\nif (accessToken.resource &amp;&amp; accessToken.resource !== currentResource) {\n  await logSecurityEvent(request, 'suspicious_activity', \n    `Token audience mismatch. Expected: ${currentResource}, Got: ${accessToken.resource}`);\n  return null;\n}\n</code></pre>"},{"location":"security/#security-event-types","title":"Security Event Types","text":"<p>The system monitors for the following OAuth-specific threats:</p> Event Type Risk Score Description <code>OAUTH_INVALID_CLIENT</code> 90 Invalid client credentials or PKCE bypass attempts <code>OAUTH_INVALID_GRANT</code> 80 Invalid authorization codes or redirect URI mismatches <code>OAUTH_INVALID_SCOPE</code> 75 Unauthorized scope requests or privilege escalation"},{"location":"security/#mcp-specific-security-measures","title":"MCP-Specific Security Measures","text":""},{"location":"security/#1-mcp-server-authentication","title":"1. MCP Server Authentication","text":"<p>All MCP requests require valid OAuth 2.1 Bearer tokens:</p> <pre><code>// Authentication middleware in MCP handler\nconst accessToken = await authenticateRequest(nextReq);\nif (!accessToken) {\n  return new Response(JSON.stringify({ error: 'Unauthorized' }), {\n    status: 401,\n    headers: { \n      'WWW-Authenticate': `Bearer realm=\"${baseUrl}\", resource_metadata=\"${baseUrl}/.well-known/oauth-protected-resource\"`\n    }\n  });\n}\n</code></pre>"},{"location":"security/#2-token-passthrough-detection","title":"2. Token Passthrough Detection","text":"<p>The system detects potential token passthrough attacks where tokens are used across multiple MCP servers:</p> <pre><code>// From lib/security-monitor.ts\nprivate async checkTokenPassthrough(context: SecurityContext): Promise&lt;SecurityEvent | null&gt; {\n  // Detect rapid cross-service requests (potential token passthrough)\n  if (serverChanges.length &gt;= 2) {\n    return {\n      eventType: SecurityEventType.SUSPICIOUS_ACTIVITY,\n      severity: 'high',\n      riskScore: 85,\n      details: {\n        reason: 'Rapid cross-MCP server access pattern suggests potential token passthrough'\n      }\n    };\n  }\n}\n</code></pre>"},{"location":"security/#3-mcp-resource-registration","title":"3. MCP Resource Registration","text":"<p>Automatic registration and tracking of MCP servers for security monitoring:</p> <pre><code>// Auto-registration in MCP handler\nlet mcpServer = await prisma.mCPServer.findUnique({\n  where: { identifier: serverIdentifier }\n});\n\nif (!mcpServer) {\n  mcpServer = await prisma.mCPServer.create({\n    data: {\n      name: 'Default MCP Server',\n      identifier: serverIdentifier,\n      description: 'MCP OAuth Server',\n      version: '1.0.0'\n    }\n  });\n}\n</code></pre>"},{"location":"security/#threat-detection-system","title":"Threat Detection System","text":""},{"location":"security/#real-time-security-monitoring","title":"Real-time Security Monitoring","text":"<p>The <code>SecurityMonitor</code> class (<code>lib/security-monitor.ts</code>) implements comprehensive threat detection:</p>"},{"location":"security/#1-rate-limiting-detection","title":"1. Rate Limiting Detection","text":"<ul> <li>Threshold: 30 requests per minute per IP</li> <li>Risk Score: 20-80 (based on excess requests)</li> <li>Action: Automatic blocking and alerting</li> </ul>"},{"location":"security/#2-brute-force-detection","title":"2. Brute Force Detection","text":"<ul> <li>Threshold: 5 failed authentication attempts in 15 minutes</li> <li>Risk Score: 90</li> <li>Pattern: Multiple auth failures from same IP</li> </ul>"},{"location":"security/#3-privilege-escalation-detection","title":"3. Privilege Escalation Detection","text":"<ul> <li>Monitoring: OAuth scope changes and elevated permissions</li> <li>Risk Score: 75-95 (based on scope elevation)</li> <li>Detection: New elevated scopes not previously granted</li> </ul> <pre><code>const elevatedScopePatterns = [\n  'admin', 'write', 'delete', 'manage', 'owner', 'super',\n  'all', 'full', 'root', 'system', 'config'\n];\n\nconst newElevatedScopes = newScopes.filter(scope =&gt;\n  elevatedScopePatterns.some(pattern =&gt; \n    scope.toLowerCase().includes(pattern)\n  )\n);\n</code></pre>"},{"location":"security/#4-token-reuse-detection","title":"4. Token Reuse Detection","text":"<ul> <li>Detection: Same token used from different IP addresses within 5 minutes</li> <li>Risk Score: 85</li> <li>Mitigation: Token invalidation and user notification</li> </ul>"},{"location":"security/#5-geographic-anomaly-detection","title":"5. Geographic Anomaly Detection","text":"<ul> <li>Monitoring: Access from unusual geographic locations</li> <li>Risk Score: 60</li> <li>Baseline: User's historical access patterns</li> </ul>"},{"location":"security/#security-event-risk-scoring","title":"Security Event Risk Scoring","text":"Risk Score Range Severity Action 0-25 Low Log only 26-50 Medium Log + Monitor 51-75 High Log + Alert 76-100 Critical Log + Alert + Auto-block"},{"location":"security/#security-monitoring-analytics","title":"Security Monitoring &amp; Analytics","text":""},{"location":"security/#real-time-analytics-collection","title":"Real-time Analytics Collection","text":"<p>The <code>OptimizedAnalyticsCollector</code> (<code>lib/analytics-db.ts</code>) provides high-performance security event collection:</p>"},{"location":"security/#batched-processing","title":"Batched Processing","text":"<ul> <li>Batch Size: 100 events</li> <li>Flush Interval: 15 seconds</li> <li>Performance: Non-blocking, async processing</li> </ul>"},{"location":"security/#enhanced-context-tracking","title":"Enhanced Context Tracking","text":"<pre><code>interface SecurityEvent {\n  timestamp: Date;\n  eventType: SecurityEventType;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  userId?: string;\n  clientId?: string;\n  ipAddress: string;\n  userAgent: string;\n  riskScore: number;\n  details: Record&lt;string, unknown&gt;;\n}\n</code></pre>"},{"location":"security/#security-dashboard-metrics","title":"Security Dashboard Metrics","text":""},{"location":"security/#key-performance-indicators-kpis","title":"Key Performance Indicators (KPIs)","text":"<ul> <li>Total Security Events: Count of all security events by severity</li> <li>Risk Score Distribution: Average and P95 risk scores</li> <li>Threat Categories: Breakdown by event type</li> <li>Geographic Distribution: Security events by location</li> <li>Response Times: Time to detection and resolution</li> </ul>"},{"location":"security/#organization-level-security-analytics","title":"Organization-level Security Analytics","text":"<pre><code>async getSecurityEventsByOrganization(hoursBack = 24) {\n  return await prisma.$queryRaw`\n    SELECT \n      organization,\n      \"eventType\",\n      severity,\n      COUNT(*) as event_count,\n      AVG(\"riskScore\") as avg_risk_score\n    FROM \"AnalyticsSecurity\"\n    WHERE timestamp &gt;= ${cutoff}\n      AND organization IS NOT NULL\n      AND \"riskScore\" &gt;= 50\n    GROUP BY organization, \"eventType\", severity\n    ORDER BY event_count DESC\n  `;\n}\n</code></pre>"},{"location":"security/#token-security-and-management","title":"Token Security and Management","text":""},{"location":"security/#access-token-security","title":"Access Token Security","text":""},{"location":"security/#token-generation","title":"Token Generation","text":"<ul> <li>Algorithm: Cryptographically secure random bytes (32 bytes = 256 bits)</li> <li>Format: Hexadecimal encoding</li> <li>Lifetime: 5 minutes (configurable for production use)</li> </ul> <pre><code>const accessToken = randomBytes(32).toString('hex');\nconst accessTokenExpiresAt = new Date(Date.now() + 5 * 60 * 1000);\n</code></pre>"},{"location":"security/#token-storage","title":"Token Storage","text":"<ul> <li>Database: PostgreSQL with indexed lookups</li> <li>Hashing: Tokens stored in plaintext for lookup (consider hashing for production)</li> <li>Expiration: Automatic cleanup via database TTL</li> </ul>"},{"location":"security/#token-validation-process","title":"Token Validation Process","text":"<ol> <li>Existence Check: Token exists in database</li> <li>Expiration Check: Token not expired</li> <li>Client Validation: Token belongs to authenticated client</li> <li>Audience Validation: Token valid for requested resource</li> <li>Security Monitoring: Log usage patterns</li> </ol>"},{"location":"security/#refresh-token-security","title":"Refresh Token Security","text":""},{"location":"security/#rotation-strategy","title":"Rotation Strategy","text":"<ul> <li>Public Clients: Immediate rotation on use (OAuth 2.1 requirement)</li> <li>Confidential Clients: Optional rotation with monitoring</li> <li>Lifetime: 7 days (configurable)</li> </ul>"},{"location":"security/#security-features","title":"Security Features","text":"<ul> <li>One-time Use: Refresh tokens invalidated after use (public clients)</li> <li>Client Binding: Refresh tokens bound to specific client</li> <li>Resource Inheritance: New tokens inherit resource scope</li> </ul>"},{"location":"security/#database-security","title":"Database Security","text":""},{"location":"security/#schema-security-features","title":"Schema Security Features","text":""},{"location":"security/#data-encryption","title":"Data Encryption","text":"<ul> <li>Transport: TLS encryption for all database connections</li> <li>At Rest: PostgreSQL encryption capabilities</li> <li>Sensitive Fields: Client secrets and tokens</li> </ul>"},{"location":"security/#access-control","title":"Access Control","text":"<ul> <li>Connection Pooling: Prisma connection management</li> <li>Query Parameterization: Prevents SQL injection</li> <li>Row-level Security: PostgreSQL RLS for multi-tenant data</li> </ul>"},{"location":"security/#data-retention-and-ttl","title":"Data Retention and TTL","text":"<p>Automatic cleanup of sensitive data:</p> <pre><code>-- TTL field in schema\nexpiresAt DateTime @default(dbgenerated(\"NOW() + INTERVAL '14 days'\"))\n</code></pre> <pre><code>// Cleanup function\nasync cleanupOldData(daysOld = 30) {\n  await Promise.all([\n    prisma.analyticsRequest.deleteMany({\n      where: { timestamp: { lt: cutoff } }\n    }),\n    prisma.analyticsSecurity.deleteMany({\n      where: { timestamp: { lt: cutoff } }\n    })\n  ]);\n}\n</code></pre>"},{"location":"security/#database-indexes-for-security-queries","title":"Database Indexes for Security Queries","text":"<p>Critical indexes for security monitoring performance:</p> <pre><code>-- Security event indexes\n@@index([timestamp])\n@@index([eventType])\n@@index([severity])\n@@index([ipAddress])\n@@index([riskScore])\n@@index([timestamp, eventType])\n@@index([timestamp, severity])\n@@index([resolved])\n</code></pre>"},{"location":"security/#foreign-key-cascading","title":"Foreign Key Cascading","text":"<p>Proper data consistency with cascading deletes:</p> <pre><code>model AccessToken {\n  client    Client @relation(fields: [clientId], references: [id], onDelete: Cascade)\n  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n</code></pre>"},{"location":"security/#api-security","title":"API Security","text":""},{"location":"security/#cors-configuration","title":"CORS Configuration","text":"<p>Secure cross-origin resource sharing:</p> <pre><code>function getCorsHeaders() {\n  return {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n}\n</code></pre>"},{"location":"security/#request-validation","title":"Request Validation","text":""},{"location":"security/#input-sanitization","title":"Input Sanitization","text":"<ul> <li>Form Data Validation: Type checking and sanitization</li> <li>Parameter Validation: Required field enforcement</li> <li>Header Validation: Authorization header format checking</li> </ul>"},{"location":"security/#error-handling","title":"Error Handling","text":"<ul> <li>Information Disclosure: Generic error messages for security events</li> <li>Logging: Detailed error logging for security analysis</li> <li>Rate Limiting: Per-endpoint rate limiting</li> </ul>"},{"location":"security/#authentication-middleware","title":"Authentication Middleware","text":"<p>Consistent authentication across all protected endpoints:</p> <pre><code>// MCP authentication middleware\nasync function authenticateRequest(request: NextRequest) {\n  const authHeader = request.headers.get('authorization');\n\n  if (!authHeader?.startsWith('Bearer ')) {\n    await logSecurityEvent(request, 'auth_failure', 'Missing/malformed authorization header');\n    return null;\n  }\n\n  // Token validation, expiration check, audience validation\n  // Security event logging for all authentication failures\n}\n</code></pre>"},{"location":"security/#security-configuration-guide","title":"Security Configuration Guide","text":""},{"location":"security/#environment-variables","title":"Environment Variables","text":"<p>Required security-related environment variables:</p> <pre><code># Authentication\nAUTH_SECRET=&lt;cryptographically-secure-random-string&gt;\nGOOGLE_CLIENT_ID=&lt;google-oauth-client-id&gt;\nGOOGLE_CLIENT_SECRET=&lt;google-oauth-client-secret&gt;\n\n# Database\nDATABASE_URL=&lt;postgresql-connection-string&gt;\n\n# Optional: Redis for SSE transport\nREDIS_URL=&lt;redis-connection-string&gt;\n</code></pre>"},{"location":"security/#production-security-checklist","title":"Production Security Checklist","text":""},{"location":"security/#pre-deployment-security-audit","title":"Pre-deployment Security Audit","text":"<ul> <li> All environment variables configured securely</li> <li> Database connection uses TLS</li> <li> Token lifetimes configured appropriately for production</li> <li> CORS policies restricted to known domains</li> <li> Rate limiting configured for production load</li> <li> Monitoring and alerting configured</li> <li> Log rotation and retention policies in place</li> </ul>"},{"location":"security/#network-security","title":"Network Security","text":"<ul> <li> HTTPS enforced for all connections</li> <li> Security headers configured (HSTS, CSP, etc.)</li> <li> Firewall rules restrict database access</li> <li> Load balancer configured with SSL termination</li> </ul>"},{"location":"security/#database-security_1","title":"Database Security","text":"<pre><code>-- Example production security configuration\nALTER DATABASE oauth_db SET log_statement = 'mod';\nALTER DATABASE oauth_db SET log_min_duration_statement = 1000;\nCREATE ROLE oauth_app_user;\nGRANT CONNECT ON DATABASE oauth_db TO oauth_app_user;\nGRANT USAGE ON SCHEMA public TO oauth_app_user;\n</code></pre>"},{"location":"security/#security-headers-configuration","title":"Security Headers Configuration","text":"<p>Implement security headers in production:</p> <pre><code>// Next.js security headers\nconst securityHeaders = [\n  {\n    key: 'Strict-Transport-Security',\n    value: 'max-age=31536000; includeSubDomains'\n  },\n  {\n    key: 'X-Content-Type-Options',\n    value: 'nosniff'\n  },\n  {\n    key: 'X-Frame-Options',\n    value: 'DENY'\n  },\n  {\n    key: 'X-XSS-Protection',\n    value: '1; mode=block'\n  }\n];\n</code></pre>"},{"location":"security/#incident-response","title":"Incident Response","text":""},{"location":"security/#security-event-response-workflow","title":"Security Event Response Workflow","text":"<pre><code>graph TD\n    A[Security Event Detected] --&gt; B{Risk Score &gt;= 90?}\n    B --&gt;|Yes| C[Critical Alert]\n    B --&gt;|No| D{Risk Score &gt;= 70?}\n    D --&gt;|Yes| E[High Priority Alert]\n    D --&gt;|No| F[Standard Logging]\n\n    C --&gt; G[Immediate Response Team]\n    E --&gt; H[Security Team Review]\n    F --&gt; I[Automated Analysis]\n\n    G --&gt; J[Investigate &amp; Mitigate]\n    H --&gt; J\n    I --&gt; K[Pattern Analysis]\n\n    J --&gt; L[Update Security Policies]\n    K --&gt; L</code></pre>"},{"location":"security/#automated-response-capabilities","title":"Automated Response Capabilities","text":""},{"location":"security/#immediate-actions-risk-score-90","title":"Immediate Actions (Risk Score &gt;= 90)","text":"<ul> <li>Token Revocation: Automatic invalidation of compromised tokens</li> <li>IP Blocking: Temporary blocking of malicious IP addresses</li> <li>User Notification: Immediate security alerts to affected users</li> <li>Escalation: Automatic notification to security team</li> </ul>"},{"location":"security/#monitoring-actions-risk-score-50-89","title":"Monitoring Actions (Risk Score 50-89)","text":"<ul> <li>Enhanced Logging: Increased detail level for suspicious activities</li> <li>User Flagging: Mark user accounts for additional monitoring</li> <li>Pattern Analysis: Correlate events for potential attack campaigns</li> </ul>"},{"location":"security/#manual-response-procedures","title":"Manual Response Procedures","text":""},{"location":"security/#1-token-compromise-response","title":"1. Token Compromise Response","text":"<pre><code>-- Immediate token revocation\nUPDATE \"AccessToken\" SET \"expiresAt\" = NOW() \nWHERE \"userId\" IN (SELECT id FROM compromised_users);\n\n-- Force refresh token rotation\nDELETE FROM \"RefreshToken\" \nWHERE \"userId\" IN (SELECT id FROM compromised_users);\n</code></pre>"},{"location":"security/#2-client-compromise-response","title":"2. Client Compromise Response","text":"<pre><code>-- Revoke all tokens for compromised client\nUPDATE \"AccessToken\" SET \"expiresAt\" = NOW() \nWHERE \"clientId\" = '&lt;compromised_client_id&gt;';\n\n-- Generate new client credentials\nUPDATE \"Client\" SET \"clientSecret\" = '&lt;new_secret&gt;' \nWHERE id = '&lt;compromised_client_id&gt;';\n</code></pre>"},{"location":"security/#3-privilege-escalation-response","title":"3. Privilege Escalation Response","text":"<pre><code>-- Audit recent privilege changes\nSELECT ar.*, u.email, c.name as client_name\nFROM \"AnalyticsRequest\" ar\nJOIN \"User\" u ON ar.\"userId\" = u.id\nJOIN \"Client\" c ON ar.\"clientId\" = c.id\nWHERE ar.timestamp &gt;= NOW() - INTERVAL '24 hours'\n  AND ar.scopes != '{}'\nORDER BY ar.timestamp DESC;\n</code></pre>"},{"location":"security/#siem-integration","title":"SIEM Integration","text":""},{"location":"security/#log-format-for-external-siem-systems","title":"Log Format for External SIEM Systems","text":"<pre><code>{\n  \"@timestamp\": \"2024-01-15T10:30:00.000Z\",\n  \"event\": {\n    \"type\": \"security\",\n    \"category\": \"authentication\",\n    \"severity\": \"high\",\n    \"risk_score\": 85\n  },\n  \"source\": {\n    \"ip\": \"192.168.1.100\",\n    \"user_agent\": \"MCP-Client/1.0\"\n  },\n  \"user\": {\n    \"id\": \"user_123\",\n    \"email\": \"user@example.com\"\n  },\n  \"oauth\": {\n    \"client_id\": \"client_abc\",\n    \"grant_type\": \"authorization_code\",\n    \"scopes\": [\"read\", \"write\"]\n  },\n  \"mcp\": {\n    \"server_id\": \"mcp_server_xyz\",\n    \"method\": \"tools/call\",\n    \"tool_name\": \"add_numbers\"\n  },\n  \"security\": {\n    \"event_type\": \"TOKEN_REUSE\",\n    \"threat_indicators\": [\n      \"multiple_ip_addresses\",\n      \"rapid_token_usage\"\n    ]\n  }\n}\n</code></pre>"},{"location":"security/#splunk-integration-example","title":"Splunk Integration Example","text":"<pre><code># Splunk forwarder configuration\n[monitor:///var/log/oauth-server/security.log]\ndisabled = false\nindex = security\nsourcetype = oauth_security_events\n</code></pre>"},{"location":"security/#elk-stack-integration","title":"ELK Stack Integration","text":"<pre><code># Logstash configuration\ninput {\n  file {\n    path =&gt; \"/var/log/oauth-server/security.log\"\n    start_position =&gt; \"beginning\"\n    codec =&gt; \"json\"\n  }\n}\n\nfilter {\n  if [event][type] == \"security\" {\n    mutate {\n      add_tag =&gt; [ \"oauth_security\" ]\n    }\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts =&gt; [\"localhost:9200\"]\n    index =&gt; \"oauth-security-%{+YYYY.MM.dd}\"\n  }\n}\n</code></pre>"},{"location":"security/#compliance-and-standards","title":"Compliance and Standards","text":""},{"location":"security/#oauth-21-compliance-rfc-9068","title":"OAuth 2.1 Compliance (RFC 9068)","text":"<p>This implementation fully complies with OAuth 2.1 specifications:</p>"},{"location":"security/#required-features","title":"\u2705 Required Features","text":"<ul> <li>PKCE Mandatory: All authorization code flows require PKCE</li> <li>Refresh Token Rotation: Public clients rotate refresh tokens</li> <li>Resource Parameter: Support for resource-specific tokens</li> <li>Secure Redirect URIs: HTTPS enforcement for production</li> <li>Token Binding: Tokens bound to specific clients and resources</li> </ul>"},{"location":"security/#security-recommendations","title":"\u2705 Security Recommendations","text":"<ul> <li>Short-lived Access Tokens: 5-minute default lifetime</li> <li>Strong Client Authentication: Client secret validation</li> <li>Comprehensive Logging: All OAuth events logged</li> <li>Rate Limiting: Protection against brute force attacks</li> </ul>"},{"location":"security/#rfc-8707-resource-indicators-for-oauth-20","title":"RFC 8707 - Resource Indicators for OAuth 2.0","text":"<p>Implementation of resource parameter for token audience validation:</p> <pre><code>// Resource parameter in authorization request\nconst authorizationUrl = `/oauth/authorize?` +\n  `client_id=${clientId}&amp;` +\n  `response_type=code&amp;` +\n  `redirect_uri=${redirectUri}&amp;` +\n  `resource=${encodeURIComponent('https://api.example.com')}&amp;` +\n  `code_challenge=${codeChallenge}&amp;` +\n  `code_challenge_method=S256`;\n</code></pre>"},{"location":"security/#gdpr-compliance-features","title":"GDPR Compliance Features","text":""},{"location":"security/#data-protection","title":"Data Protection","text":"<ul> <li>Data Minimization: Only collect necessary user data</li> <li>Right to Erasure: User account deletion cascades all related data</li> <li>Data Portability: Export functionality for user data</li> <li>Consent Management: Clear consent for data processing</li> </ul>"},{"location":"security/#privacy-by-design","title":"Privacy-by-Design","text":"<pre><code>// Automatic data cleanup for privacy compliance\nasync cleanupExpiredData() {\n  // Remove expired analytics data (14-day retention)\n  await prisma.analyticsRequest.deleteMany({\n    where: { expiresAt: { lt: new Date() } }\n  });\n\n  // Remove resolved security events (30-day retention)\n  await prisma.analyticsSecurity.deleteMany({\n    where: { \n      resolved: true,\n      resolvedAt: { lt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) }\n    }\n  });\n}\n</code></pre>"},{"location":"security/#soc-2-type-ii-alignment","title":"SOC 2 Type II Alignment","text":""},{"location":"security/#security-controls","title":"Security Controls","text":"<ul> <li>Access Control: Multi-factor authentication and role-based access</li> <li>System Monitoring: Comprehensive logging and alerting</li> <li>Data Integrity: Database constraints and validation</li> <li>System Availability: Health checks and monitoring</li> </ul>"},{"location":"security/#control-testing","title":"Control Testing","text":"<pre><code>// Example control validation\nasync validateSecurityControls() {\n  const results = {\n    mfaEnforcement: await checkMFACompliance(),\n    tokenValidation: await validateTokenSecurityControls(),\n    dataEncryption: await verifyEncryptionAtRest(),\n    accessLogging: await validateAuditLogs(),\n    backupIntegrity: await verifyBackupProcedures()\n  };\n\n  return results;\n}\n</code></pre>"},{"location":"security/#industry-best-practices","title":"Industry Best Practices","text":""},{"location":"security/#owasp-top-10-mitigation","title":"OWASP Top 10 Mitigation","text":"<ul> <li>A01 - Broken Access Control: Comprehensive authorization checks</li> <li>A02 - Cryptographic Failures: Strong token generation and TLS</li> <li>A03 - Injection: Parameterized queries and input validation</li> <li>A07 - Identification and Authentication Failures: Multi-factor auth</li> <li>A09 - Security Logging and Monitoring Failures: Extensive logging</li> </ul>"},{"location":"security/#nist-cybersecurity-framework-alignment","title":"NIST Cybersecurity Framework Alignment","text":"<ul> <li>Identify: Asset inventory and risk assessment</li> <li>Protect: Access controls and data protection</li> <li>Detect: Real-time monitoring and threat detection</li> <li>Respond: Incident response procedures</li> <li>Recover: Business continuity planning</li> </ul>"},{"location":"security/#additional-resources","title":"Additional Resources","text":""},{"location":"security/#security-testing-tools","title":"Security Testing Tools","text":""},{"location":"security/#automated-security-testing","title":"Automated Security Testing","text":"<pre><code># OAuth security testing with OWASP ZAP\nzap-baseline.py -t https://your-oauth-server.com\n\n# Token security validation\noauth2-security-scanner --target https://your-oauth-server.com/oauth\n\n# Database security assessment\nsqlmap -u \"postgresql://connection-string\" --risk 3 --level 5\n</code></pre>"},{"location":"security/#manual-security-testing-checklist","title":"Manual Security Testing Checklist","text":"<ul> <li> Authorization code interception resistance (PKCE)</li> <li> Refresh token rotation validation</li> <li> Cross-site request forgery protection</li> <li> Token audience validation enforcement</li> <li> Rate limiting effectiveness</li> <li> Error message information disclosure</li> <li> Session management security</li> </ul>"},{"location":"security/#security-monitoring-queries","title":"Security Monitoring Queries","text":""},{"location":"security/#daily-security-report","title":"Daily Security Report","text":"<pre><code>-- Daily security events summary\nSELECT \n  DATE(\"timestamp\") as date,\n  \"eventType\",\n  severity,\n  COUNT(*) as count,\n  AVG(\"riskScore\") as avg_risk\nFROM \"AnalyticsSecurity\"\nWHERE \"timestamp\" &gt;= NOW() - INTERVAL '7 days'\nGROUP BY DATE(\"timestamp\"), \"eventType\", severity\nORDER BY date DESC, count DESC;\n</code></pre>"},{"location":"security/#high-risk-user-activity","title":"High-Risk User Activity","text":"<pre><code>-- Users with elevated risk activity\nSELECT \n  u.email,\n  COUNT(s.id) as security_events,\n  AVG(s.\"riskScore\") as avg_risk_score,\n  MAX(s.\"timestamp\") as last_event\nFROM \"User\" u\nJOIN \"AnalyticsSecurity\" s ON u.id = s.\"userId\"\nWHERE s.\"timestamp\" &gt;= NOW() - INTERVAL '30 days'\n  AND s.\"riskScore\" &gt;= 70\nGROUP BY u.id, u.email\nHAVING COUNT(s.id) &gt;= 3\nORDER BY avg_risk_score DESC;\n</code></pre>"},{"location":"security/#contact-information","title":"Contact Information","text":"<p>For security-related questions or to report vulnerabilities:</p> <ul> <li>Security Team: security@example.com</li> <li>Emergency Contact: +1-555-SECURITY</li> <li>Bug Bounty Program: https://example.com/security/bounty</li> <li>Security Documentation: https://docs.example.com/security</li> </ul> <p>This security documentation is maintained by the Security Team and updated regularly. Last updated: January 2024</p>"},{"location":"setup/","title":"Setup Guide","text":"<p>This guide will walk you through setting up the MCP OAuth Sample project from scratch. Follow these steps carefully to ensure a smooth installation and configuration process.</p>"},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed on your system:</p>"},{"location":"setup/#required-software","title":"Required Software","text":"<ul> <li>Node.js v18 or higher - The project uses Next.js 15 which requires Node.js 18+</li> <li>PostgreSQL 12 or higher - Database for storing OAuth clients, tokens, and analytics data</li> <li>pnpm - Package manager (recommended) or npm/yarn</li> <li>Git - Version control</li> </ul>"},{"location":"setup/#system-requirements","title":"System Requirements","text":"<ul> <li>Operating System: macOS, Linux, or Windows</li> <li>RAM: Minimum 4GB (8GB recommended)</li> <li>Storage: At least 1GB free space for dependencies and database</li> </ul>"},{"location":"setup/#step-1-install-prerequisites","title":"Step 1: Install Prerequisites","text":""},{"location":"setup/#nodejs-installation","title":"Node.js Installation","text":"<p>macOS (using Homebrew): <pre><code>brew install node@18\n</code></pre></p> <p>Ubuntu/Debian: <pre><code>curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n</code></pre></p> <p>Windows: Download and install from nodejs.org</p> <p>Verify Installation: <pre><code>node --version  # Should be v18.0.0 or higher\nnpm --version\n</code></pre></p>"},{"location":"setup/#postgresql-installation","title":"PostgreSQL Installation","text":"<p>macOS (using Homebrew): <pre><code># Install PostgreSQL\nbrew install postgresql@14\n\n# Start PostgreSQL service\nbrew services start postgresql@14\n\n# Create a database user (optional)\ncreateuser --interactive\n</code></pre></p> <p>Ubuntu/Debian: <pre><code># Install PostgreSQL\nsudo apt update\nsudo apt install postgresql postgresql-contrib\n\n# Start PostgreSQL service\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n\n# Create a database and user\nsudo -u postgres psql\nCREATE DATABASE mcp_oauth_sample;\nCREATE USER mcp_user WITH PASSWORD 'your_password';\nGRANT ALL PRIVILEGES ON DATABASE mcp_oauth_sample TO mcp_user;\n\\q\n</code></pre></p> <p>Windows: 1. Download PostgreSQL from postgresql.org 2. Run the installer and follow the setup wizard 3. Remember the superuser password you set during installation</p>"},{"location":"setup/#pnpm-installation","title":"pnpm Installation","text":"<pre><code># Install pnpm globally\nnpm install -g pnpm\n\n# Verify installation\npnpm --version\n</code></pre>"},{"location":"setup/#step-2-clone-and-install-dependencies","title":"Step 2: Clone and Install Dependencies","text":"<pre><code># Clone the repository\ngit clone https://github.com/raxITai/mcp-oauth-sample.git\ncd mcp-oauth-sample\n\n# Install dependencies\npnpm install\n</code></pre>"},{"location":"setup/#step-3-environment-variables-setup","title":"Step 3: Environment Variables Setup","text":"<p>Create environment files for your configuration:</p> <pre><code># Copy environment template\ncp .env.example .env\n</code></pre> <p>If <code>.env.example</code> doesn't exist, create a new <code>.env</code> file with the following variables:</p>"},{"location":"setup/#required-environment-variables","title":"Required Environment Variables","text":"<p>Edit your <code>.env</code> file and add the following variables:</p> <pre><code># Created by Vercel CLI\nAUTH_SECRET=\"your-32-character-random-string\"\nDATABASE_URL=\"postgres://username:password@host:5432/database?sslmode=require\"\nGOOGLE_CLIENT_ID=\"your-google-client-id.apps.googleusercontent.com\"\nGOOGLE_CLIENT_SECRET=\"your-google-client-secret\"\nPOSTGRES_URL=\"postgres://username:password@host:5432/database?sslmode=require\"\nPRISMA_DATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=your-api-key\"\nREDIS_URL=\"rediss://user:pass@host:6379\"\nVERCEL_OIDC_TOKEN=\"your-vercel-oidc-token\"\nADMIN_EMAIL=\"admin@example.com\"\n</code></pre>"},{"location":"setup/#environment-variable-explanations","title":"Environment Variable Explanations","text":"Variable Description Required Example <code>AUTH_SECRET</code> Secret key for NextAuth.js session encryption \u2705 Generate with <code>openssl rand -base64 32</code> <code>DATABASE_URL</code> PostgreSQL connection string \u2705 <code>postgres://user:pass@db.prisma.io:5432/?sslmode=require</code> <code>GOOGLE_CLIENT_ID</code> Google OAuth 2.0 client ID \u2705 <code>123456789-abc.apps.googleusercontent.com</code> <code>GOOGLE_CLIENT_SECRET</code> Google OAuth 2.0 client secret \u2705 <code>GOCSPX-abcdefghijklmnop</code> <code>POSTGRES_URL</code> Alternative PostgreSQL URL format \u2705 Same as <code>DATABASE_URL</code> <code>PRISMA_DATABASE_URL</code> Prisma Accelerate connection string \u2705 <code>prisma+postgres://accelerate.prisma-data.net/?api_key=...</code> <code>ADMIN_EMAIL</code> Gmail address(es) for analytics dashboard access \u2705 <code>admin@gmail.com</code> or <code>admin1@gmail.com,admin2@gmail.com</code> <code>REDIS_URL</code> Redis connection URL for SSE transport \u26a0\ufe0f <code>rediss://user:pass@host:6379</code> <code>VERCEL_OIDC_TOKEN</code> Vercel OIDC token for deployment \ud83d\udd04 Auto-generated by Vercel CLI"},{"location":"setup/#important-environment-variable-notes","title":"Important Environment Variable Notes","text":""},{"location":"setup/#admin_email-required-for-analytics-dashboard","title":"ADMIN_EMAIL (Required for Analytics Dashboard)","text":"<p>The <code>ADMIN_EMAIL</code> variable controls access to the analytics dashboard at <code>/analytics</code>. Only users who sign in with Gmail addresses listed in this variable will be able to access the dashboard.</p> <p>Single admin email: <pre><code>ADMIN_EMAIL=\"admin@gmail.com\"\n</code></pre></p> <p>Multiple admin emails (comma-separated): <pre><code>ADMIN_EMAIL=\"admin1@gmail.com,admin2@gmail.com,admin3@gmail.com\"\n</code></pre></p> <p>Important notes: - Only Gmail addresses are supported (Google OAuth authentication) - Emails are case-insensitive when checked - Spaces around commas are automatically trimmed - Empty emails in the list are ignored - All listed Gmail addresses will have full admin access to analytics</p>"},{"location":"setup/#prisma_database_url-prisma-accelerate","title":"PRISMA_DATABASE_URL (Prisma Accelerate)","text":"<p>If you're using Prisma Accelerate for enhanced database performance, you'll need this connection string. For local development, you can use just <code>DATABASE_URL</code>.</p>"},{"location":"setup/#generating-auth_secret","title":"Generating AUTH_SECRET","text":"<p>Generate a secure random string for <code>AUTH_SECRET</code>:</p> <pre><code># Using OpenSSL (macOS/Linux)\nopenssl rand -base64 32\n\n# Using Node.js\nnode -e \"console.log(require('crypto').randomBytes(32).toString('base64'))\"\n</code></pre>"},{"location":"setup/#step-4-google-oauth-configuration","title":"Step 4: Google OAuth Configuration","text":"<p>To enable Google authentication, you need to set up a Google Cloud Console project:</p>"},{"location":"setup/#create-google-cloud-project","title":"Create Google Cloud Project","text":"<ol> <li>Go to Google Cloud Console</li> <li>Create a new project or select an existing one</li> <li>Enable the Google+ API and Google OAuth2 API</li> </ol>"},{"location":"setup/#configure-oauth-consent-screen","title":"Configure OAuth Consent Screen","text":"<ol> <li>Navigate to APIs &amp; Services &gt; OAuth consent screen</li> <li>Choose External user type (unless you have a Google Workspace)</li> <li>Fill in the required fields:</li> <li>App name: Your application name</li> <li>User support email: Your email</li> <li>Developer contact information: Your email</li> <li>Add scopes (default scopes are sufficient for basic auth)</li> <li>Add test users if in development mode</li> </ol>"},{"location":"setup/#create-oauth-20-credentials","title":"Create OAuth 2.0 Credentials","text":"<ol> <li>Navigate to APIs &amp; Services &gt; Credentials</li> <li>Click Create Credentials &gt; OAuth 2.0 Client IDs</li> <li>Choose Web application</li> <li>Configure:</li> <li>Name: Your app name</li> <li>Authorized JavaScript origins: <ul> <li><code>http://localhost:3000</code> (development)</li> <li><code>https://yourdomain.com</code> (production)</li> </ul> </li> <li>Authorized redirect URIs:<ul> <li><code>http://localhost:3000/api/auth/callback/google</code> (development)</li> <li><code>https://yourdomain.com/api/auth/callback/google</code> (production)</li> </ul> </li> <li>Copy the Client ID and Client Secret to your <code>.env</code> file</li> </ol>"},{"location":"setup/#step-5-database-setup","title":"Step 5: Database Setup","text":""},{"location":"setup/#initialize-database-schema","title":"Initialize Database Schema","text":"<pre><code># Generate Prisma client\npnpm prisma generate\n\n# Push schema to database (for development)\npnpm prisma db push\n\n# Or create and run migrations (for production)\npnpm prisma migrate dev --name init\n</code></pre>"},{"location":"setup/#verify-database-connection","title":"Verify Database Connection","text":"<pre><code># Open Prisma Studio to inspect your database\npnpm prisma studio\n</code></pre> <p>This will open a web interface at <code>http://localhost:5555</code> where you can view and edit your database records.</p>"},{"location":"setup/#database-connection-troubleshooting","title":"Database Connection Troubleshooting","text":"<p>If you encounter database connection issues:</p> <ol> <li> <p>Check PostgreSQL is running: <pre><code># macOS\nbrew services list | grep postgresql\n\n# Linux\nsudo systemctl status postgresql\n</code></pre></p> </li> <li> <p>Test connection manually: <pre><code>psql \"postgresql://username:password@localhost:5432/mcp_oauth_sample\"\n</code></pre></p> </li> <li> <p>Check database exists: <pre><code>\\l  -- List all databases\n\\q  -- Quit\n</code></pre></p> </li> </ol>"},{"location":"setup/#step-6-first-run","title":"Step 6: First Run","text":""},{"location":"setup/#start-development-server","title":"Start Development Server","text":"<pre><code># Start the development server\npnpm dev\n</code></pre> <p>The application will be available at <code>http://localhost:3000</code>.</p>"},{"location":"setup/#build-for-production","title":"Build for Production","text":"<pre><code># Build the application\npnpm build\n\n# Start production server\npnpm start\n</code></pre>"},{"location":"setup/#step-7-verification-steps","title":"Step 7: Verification Steps","text":""},{"location":"setup/#1-basic-application-access","title":"1. Basic Application Access","text":"<ol> <li>Open <code>http://localhost:3000</code> in your browser</li> <li>You should see the application homepage</li> <li>Check that the site loads without errors in the browser console</li> </ol>"},{"location":"setup/#2-authentication-flow","title":"2. Authentication Flow","text":"<ol> <li>Click on any \"Sign In\" button or navigate to a protected route</li> <li>You should be redirected to Google OAuth</li> <li>Sign in with your Google account</li> <li>Verify you're redirected back to the application</li> <li>Check that your user appears in the database via Prisma Studio</li> </ol>"},{"location":"setup/#3-mcp-endpoints","title":"3. MCP Endpoints","text":"<p>Test the MCP endpoints are accessible:</p> <pre><code># Test MCP SSE endpoint\ncurl -I http://localhost:3000/mcp/sse\n\n# Test MCP HTTP endpoint  \ncurl -I http://localhost:3000/mcp/mcp\n\n# Test OAuth discovery endpoint\ncurl http://localhost:3000/.well-known/oauth-authorization-server\n</code></pre>"},{"location":"setup/#4-analytics-dashboard","title":"4. Analytics Dashboard","text":"<ol> <li>Sign in to the application</li> <li>Navigate to <code>/analytics</code></li> <li>Verify the analytics dashboard loads</li> <li>Check that basic metrics are displayed</li> </ol>"},{"location":"setup/#5-database-verification","title":"5. Database Verification","text":"<p>Using Prisma Studio (<code>pnpm prisma studio</code>):</p> <ol> <li>Check that User records are created when you sign in</li> <li>Verify Account records link to your Google OAuth account</li> <li>Confirm Session records are created for active sessions</li> </ol>"},{"location":"setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"setup/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"setup/#1-module-not-found-errors","title":"1. \"Module not found\" errors","text":"<p>Solution: <pre><code># Clear node_modules and reinstall\nrm -rf node_modules pnpm-lock.yaml\npnpm install\n</code></pre></p>"},{"location":"setup/#2-prisma-client-generation-issues","title":"2. Prisma client generation issues","text":"<p>Solution: <pre><code># Regenerate Prisma client\npnpm prisma generate --no-engine\n</code></pre></p>"},{"location":"setup/#3-database-connection-refused","title":"3. Database connection refused","text":"<p>Solution: - Ensure PostgreSQL is running: <code>brew services start postgresql@14</code> - Check DATABASE_URL format: <code>postgresql://user:password@host:port/database</code> - Verify database exists and user has permissions</p>"},{"location":"setup/#4-google-oauth-errors","title":"4. Google OAuth errors","text":"<p>Solution: - Verify GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET are correct - Check redirect URIs match exactly in Google Cloud Console - Ensure OAuth consent screen is configured properly</p>"},{"location":"setup/#5-nextjs-build-errors","title":"5. Next.js build errors","text":"<p>Solution: <pre><code># Clear Next.js cache\nrm -rf .next\npnpm build\n</code></pre></p>"},{"location":"setup/#6-port-already-in-use","title":"6. Port already in use","text":"<p>Solution: <pre><code># Kill process using port 3000\nlsof -ti:3000 | xargs kill -9\n\n# Or use a different port\npnpm dev -- -p 3001\n</code></pre></p>"},{"location":"setup/#environment-specific-issues","title":"Environment-Specific Issues","text":""},{"location":"setup/#macos-issues","title":"macOS Issues","text":"<ul> <li>Homebrew permissions: If you get permission errors, run <code>sudo chown -R $(whoami) /opt/homebrew</code></li> <li>Node.js path issues: Add <code>/opt/homebrew/bin</code> to your PATH</li> </ul>"},{"location":"setup/#linux-issues","title":"Linux Issues","text":"<ul> <li>PostgreSQL peer authentication: Edit <code>/etc/postgresql/*/main/pg_hba.conf</code> and change auth method to <code>md5</code></li> <li>Node.js version conflicts: Use <code>nvm</code> to manage Node.js versions</li> </ul>"},{"location":"setup/#windows-issues","title":"Windows Issues","text":"<ul> <li>PowerShell execution policy: Run <code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</code></li> <li>Path issues: Ensure Node.js and PostgreSQL are in your system PATH</li> </ul>"},{"location":"setup/#getting-help","title":"Getting Help","text":"<p>If you encounter issues not covered here:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Review the Development Guide</li> <li>Open an issue on GitHub with:</li> <li>Your operating system and versions</li> <li>Complete error messages</li> <li>Steps to reproduce the issue</li> <li>Create Issue</li> </ol>"},{"location":"setup/#next-steps","title":"Next Steps","text":"<p>Once your setup is complete:</p> <ol> <li>Read the Architecture Guide to understand the system design</li> <li>Review Security Features to understand the security implementation</li> <li>Explore Analytics Features to learn about the dashboard</li> <li>Check Deployment Guide when ready to deploy to production</li> </ol>"},{"location":"setup/#production-considerations","title":"Production Considerations","text":"<p>Before deploying to production:</p> <ol> <li>Environment Variables: Update all URLs to production domains</li> <li>Database: Use a managed PostgreSQL service (AWS RDS, Google Cloud SQL, etc.)</li> <li>Security: Generate new AUTH_SECRET and rotate all credentials</li> <li>Monitoring: Set up logging and monitoring for the application</li> <li>Backup: Configure regular database backups</li> <li>SSL: Ensure HTTPS is enabled for all endpoints</li> </ol> <p>Need help? Check our troubleshooting guide or open an issue on GitHub.</p>"},{"location":"troubleshooting/","title":"MCP OAuth Server Troubleshooting Guide","text":"<p>This comprehensive guide covers common issues, debugging procedures, and solutions for the MCP OAuth server implementation.</p>"},{"location":"troubleshooting/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Common Setup Issues</li> <li>Database Connection Problems</li> <li>OAuth Flow Errors</li> <li>MCP Client Integration Issues</li> <li>Authentication Failures</li> <li>API Endpoint Errors</li> <li>Analytics Dashboard Problems</li> <li>Performance Issues</li> <li>Security-Related Errors</li> <li>Production Deployment Issues</li> <li>Environment Variable Problems</li> <li>Debugging Tools and Techniques</li> </ol>"},{"location":"troubleshooting/#common-setup-issues","title":"Common Setup Issues","text":""},{"location":"troubleshooting/#issue-prisma-client-generation-fails","title":"Issue: Prisma Client Generation Fails","text":"<p>Problem Description: Prisma client fails to generate during <code>pnpm install</code> or <code>pnpm build</code>.</p> <p>Symptoms: <pre><code>Error: Cannot find module 'generated/prisma'\nPrismaClientInitializationError: Prisma has detected that this project uses a custom output path\n</code></pre></p> <p>Root Cause Analysis: - Custom Prisma client output path is not properly configured - Missing Prisma generate step in build process - Node modules corruption</p> <p>Step-by-step Solution: 1. Check Prisma schema configuration:    <pre><code>generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n  engineType = \"library\"\n}\n</code></pre></p> <ol> <li> <p>Manually generate Prisma client:    <pre><code>pnpm prisma generate\n</code></pre></p> </li> <li> <p>Clear and reinstall dependencies:    <pre><code>rm -rf node_modules pnpm-lock.yaml\nrm -rf generated/\npnpm install\n</code></pre></p> </li> <li> <p>Verify build script includes Prisma generation:    <pre><code>{\n  \"scripts\": {\n    \"build\": \"prisma generate --no-engine &amp;&amp; next build\"\n  }\n}\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Always run <code>pnpm prisma generate</code> after schema changes - Include postinstall script for automatic generation - Use <code>--no-engine</code> flag in production builds</p> <p>Related Issues: - Database Connection Problems - Production Deployment Issues</p>"},{"location":"troubleshooting/#issue-nextjs-development-server-wont-start","title":"Issue: Next.js Development Server Won't Start","text":"<p>Problem Description: Development server fails to start with various port or configuration errors.</p> <p>Symptoms: <pre><code>Error: listen EADDRINUSE: address already in use :::3000\nError: Invalid configuration object\n</code></pre></p> <p>Root Cause Analysis: - Port 3000 already in use - Invalid Next.js configuration - Missing environment variables</p> <p>Step-by-step Solution: 1. Check for processes using port 3000:    <pre><code>lsof -ti:3000\nkill -9 $(lsof -ti:3000)\n</code></pre></p> <ol> <li> <p>Use alternative port:    <pre><code>pnpm dev -- -p 3001\n</code></pre></p> </li> <li> <p>Verify Next.js configuration (<code>next.config.ts</code>):    <pre><code>const nextConfig = {\n  experimental: {\n    serverComponentsExternalPackages: ['@prisma/client']\n  }\n};\n</code></pre></p> </li> <li> <p>Check TypeScript configuration:    <pre><code>pnpm tsc --noEmit\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Use port management tools like <code>fkill-cli</code> - Regularly validate configuration files - Keep dependencies updated</p>"},{"location":"troubleshooting/#database-connection-problems","title":"Database Connection Problems","text":""},{"location":"troubleshooting/#issue-postgresql-connection-refused","title":"Issue: PostgreSQL Connection Refused","text":"<p>Problem Description: Application cannot connect to PostgreSQL database.</p> <p>Symptoms: <pre><code>PrismaClientInitializationError: Can't reach database server\nError: connect ECONNREFUSED 127.0.0.1:5432\n</code></pre></p> <p>Root Cause Analysis: - PostgreSQL service not running - Incorrect database URL - Firewall blocking connection - Wrong database credentials</p> <p>Step-by-step Solution: 1. Check PostgreSQL service status:    <pre><code># macOS with Homebrew\nbrew services list | grep postgresql\nbrew services start postgresql@14\n\n# Linux systemd\nsudo systemctl status postgresql\nsudo systemctl start postgresql\n\n# Docker\ndocker ps | grep postgres\ndocker start postgres-container\n</code></pre></p> <ol> <li> <p>Verify database URL format:    <pre><code># Correct format\nDATABASE_URL=\"postgresql://username:password@localhost:5432/database_name\"\n</code></pre></p> </li> <li> <p>Test direct connection:    <pre><code>psql -h localhost -p 5432 -U username -d database_name\n</code></pre></p> </li> <li> <p>Check database existence:    <pre><code>psql -U postgres -c \"\\l\" | grep your_database\n</code></pre></p> </li> <li> <p>Create database if missing:    <pre><code>createdb -U postgres your_database_name\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Use Docker Compose for consistent database setup - Implement database health checks - Monitor database service status</p> <p>Related Issues: - Environment Variable Problems - Production Deployment Issues</p>"},{"location":"troubleshooting/#issue-database-schema-out-of-sync","title":"Issue: Database Schema Out of Sync","text":"<p>Problem Description: Database schema doesn't match Prisma schema, causing query failures.</p> <p>Symptoms: <pre><code>PrismaClientValidationError: Invalid `prisma.client.findUnique()` invocation\nTable 'Client' doesn't exist in the current database\n</code></pre></p> <p>Root Cause Analysis: - Schema changes not applied to database - Missing migrations - Database reset without applying schema</p> <p>Step-by-step Solution: 1. Check current database schema:    <pre><code>pnpm prisma db pull\n</code></pre></p> <ol> <li> <p>Generate and apply migration:    <pre><code>pnpm prisma migrate dev --name init\n</code></pre></p> </li> <li> <p>Force push schema (development only):    <pre><code>pnpm prisma db push\n</code></pre></p> </li> <li> <p>Reset database and reapply schema:    <pre><code>pnpm prisma migrate reset\n</code></pre></p> </li> <li> <p>Verify schema sync:    <pre><code>pnpm prisma studio\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Always create migrations for schema changes - Use <code>prisma migrate dev</code> in development - Use <code>prisma migrate deploy</code> in production</p>"},{"location":"troubleshooting/#oauth-flow-errors","title":"OAuth Flow Errors","text":""},{"location":"troubleshooting/#issue-invalid-client-error","title":"Issue: Invalid Client Error","text":"<p>Problem Description: OAuth authorization fails with \"invalid_client\" error.</p> <p>Symptoms: <pre><code>{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"Client authentication failed\"\n}\n</code></pre></p> <p>Root Cause Analysis: - Client not registered in database - Incorrect client_id or client_secret - Client registration incomplete</p> <p>Step-by-step Solution: 1. Verify client exists in database:    <pre><code>pnpm prisma studio\n# Check Client table for your client_id\n</code></pre></p> <ol> <li> <p>Register new OAuth client:    <pre><code>curl -X POST http://localhost:3000/api/oauth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Test Client\",\n    \"redirectUris\": [\"http://localhost:8080/callback\"]\n  }'\n</code></pre></p> </li> <li> <p>Check client credentials:    <pre><code>SELECT clientId, clientSecret, name FROM Client WHERE clientId = 'your-client-id';\n</code></pre></p> </li> <li> <p>Verify redirect URI matches registration:    <pre><code>SELECT redirectUris FROM Client WHERE clientId = 'your-client-id';\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Store client credentials securely - Validate redirect URIs during registration - Implement client credential rotation</p> <p>Related Issues: - Authentication Failures - Security-Related Errors</p>"},{"location":"troubleshooting/#issue-pkce-validation-failure","title":"Issue: PKCE Validation Failure","text":"<p>Problem Description: Authorization code exchange fails with PKCE validation error.</p> <p>Symptoms: <pre><code>{\n  \"error\": \"invalid_grant\",\n  \"error_description\": \"PKCE validation failed\"\n}\n</code></pre></p> <p>Root Cause Analysis: - Code verifier doesn't match code challenge - Incorrect PKCE method (S256 vs plain) - Missing code_verifier in token request</p> <p>Step-by-step Solution: 1. Verify PKCE implementation in client:    <pre><code>// Generate code verifier\nconst codeVerifier = crypto.randomBytes(32).toString('base64url');\n\n// Generate code challenge (S256)\nconst codeChallenge = crypto\n  .createHash('sha256')\n  .update(codeVerifier)\n  .digest('base64url');\n</code></pre></p> <ol> <li> <p>Check authorization request includes PKCE:    <pre><code>GET /oauth/authorize?\n  response_type=code&amp;\n  client_id=your-client-id&amp;\n  redirect_uri=http://localhost:8080/callback&amp;\n  code_challenge=CODE_CHALLENGE&amp;\n  code_challenge_method=S256\n</code></pre></p> </li> <li> <p>Include code_verifier in token request:    <pre><code>POST /api/oauth/token\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code&amp;\ncode=AUTH_CODE&amp;\nclient_id=CLIENT_ID&amp;\nredirect_uri=REDIRECT_URI&amp;\ncode_verifier=CODE_VERIFIER\n</code></pre></p> </li> <li> <p>Debug PKCE validation in server logs:    <pre><code># Check server console output during token exchange\ntail -f logs/oauth.log\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Use established OAuth libraries for PKCE - Test PKCE flow with different clients - Implement comprehensive PKCE logging</p>"},{"location":"troubleshooting/#mcp-client-integration-issues","title":"MCP Client Integration Issues","text":""},{"location":"troubleshooting/#issue-mcp-client-authentication-fails","title":"Issue: MCP Client Authentication Fails","text":"<p>Problem Description: MCP client cannot authenticate with the server using OAuth tokens.</p> <p>Symptoms: <pre><code>{\n  \"error\": \"Unauthorized\",\n  \"status\": 401\n}\n</code></pre></p> <p>Root Cause Analysis: - Invalid or expired access token - Missing Authorization header - Token audience mismatch - Incorrect token format</p> <p>Step-by-step Solution: 1. Verify token is included in request:    <pre><code>curl -X POST http://localhost:3000/mcp/sse \\\n  -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\" \\\n  -H \"Content-Type: application/json\"\n</code></pre></p> <ol> <li> <p>Check token validity in database:    <pre><code>SELECT token, expiresAt, resource FROM AccessToken \nWHERE token = 'your-access-token';\n</code></pre></p> </li> <li> <p>Verify token audience/resource:    <pre><code>// Token should be issued for correct resource\nconst expectedResource = \"http://localhost:3000\";\n</code></pre></p> </li> <li> <p>Check MCP server logs:    <pre><code># Look for authentication debug logs\n[MCP] Auth header present: true\n[MCP] Token extracted: present\n[MCP] Access token found: true\n[MCP] Authentication successful, audience validated\n</code></pre></p> </li> <li> <p>Test with fresh token:    <pre><code># Get new token through OAuth flow\n# Or use test endpoint if available\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Implement token refresh logic in MCP client - Use proper token storage and retrieval - Monitor token expiration times</p> <p>Related Issues: - Authentication Failures - OAuth Flow Errors</p>"},{"location":"troubleshooting/#issue-mcp-transport-configuration","title":"Issue: MCP Transport Configuration","text":"<p>Problem Description: MCP client cannot establish connection using SSE or HTTP transport.</p> <p>Symptoms: <pre><code>Connection failed: ERR_CONNECTION_REFUSED\nWebSocket connection failed\nSSE connection timeout\n</code></pre></p> <p>Root Cause Analysis: - Incorrect transport URL - CORS configuration issues - Network connectivity problems - Server not supporting requested transport</p> <p>Step-by-step Solution: 1. Verify MCP server endpoints:    <pre><code># SSE transport\ncurl http://localhost:3000/mcp/sse\n\n# HTTP transport  \ncurl http://localhost:3000/mcp/mcp\n</code></pre></p> <ol> <li> <p>Check CORS headers:    <pre><code>curl -H \"Origin: http://localhost:8080\" \\\n     -H \"Access-Control-Request-Method: POST\" \\\n     -H \"Access-Control-Request-Headers: Content-Type,Authorization\" \\\n     -X OPTIONS \\\n     http://localhost:3000/mcp/sse\n</code></pre></p> </li> <li> <p>Test transport with authentication:    <pre><code>curl -X POST http://localhost:3000/mcp/sse \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"method\": \"tools/list\", \"params\": {}}'\n</code></pre></p> </li> <li> <p>Configure client transport properly:    <pre><code>// SSE transport\nconst transport = new StdioServerTransport({\n  command: 'curl',\n  args: ['-N', '-H', 'Authorization: Bearer TOKEN', 'http://localhost:3000/mcp/sse']\n});\n\n// HTTP transport\nconst client = new Client({\n  name: 'test-client',\n  version: '1.0.0'\n}, {\n  capabilities: {}\n});\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Test both SSE and HTTP transports - Implement proper error handling in client - Use connection pooling for HTTP transport</p>"},{"location":"troubleshooting/#authentication-failures","title":"Authentication Failures","text":""},{"location":"troubleshooting/#issue-nextauth-google-oauth-not-working","title":"Issue: NextAuth Google OAuth Not Working","text":"<p>Problem Description: Users cannot sign in with Google OAuth provider.</p> <p>Symptoms: <pre><code>OAuthCallbackError: OAuth account was not linked\nError: Configuration is invalid\n</code></pre></p> <p>Root Cause Analysis: - Invalid Google OAuth credentials - Incorrect redirect URI configuration - Missing OAuth consent screen setup - Domain verification issues</p> <p>Step-by-step Solution: 1. Verify Google OAuth configuration:    <pre><code># Check environment variables\necho $GOOGLE_CLIENT_ID\necho $GOOGLE_CLIENT_SECRET\n</code></pre></p> <ol> <li>Check Google Cloud Console settings:</li> <li>OAuth 2.0 Client IDs properly configured</li> <li>Authorized redirect URIs include: <code>http://localhost:3000/api/auth/callback/google</code></li> <li> <p>OAuth consent screen configured</p> </li> <li> <p>Verify NextAuth configuration:    <pre><code>// app/auth.ts\nexport const { handlers: { GET, POST }, auth, signIn, signOut } = NextAuth({\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    Google({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n  ],\n  trustHost: true, // Important for localhost\n});\n</code></pre></p> </li> <li> <p>Test OAuth flow manually:    <pre><code># Visit in browser\nhttp://localhost:3000/api/auth/signin\n</code></pre></p> </li> <li> <p>Check NextAuth debug logs:    <pre><code># Set debug mode\nexport NEXTAUTH_DEBUG=true\npnpm dev\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Keep OAuth credentials secure and up to date - Test OAuth flow in different environments - Monitor Google Cloud Console for API usage</p> <p>Related Issues: - Environment Variable Problems - Security-Related Errors</p>"},{"location":"troubleshooting/#issue-session-management-problems","title":"Issue: Session Management Problems","text":"<p>Problem Description: User sessions not persisting or invalid session errors.</p> <p>Symptoms: <pre><code>SessionRequiredError: Please add a `session` callback\nInvalid session token\nUser session expired unexpectedly\n</code></pre></p> <p>Root Cause Analysis: - Database session storage issues - Session token corruption - Clock synchronization problems - Session cleanup job removing active sessions</p> <p>Step-by-step Solution: 1. Check session in database:    <pre><code>SELECT sessionToken, expires, userId FROM Session \nWHERE sessionToken = 'session-token';\n</code></pre></p> <ol> <li> <p>Verify session callback:    <pre><code>// app/auth.ts\nexport const { ... } = NextAuth({\n  // ... other config\n  callbacks: {\n    session: async ({ session, token }) =&gt; {\n      return session;\n    },\n  },\n});\n</code></pre></p> </li> <li> <p>Check system clock:    <pre><code>date\n# Ensure server time is correct\n</code></pre></p> </li> <li> <p>Monitor session cleanup:    <pre><code># Check if cleanup job is too aggressive\ntail -f logs/cleanup.log\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Implement proper session monitoring - Use appropriate session expiration times - Handle session refresh gracefully</p>"},{"location":"troubleshooting/#api-endpoint-errors","title":"API Endpoint Errors","text":""},{"location":"troubleshooting/#issue-cors-errors-in-browser","title":"Issue: CORS Errors in Browser","text":"<p>Problem Description: Browser requests to API endpoints fail with CORS errors.</p> <p>Symptoms: <pre><code>Access to fetch at 'http://localhost:3000/api/oauth/token' from origin 'http://localhost:8080' has been blocked by CORS policy\n</code></pre></p> <p>Root Cause Analysis: - Missing CORS headers - Incorrect CORS configuration - Preflight request failures - Origin not allowed</p> <p>Step-by-step Solution: 1. Check CORS headers in API response:    <pre><code>curl -I -H \"Origin: http://localhost:8080\" \\\n     http://localhost:3000/api/oauth/token\n</code></pre></p> <ol> <li> <p>Verify OPTIONS method handler:    <pre><code>// In API route\nexport async function OPTIONS() {\n  return new NextResponse(\"OK\", {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n}\n</code></pre></p> </li> <li> <p>Add CORS to all responses:    <pre><code>function getCorsHeaders() {\n  return {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n}\n</code></pre></p> </li> <li> <p>Test preflight request:    <pre><code>curl -X OPTIONS \\\n     -H \"Origin: http://localhost:8080\" \\\n     -H \"Access-Control-Request-Method: POST\" \\\n     -H \"Access-Control-Request-Headers: Content-Type,Authorization\" \\\n     http://localhost:3000/api/oauth/token\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Use middleware for consistent CORS handling - Test API endpoints from different origins - Document CORS requirements for clients</p> <p>Related Issues: - MCP Client Integration Issues - Production Deployment Issues</p>"},{"location":"troubleshooting/#issue-api-rate-limiting-errors","title":"Issue: API Rate Limiting Errors","text":"<p>Problem Description: API requests fail due to rate limiting restrictions.</p> <p>Symptoms: <pre><code>{\n  \"error\": \"rate_limit_exceeded\",\n  \"retry_after\": 60\n}\n</code></pre></p> <p>Root Cause Analysis: - Too many requests from single IP - Client not implementing backoff - Rate limiting configuration too strict - Distributed rate limiting sync issues</p> <p>Step-by-step Solution: 1. Check rate limiting configuration:    <pre><code>// Typical rate limiting setup\nconst rateLimiter = new RateLimiter({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n});\n</code></pre></p> <ol> <li> <p>Implement exponential backoff in client:    <pre><code>async function apiRequest(url, options, retries = 3) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status === 429) {\n      const retryAfter = response.headers.get('Retry-After');\n      const delay = retryAfter ? parseInt(retryAfter) * 1000 : Math.pow(2, 4 - retries) * 1000;\n      await new Promise(resolve =&gt; setTimeout(resolve, delay));\n      return apiRequest(url, options, retries - 1);\n    }\n    return response;\n  } catch (error) {\n    if (retries &gt; 0) {\n      await new Promise(resolve =&gt; setTimeout(resolve, 1000));\n      return apiRequest(url, options, retries - 1);\n    }\n    throw error;\n  }\n}\n</code></pre></p> </li> <li> <p>Monitor rate limiting metrics:    <pre><code># Check rate limiting logs\ngrep \"rate_limit\" logs/api.log\n</code></pre></p> </li> <li> <p>Whitelist trusted IPs if needed:    <pre><code>const trustedIPs = ['192.168.1.0/24', '10.0.0.0/8'];\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Implement client-side request queuing - Use appropriate rate limiting windows - Monitor API usage patterns</p>"},{"location":"troubleshooting/#analytics-dashboard-problems","title":"Analytics Dashboard Problems","text":""},{"location":"troubleshooting/#issue-dashboard-data-not-loading","title":"Issue: Dashboard Data Not Loading","text":"<p>Problem Description: Analytics dashboard shows no data or loading errors.</p> <p>Symptoms: <pre><code>Failed to fetch analytics data\nChartJS error: Dataset is empty\nDashboard components showing loading state indefinitely\n</code></pre></p> <p>Root Cause Analysis: - Analytics collection not working - Database query failures - Frontend data fetching issues - Date range filtering problems</p> <p>Step-by-step Solution: 1. Check analytics data in database:    <pre><code>SELECT COUNT(*) FROM AnalyticsRequest WHERE timestamp &gt; NOW() - INTERVAL '1 day';\nSELECT COUNT(*) FROM AnalyticsSecurity WHERE timestamp &gt; NOW() - INTERVAL '1 day';\n</code></pre></p> <ol> <li> <p>Verify analytics collection endpoint:    <pre><code>curl -X POST http://localhost:3000/api/analytics/collect \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"timestamp\": \"2024-01-01T00:00:00Z\",\n    \"endpoint\": \"/test\",\n    \"method\": \"GET\",\n    \"statusCode\": 200,\n    \"responseTime\": 100,\n    \"ipAddress\": \"127.0.0.1\",\n    \"userAgent\": \"test\"\n  }'\n</code></pre></p> </li> <li> <p>Test analytics API endpoints:    <pre><code># Test main analytics endpoint\ncurl http://localhost:3000/api/analytics\n\n# Test security analytics\ncurl http://localhost:3000/api/analytics/security\n</code></pre></p> </li> <li> <p>Check browser console for errors:    <pre><code>// Look for network errors, CORS issues, or JavaScript errors\n// in browser developer tools\n</code></pre></p> </li> <li> <p>Verify data transformation:    <pre><code>// Check if chart data is properly formatted\nconsole.log('Chart data:', chartData);\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Implement analytics data validation - Add error boundaries to dashboard components - Monitor analytics collection health</p> <p>Related Issues: - Database Connection Problems - API Endpoint Errors</p>"},{"location":"troubleshooting/#issue-chart-rendering-problems","title":"Issue: Chart Rendering Problems","text":"<p>Problem Description: Charts in analytics dashboard not rendering correctly or showing errors.</p> <p>Symptoms: <pre><code>Canvas error: Cannot read property 'getContext' of null\nRecharts warning: Failed to parse the data\nChart displays \"No data available\"\n</code></pre></p> <p>Root Cause Analysis: - Invalid chart data format - Missing chart dependencies - CSS conflicts affecting chart rendering - Responsive layout issues</p> <p>Step-by-step Solution: 1. Verify chart data structure:    <pre><code>// Example valid data for Recharts\nconst chartData = [\n  { name: 'Jan', value: 100 },\n  { name: 'Feb', value: 200 },\n];\n</code></pre></p> <ol> <li> <p>Check chart component props:    <pre><code>&lt;ResponsiveContainer width=\"100%\" height={300}&gt;\n  &lt;LineChart data={chartData}&gt;\n    &lt;XAxis dataKey=\"name\" /&gt;\n    &lt;YAxis /&gt;\n    &lt;Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" /&gt;\n  &lt;/LineChart&gt;\n&lt;/ResponsiveContainer&gt;\n</code></pre></p> </li> <li> <p>Verify chart container dimensions:    <pre><code>.chart-container {\n  width: 100%;\n  height: 300px;\n  min-height: 300px;\n}\n</code></pre></p> </li> <li> <p>Test with static data:    <pre><code>// Replace dynamic data with static data to isolate issue\nconst testData = [\n  { timestamp: '2024-01-01', requests: 100 },\n  { timestamp: '2024-01-02', requests: 150 },\n];\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Validate chart data before rendering - Use chart component error boundaries - Test charts with various data scenarios</p>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#issue-slow-database-queries","title":"Issue: Slow Database Queries","text":"<p>Problem Description: Database operations taking too long, affecting API response times.</p> <p>Symptoms: <pre><code>API response time &gt; 5 seconds\nDatabase connection pool exhausted\nTimeout errors in application logs\n</code></pre></p> <p>Root Cause Analysis: - Missing database indexes - Inefficient query patterns - Large dataset without pagination - Database connection pool issues</p> <p>Step-by-step Solution: 1. Identify slow queries:    <pre><code>-- PostgreSQL slow query analysis\nSELECT query, mean_time, calls, total_time\nFROM pg_stat_statements\nORDER BY mean_time DESC\nLIMIT 10;\n</code></pre></p> <ol> <li> <p>Add missing indexes:    <pre><code>-- Common indexes for analytics\nCREATE INDEX idx_analytics_timestamp ON AnalyticsRequest(timestamp);\nCREATE INDEX idx_analytics_client ON AnalyticsRequest(clientId, timestamp);\nCREATE INDEX idx_security_events ON AnalyticsSecurity(timestamp, eventType);\n</code></pre></p> </li> <li> <p>Optimize Prisma queries:    <pre><code>// Use proper pagination\nconst requests = await prisma.analyticsRequest.findMany({\n  take: 100,\n  skip: page * 100,\n  orderBy: { timestamp: 'desc' },\n  where: {\n    timestamp: {\n      gte: startDate,\n      lte: endDate\n    }\n  }\n});\n</code></pre></p> </li> <li> <p>Configure connection pooling:    <pre><code># Database URL with connection pool settings\nDATABASE_URL=\"postgresql://user:pass@localhost:5432/db?connection_limit=10&amp;pool_timeout=20\"\n</code></pre></p> </li> <li> <p>Use database query optimization:    <pre><code>// Use select to limit fields\nconst analytics = await prisma.analyticsRequest.findMany({\n  select: {\n    id: true,\n    timestamp: true,\n    endpoint: true,\n    statusCode: true\n  }\n});\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Monitor query performance regularly - Use database query analyzers - Implement proper caching strategies</p> <p>Related Issues: - Database Connection Problems - Analytics Dashboard Problems</p>"},{"location":"troubleshooting/#issue-memory-leaks-and-high-cpu-usage","title":"Issue: Memory Leaks and High CPU Usage","text":"<p>Problem Description: Application consuming excessive memory or CPU resources.</p> <p>Symptoms: <pre><code>Node.js heap out of memory\nHigh CPU usage (&gt;80%)\nApplication becomes unresponsive\n</code></pre></p> <p>Root Cause Analysis: - Memory leaks in event handlers - Inefficient algorithms - Large data processing without streaming - Unhandled promise rejections</p> <p>Step-by-step Solution: 1. Monitor memory usage:    <pre><code># Use Node.js built-in profiler\nnode --inspect-brk server.js\n\n# Or use external tools\nnpm install -g clinic\nclinic flame -- node server.js\n</code></pre></p> <ol> <li> <p>Check for memory leaks:    <pre><code>// Add memory monitoring\nsetInterval(() =&gt; {\n  const used = process.memoryUsage();\n  console.log(`Memory usage: ${Math.round(used.rss / 1024 / 1024 * 100) / 100} MB`);\n}, 30000);\n</code></pre></p> </li> <li> <p>Optimize data processing:    <pre><code>// Use streaming for large datasets\nconst stream = prisma.analyticsRequest.findManyStream({\n  where: { timestamp: { gte: startDate } }\n});\n\nfor await (const record of stream) {\n  processRecord(record);\n}\n</code></pre></p> </li> <li> <p>Fix promise rejection handlers:    <pre><code>process.on('unhandledRejection', (reason, promise) =&gt; {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n});\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Use memory profiling in development - Implement proper cleanup in components - Monitor resource usage in production</p>"},{"location":"troubleshooting/#security-related-errors","title":"Security-Related Errors","text":""},{"location":"troubleshooting/#issue-token-security-violations","title":"Issue: Token Security Violations","text":"<p>Problem Description: Security events being triggered due to token misuse or attacks.</p> <p>Symptoms: <pre><code>{\n  \"eventType\": \"TOKEN_REUSE\",\n  \"severity\": \"high\",\n  \"details\": \"Access token used multiple times\"\n}\n</code></pre></p> <p>Root Cause Analysis: - Token replay attacks - Client not properly managing tokens - Token storage vulnerabilities - Insufficient token validation</p> <p>Step-by-step Solution: 1. Review security events:    <pre><code>SELECT eventType, severity, details, timestamp, ipAddress\nFROM AnalyticsSecurity\nWHERE eventType IN ('TOKEN_REUSE', 'INVALID_TOKEN', 'SUSPICIOUS_ACTIVITY')\nORDER BY timestamp DESC;\n</code></pre></p> <ol> <li> <p>Implement token binding:    <pre><code>// Bind token to client characteristics\nconst tokenBinding = {\n  userAgent: request.headers.get('user-agent'),\n  ipAddress: getClientIP(request),\n};\n</code></pre></p> </li> <li> <p>Add token introspection:    <pre><code>// Validate token properties\nasync function validateToken(token: string, request: NextRequest) {\n  const accessToken = await prisma.accessToken.findUnique({\n    where: { token },\n    include: { client: true, user: true }\n  });\n\n  // Validate audience\n  if (accessToken.resource !== expectedResource) {\n    throw new Error('Token audience mismatch');\n  }\n\n  return accessToken;\n}\n</code></pre></p> </li> <li> <p>Monitor unusual patterns:    <pre><code>// Track token usage patterns\nconst recentUsage = await prisma.analyticsRequest.count({\n  where: {\n    clientId: accessToken.clientId,\n    timestamp: { gte: new Date(Date.now() - 60000) } // Last minute\n  }\n});\n\nif (recentUsage &gt; RATE_LIMIT) {\n  await logSecurityEvent(request, 'RATE_LIMIT_EXCEEDED', 'Unusual token usage pattern');\n}\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Implement comprehensive token validation - Use short-lived access tokens - Monitor security events continuously</p> <p>Related Issues: - Authentication Failures - OAuth Flow Errors</p>"},{"location":"troubleshooting/#issue-csrf-and-xss-vulnerabilities","title":"Issue: CSRF and XSS Vulnerabilities","text":"<p>Problem Description: Security vulnerabilities in web application components.</p> <p>Symptoms: <pre><code>Security scanner reports CSRF vulnerability\nXSS attack detected in logs\nContent Security Policy violations\n</code></pre></p> <p>Root Cause Analysis: - Missing CSRF protection - Inadequate input sanitization - Unsafe HTML rendering - Weak Content Security Policy</p> <p>Step-by-step Solution: 1. Implement CSRF protection:    <pre><code>// Use NextAuth's built-in CSRF protection\nimport { auth } from './auth';\n\nexport async function POST(request: NextRequest) {\n  const session = await auth();\n  if (!session) {\n    return new Response('Unauthorized', { status: 401 });\n  }\n  // ... handle authenticated request\n}\n</code></pre></p> <ol> <li> <p>Sanitize user inputs:    <pre><code>import { z } from 'zod';\n\nconst inputSchema = z.object({\n  name: z.string().max(100).regex(/^[a-zA-Z0-9\\s]+$/),\n  description: z.string().max(500),\n});\n\nconst validatedInput = inputSchema.parse(userInput);\n</code></pre></p> </li> <li> <p>Configure Content Security Policy:    <pre><code>// next.config.ts\nconst securityHeaders = [\n  {\n    key: 'Content-Security-Policy',\n    value: \"default-src 'self'; script-src 'self' 'unsafe-eval'; style-src 'self' 'unsafe-inline'\"\n  }\n];\n</code></pre></p> </li> <li> <p>Use secure headers:    <pre><code>const secureHeaders = {\n  'X-Frame-Options': 'DENY',\n  'X-Content-Type-Options': 'nosniff',\n  'Referrer-Policy': 'strict-origin-when-cross-origin',\n  'Permissions-Policy': 'camera=(), microphone=(), geolocation=()',\n};\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Use security linting tools - Regular security audits - Keep dependencies updated</p>"},{"location":"troubleshooting/#production-deployment-issues","title":"Production Deployment Issues","text":""},{"location":"troubleshooting/#issue-environment-specific-configuration-errors","title":"Issue: Environment-Specific Configuration Errors","text":"<p>Problem Description: Application works in development but fails in production environment.</p> <p>Symptoms: <pre><code>Database connection failed in production\nOAuth callbacks failing with wrong URL\nHTTPS redirect loops\n</code></pre></p> <p>Root Cause Analysis: - Environment variable differences - HTTPS/HTTP configuration issues - Database connection string differences - Firewall or networking restrictions</p> <p>Step-by-step Solution: 1. Compare environment variables:    <pre><code># Development\ncat .env.local\n\n# Production  \necho $DATABASE_URL\necho $NEXTAUTH_URL\necho $AUTH_SECRET\n</code></pre></p> <ol> <li> <p>Verify production database access:    <pre><code># Test database connection from production server\npsql $DATABASE_URL -c \"SELECT 1;\"\n</code></pre></p> </li> <li> <p>Check OAuth redirect URIs:    <pre><code># Ensure production URLs are registered in OAuth provider\n# Google: https://console.cloud.google.com/\n# Callback URL should be: https://yourdomain.com/api/auth/callback/google\n</code></pre></p> </li> <li> <p>Test HTTPS configuration:    <pre><code>curl -I https://yourdomain.com/api/auth/signin\n</code></pre></p> </li> <li> <p>Verify database migrations:    <pre><code>pnpm prisma migrate deploy\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Use environment-specific configurations - Test production builds locally - Implement health check endpoints</p> <p>Related Issues: - Environment Variable Problems - Database Connection Problems</p>"},{"location":"troubleshooting/#issue-docker-deployment-problems","title":"Issue: Docker Deployment Problems","text":"<p>Problem Description: Application fails to start or function correctly in Docker containers.</p> <p>Symptoms: <pre><code>Container exits with code 1\nPort binding failures\nDatabase connection timeouts\n</code></pre></p> <p>Root Cause Analysis: - Incorrect Dockerfile configuration - Network connectivity issues between containers - Missing build dependencies - File permission problems</p> <p>Step-by-step Solution: 1. Verify Dockerfile:    <pre><code>FROM node:18-alpine\n\nWORKDIR /app\n\n# Copy package files first for better caching\nCOPY package*.json ./\nCOPY pnpm-lock.yaml ./\n\n# Install dependencies\nRUN npm install -g pnpm\nRUN pnpm install --frozen-lockfile\n\n# Copy source code\nCOPY . .\n\n# Generate Prisma client\nRUN pnpm prisma generate\n\n# Build application\nRUN pnpm build\n\nEXPOSE 3000\nCMD [\"pnpm\", \"start\"]\n</code></pre></p> <ol> <li> <p>Check Docker Compose configuration:    <pre><code>version: '3.8'\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - DATABASE_URL=postgresql://user:pass@db:5432/oauth\n    depends_on:\n      - db\n\n  db:\n    image: postgres:14\n    environment:\n      POSTGRES_DB: oauth\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: pass\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n</code></pre></p> </li> <li> <p>Test container networking:    <pre><code># From within app container\nping db\ntelnet db 5432\n</code></pre></p> </li> <li> <p>Check container logs:    <pre><code>docker logs container-name\ndocker exec -it container-name sh\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Use multi-stage Docker builds - Test Docker builds locally - Implement proper health checks</p>"},{"location":"troubleshooting/#environment-variable-problems","title":"Environment Variable Problems","text":""},{"location":"troubleshooting/#issue-missing-or-invalid-environment-variables","title":"Issue: Missing or Invalid Environment Variables","text":"<p>Problem Description: Application fails to start due to missing or incorrectly configured environment variables.</p> <p>Symptoms: <pre><code>Error: GOOGLE_CLIENT_ID is required\nDatabase connection string is invalid\nAUTH_SECRET must be at least 32 characters\n</code></pre></p> <p>Root Cause Analysis: - Environment variables not loaded - Incorrect variable names - Invalid variable values - Environment file not found</p> <p>Step-by-step Solution: 1. Create environment file template:    <pre><code># .env.example\nDATABASE_URL=\"postgresql://username:password@localhost:5432/database_name\"\nAUTH_SECRET=\"your-auth-secret-at-least-32-characters-long\"\nGOOGLE_CLIENT_ID=\"your-google-client-id.apps.googleusercontent.com\"\nGOOGLE_CLIENT_SECRET=\"your-google-client-secret\"\nNEXTAUTH_URL=\"http://localhost:3000\"\nREDIS_URL=\"redis://localhost:6379\" # Optional\n</code></pre></p> <ol> <li> <p>Validate environment variables:    <pre><code>// lib/env.ts\nimport { z } from 'zod';\n\nconst envSchema = z.object({\n  DATABASE_URL: z.string().url(),\n  AUTH_SECRET: z.string().min(32),\n  GOOGLE_CLIENT_ID: z.string().min(1),\n  GOOGLE_CLIENT_SECRET: z.string().min(1),\n  NEXTAUTH_URL: z.string().url().optional(),\n  REDIS_URL: z.string().url().optional(),\n});\n\nexport const env = envSchema.parse(process.env);\n</code></pre></p> </li> <li> <p>Check environment loading:    <pre><code># Verify variables are loaded\nnode -e \"console.log(process.env.DATABASE_URL)\"\n</code></pre></p> </li> <li> <p>Test database connection string:    <pre><code># Parse and validate DATABASE_URL\nnode -e \"\nconst url = new URL(process.env.DATABASE_URL);\nconsole.log('Host:', url.hostname);\nconsole.log('Database:', url.pathname.slice(1));\nconsole.log('User:', url.username);\n\"\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Use environment variable validation - Document all required variables - Use development-specific defaults where safe</p> <p>Related Issues: - Common Setup Issues - Production Deployment Issues</p>"},{"location":"troubleshooting/#issue-environment-variable-security","title":"Issue: Environment Variable Security","text":"<p>Problem Description: Sensitive environment variables exposed or not properly secured.</p> <p>Symptoms: <pre><code>Secrets visible in logs\nEnvironment variables in version control\nUnauthorized access to configuration\n</code></pre></p> <p>Root Cause Analysis: - Environment files committed to version control - Secrets logged in plain text - Insufficient access controls - Shared development environments</p> <p>Step-by-step Solution: 1. Audit version control:    <pre><code># Check if .env files are in git\ngit ls-files | grep -E '\\.(env|secret)'\n\n# Remove from version control if found\ngit rm --cached .env\necho \".env*\" &gt;&gt; .gitignore\n</code></pre></p> <ol> <li> <p>Scan for secrets in logs:    <pre><code># Search for potential secrets in logs\ngrep -r \"client_secret\\|password\\|key\" logs/\n</code></pre></p> </li> <li> <p>Use secret management:    <pre><code># Use external secret management\n# AWS Secrets Manager, HashiCorp Vault, etc.\nexport DATABASE_URL=$(aws secretsmanager get-secret-value --secret-id prod/database --query SecretString --output text)\n</code></pre></p> </li> <li> <p>Implement secret rotation:    <pre><code>// Implement regular secret rotation\nasync function rotateSecrets() {\n  // Generate new secrets\n  // Update external services\n  // Update application configuration\n}\n</code></pre></p> </li> </ol> <p>Prevention Tips: - Use secret scanning tools - Implement least privilege access - Regular secret rotation - Audit access logs</p>"},{"location":"troubleshooting/#debugging-tools-and-techniques","title":"Debugging Tools and Techniques","text":""},{"location":"troubleshooting/#development-debugging-tools","title":"Development Debugging Tools","text":"<p>Next.js Debug Mode: <pre><code># Enable Next.js debugging\nNODE_OPTIONS='--inspect' pnpm dev\n\n# With specific debug port\nNODE_OPTIONS='--inspect=9229' pnpm dev\n</code></pre></p> <p>Database Debugging: <pre><code># Prisma Studio for database inspection\npnpm prisma studio\n\n# Database query logging\nexport DEBUG=\"prisma:query\"\npnpm dev\n</code></pre></p> <p>Network Debugging: <pre><code># Monitor HTTP requests\ncurl -v http://localhost:3000/api/oauth/token\n\n# WebSocket/SSE debugging\nwebsocat ws://localhost:3000/mcp/sse\n</code></pre></p>"},{"location":"troubleshooting/#production-monitoring","title":"Production Monitoring","text":"<p>Health Check Endpoints: <pre><code>// app/api/health/route.ts\nexport async function GET() {\n  try {\n    // Test database connectivity\n    await prisma.$queryRaw`SELECT 1`;\n\n    return NextResponse.json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      services: {\n        database: 'up',\n        oauth: 'up'\n      }\n    });\n  } catch (error) {\n    return NextResponse.json({\n      status: 'unhealthy',\n      error: error.message\n    }, { status: 503 });\n  }\n}\n</code></pre></p> <p>Logging Configuration: <pre><code>// lib/logger.ts\nexport const logger = {\n  info: (message: string, meta?: any) =&gt; {\n    console.log(JSON.stringify({\n      timestamp: new Date().toISOString(),\n      level: 'info',\n      message,\n      ...meta\n    }));\n  },\n  error: (message: string, error?: Error, meta?: any) =&gt; {\n    console.error(JSON.stringify({\n      timestamp: new Date().toISOString(),\n      level: 'error',\n      message,\n      error: error?.stack,\n      ...meta\n    }));\n  }\n};\n</code></pre></p> <p>Performance Monitoring: <pre><code>// middleware.ts\nexport function middleware(request: NextRequest) {\n  const start = Date.now();\n\n  const response = NextResponse.next();\n\n  const duration = Date.now() - start;\n  console.log(`${request.method} ${request.url} - ${duration}ms`);\n\n  return response;\n}\n</code></pre></p>"},{"location":"troubleshooting/#debugging-checklist","title":"Debugging Checklist","text":"<p>When Encountering Issues: 1. Check application logs first 2. Verify environment variables 3. Test database connectivity 4. Validate API endpoints manually 5. Review recent code changes 6. Check external service status 7. Monitor resource usage 8. Test in isolated environment</p> <p>Log Analysis Commands: <pre><code># Search for errors\ngrep -i \"error\\|exception\\|fail\" logs/app.log\n\n# Monitor logs in real-time\ntail -f logs/app.log | grep -i \"oauth\\|mcp\"\n\n# Analyze request patterns\nawk '{print $1}' access.log | sort | uniq -c | sort -nr\n\n# Check response times\nawk '{if($NF &gt; 1000) print $0}' access.log\n</code></pre></p> <p>Testing Commands: <pre><code># Test OAuth flow\ncurl -X POST http://localhost:3000/api/oauth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"Test Client\",\"redirectUris\":[\"http://localhost:8080/callback\"]}'\n\n# Test MCP authentication\ncurl -X POST http://localhost:3000/mcp/sse \\\n  -H \"Authorization: Bearer your-token\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"method\":\"tools/list\",\"params\":{}}'\n\n# Test database queries\npsql $DATABASE_URL -c \"SELECT COUNT(*) FROM \\\"User\\\";\"\n</code></pre></p>"},{"location":"troubleshooting/#quick-reference","title":"Quick Reference","text":""},{"location":"troubleshooting/#common-error-codes","title":"Common Error Codes","text":"<ul> <li><code>invalid_client</code>: OAuth client not found or invalid credentials</li> <li><code>invalid_grant</code>: Authorization code or refresh token invalid</li> <li><code>unsupported_grant_type</code>: Grant type not supported</li> <li><code>rate_limit_exceeded</code>: Too many requests</li> <li><code>server_error</code>: Internal server error</li> </ul>"},{"location":"troubleshooting/#important-log-locations","title":"Important Log Locations","text":"<ul> <li>Application logs: <code>console.log</code> output</li> <li>Database logs: PostgreSQL logs</li> <li>OAuth flows: API route console output</li> <li>MCP requests: MCP handler debug logs</li> <li>Security events: Analytics security table</li> </ul>"},{"location":"troubleshooting/#emergency-procedures","title":"Emergency Procedures","text":"<ol> <li>Database Issues: Check PostgreSQL service, connection string, schema sync</li> <li>Authentication Failures: Verify OAuth configuration, check token validity</li> <li>Performance Problems: Monitor CPU/memory, check database queries</li> <li>Security Events: Review security logs, check for attacks</li> <li>Deployment Issues: Verify environment variables, test connectivity</li> </ol>"},{"location":"troubleshooting/#support-resources","title":"Support Resources","text":"<ul> <li>PostgreSQL Documentation: https://www.postgresql.org/docs/</li> <li>NextAuth.js Guide: https://next-auth.js.org/</li> <li>Prisma Documentation: https://www.prisma.io/docs/</li> <li>OAuth 2.1 Specification: https://tools.ietf.org/html/draft-ietf-oauth-v2-1</li> <li>MCP Specification: https://modelcontextprotocol.io/</li> </ul> <p>This troubleshooting guide should be regularly updated as new issues are discovered and resolved in the MCP OAuth server implementation.</p>"}]}