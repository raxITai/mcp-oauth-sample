generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  clients       Client[]
  accessTokens  AccessToken[]
  authCodes     AuthCode[]
  refreshTokens RefreshToken[]
  
  // Analytics relations
  analyticsRequests AnalyticsRequest[]
  securityEvents    AnalyticsSecurity[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id           String   @id @default(cuid())
  clientId     String   @unique @default(cuid())
  clientSecret String
  name         String
  redirectUris String[]
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessTokens AccessToken[]
  authCodes    AuthCode[]
  refreshTokens RefreshToken[]

  // Analytics relations
  analyticsRequests AnalyticsRequest[]
  securityEvents    AnalyticsSecurity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccessToken {
  id          String   @id @default(cuid())
  token       String   @unique
  expiresAt   DateTime
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource    String?

  createdAt DateTime @default(now())
}

model AuthCode {
  id         String   @id @default(cuid())
  code       String   @unique
  expiresAt  DateTime
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  redirectUri String
  codeChallenge String?
  codeChallengeMethod String?
  resource   String?

  createdAt DateTime @default(now())
}

model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique
  expiresAt   DateTime
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource    String?

  createdAt DateTime @default(now())
}

// Enhanced Analytics Schema for Enterprise MCP
model MCPServer {
  id          String   @id @default(cuid())
  name        String   // "CRM Server", "Finance API", etc
  identifier  String   @unique // mcp://crm.company.com
  description String?
  version     String?
  
  // Relations
  requests    AnalyticsRequest[]
  securityEvents AnalyticsSecurity[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([identifier])
}

model AnalyticsRequest {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  endpoint     String   // /mcp/sse, /mcp/mcp, etc
  method       String   // GET, POST, etc
  statusCode   Int
  responseTime Int      // milliseconds
  
  // Enhanced client/user tracking with proper relations
  clientId     String?
  client       Client?  @relation(fields: [clientId], references: [id])
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])
  
  // MCP Server context
  mcpServerId  String?
  mcpServer    MCPServer? @relation(fields: [mcpServerId], references: [id])
  
  // Enterprise SSO context
  ssoProvider  String?  // "google", "azure-ad", "okta"
  userRole     String?  // from JWT claims
  scopes       String[] // OAuth scopes used
  organization String?  // from SSO claims
  
  // Request metadata
  ipAddress    String
  userAgent    String   @db.Text
  
  // Geographic data (optional, populated async)
  country      String?
  city         String?
  
  // Derived fields for performance
  clientType   String?  // mcp-client, browser, etc
  platform     String?  // windows, macos, linux
  
  // MCP-specific tracking
  mcpMethod    String?  // "tools/list", "tools/call", etc
  toolName     String?  // specific tool being called
  
  // Indexes for fast queries
  @@index([timestamp])
  @@index([endpoint])
  @@index([clientId])
  @@index([userId])
  @@index([mcpServerId])
  @@index([statusCode])
  @@index([timestamp, endpoint])
  @@index([timestamp, clientId])
  @@index([timestamp, userId])
  @@index([organization])
  @@index([ssoProvider])
}

enum SecurityEventType {
  AUTH_FAILURE
  INVALID_TOKEN
  SUSPICIOUS_ACTIVITY
  RATE_LIMIT_EXCEEDED
  UNAUTHORIZED_ACCESS
  TOKEN_REUSE
  UNUSUAL_LOCATION
  PRIVILEGE_ESCALATION
  MALFORMED_REQUEST
  BRUTE_FORCE_ATTEMPT
}

model AnalyticsSecurity {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  eventType  SecurityEventType
  severity   String   // "low", "medium", "high", "critical"
  
  // Enhanced context
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  clientId   String?
  client     Client?  @relation(fields: [clientId], references: [id])
  
  // MCP Server context
  mcpServerId String?
  mcpServer   MCPServer? @relation(fields: [mcpServerId], references: [id])
  
  // Request context
  ipAddress    String
  userAgent    String   @db.Text
  endpoint     String?  // endpoint where event occurred
  
  // Geographic tracking
  country      String?
  city         String?
  
  // Enterprise context
  organization String?
  ssoProvider  String?
  
  // Structured event details
  details      Json     // structured data instead of text
  
  // Risk scoring
  riskScore    Int      @default(0) // 0-100
  resolved     Boolean  @default(false)
  resolvedAt   DateTime?
  resolvedBy   String?  // admin who resolved
  
  // Indexes for security queries
  @@index([timestamp])
  @@index([eventType])
  @@index([severity])
  @@index([ipAddress])
  @@index([userId])
  @@index([clientId])
  @@index([mcpServerId])
  @@index([timestamp, eventType])
  @@index([timestamp, severity])
  @@index([organization])
  @@index([resolved])
  @@index([riskScore])
}
